using System;
using Algorand;
using Algorand.Algod;
using Algorand.Algod.Model;
using Algorand.Algod.Model.Transactions;
using AlgoStudio;
using AlgoStudio.Core;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BiatecIdentityArc56
{


    public class BiatecIdentityProviderProxy : ProxyBase
    {
        private readonly AlgoStudio.ABI.ARC56.AppDescriptionArc56 App = null;

        public BiatecIdentityProviderProxy(DefaultApi defaultApi, ulong appId) : base(defaultApi, appId)
        {
            App = Newtonsoft.Json.JsonConvert.DeserializeObject<AlgoStudio.ABI.ARC56.AppDescriptionArc56>(Encoding.UTF8.GetString(Convert.FromBase64String(_ARC56DATA)));

        }

        public class IdentityInfo
        {
            public ulong VerificationStatus { get; set; }

            public ulong VerificationClass { get; set; }

            public bool IsCompany { get; set; }

            public string PersonUUID { get; set; }

            public string LegalEntityUUID { get; set; }

            public ulong BiatecEngagementPoints { get; set; }

            public ulong BiatecEngagementRank { get; set; }

            public ulong AvmEngagementPoints { get; set; }

            public ulong AvmEngagementRank { get; set; }

            public ulong TradingEngagementPoints { get; set; }

            public ulong TradingEngagementRank { get; set; }

            public bool IsLocked { get; set; }

            public ulong KycExpiration { get; set; }

            public ulong InvestorForExpiration { get; set; }

            public bool IsProfessionalInvestor { get; set; }

            public byte[] ToByteArray()
            {
                var ret = new List<byte>();
                AlgoStudio.ABI.ARC4.Types.WireType vVerificationStatus = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                vVerificationStatus.From(VerificationStatus);
                ret.AddRange(vVerificationStatus.Encode());
                AlgoStudio.ABI.ARC4.Types.WireType vVerificationClass = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                vVerificationClass.From(VerificationClass);
                ret.AddRange(vVerificationClass.Encode());
                AlgoStudio.ABI.ARC4.Types.WireType vIsCompany = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("bool");
                vIsCompany.From(IsCompany);
                ret.AddRange(vIsCompany.Encode());
                AlgoStudio.ABI.ARC4.Types.WireType vPersonUUID = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("string");
                vPersonUUID.From(PersonUUID);
                ret.AddRange(vPersonUUID.Encode());
                AlgoStudio.ABI.ARC4.Types.WireType vLegalEntityUUID = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("string");
                vLegalEntityUUID.From(LegalEntityUUID);
                ret.AddRange(vLegalEntityUUID.Encode());
                AlgoStudio.ABI.ARC4.Types.WireType vBiatecEngagementPoints = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                vBiatecEngagementPoints.From(BiatecEngagementPoints);
                ret.AddRange(vBiatecEngagementPoints.Encode());
                AlgoStudio.ABI.ARC4.Types.WireType vBiatecEngagementRank = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                vBiatecEngagementRank.From(BiatecEngagementRank);
                ret.AddRange(vBiatecEngagementRank.Encode());
                AlgoStudio.ABI.ARC4.Types.WireType vAvmEngagementPoints = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                vAvmEngagementPoints.From(AvmEngagementPoints);
                ret.AddRange(vAvmEngagementPoints.Encode());
                AlgoStudio.ABI.ARC4.Types.WireType vAvmEngagementRank = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                vAvmEngagementRank.From(AvmEngagementRank);
                ret.AddRange(vAvmEngagementRank.Encode());
                AlgoStudio.ABI.ARC4.Types.WireType vTradingEngagementPoints = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                vTradingEngagementPoints.From(TradingEngagementPoints);
                ret.AddRange(vTradingEngagementPoints.Encode());
                AlgoStudio.ABI.ARC4.Types.WireType vTradingEngagementRank = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                vTradingEngagementRank.From(TradingEngagementRank);
                ret.AddRange(vTradingEngagementRank.Encode());
                AlgoStudio.ABI.ARC4.Types.WireType vIsLocked = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("bool");
                vIsLocked.From(IsLocked);
                ret.AddRange(vIsLocked.Encode());
                AlgoStudio.ABI.ARC4.Types.WireType vKycExpiration = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                vKycExpiration.From(KycExpiration);
                ret.AddRange(vKycExpiration.Encode());
                AlgoStudio.ABI.ARC4.Types.WireType vInvestorForExpiration = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                vInvestorForExpiration.From(InvestorForExpiration);
                ret.AddRange(vInvestorForExpiration.Encode());
                AlgoStudio.ABI.ARC4.Types.WireType vIsProfessionalInvestor = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("bool");
                vIsProfessionalInvestor.From(IsProfessionalInvestor);
                ret.AddRange(vIsProfessionalInvestor.Encode());
                return ret.ToArray();

            }

            public static IdentityInfo Parse(byte[] bytes)
            {
                var queue = new Queue<byte>(bytes);
                var ret = new IdentityInfo();
                uint count = 0;
                AlgoStudio.ABI.ARC4.Types.WireType vVerificationStatus = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                count = vVerificationStatus.Decode(queue.ToArray());
                queue.Take(Convert.ToInt32(count));
                var valueVerificationStatus = vVerificationStatus.ToValue();
                if (valueVerificationStatus is ulong vVerificationStatusValue) { ret.VerificationStatus = vVerificationStatusValue; }
                AlgoStudio.ABI.ARC4.Types.WireType vVerificationClass = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                count = vVerificationClass.Decode(queue.ToArray());
                queue.Take(Convert.ToInt32(count));
                var valueVerificationClass = vVerificationClass.ToValue();
                if (valueVerificationClass is ulong vVerificationClassValue) { ret.VerificationClass = vVerificationClassValue; }
                AlgoStudio.ABI.ARC4.Types.WireType vIsCompany = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("bool");
                count = vIsCompany.Decode(queue.ToArray());
                queue.Take(Convert.ToInt32(count));
                var valueIsCompany = vIsCompany.ToValue();
                if (valueIsCompany is bool vIsCompanyValue) { ret.IsCompany = vIsCompanyValue; }
                AlgoStudio.ABI.ARC4.Types.WireType vPersonUUID = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("string");
                count = vPersonUUID.Decode(queue.ToArray());
                queue.Take(Convert.ToInt32(count));
                var valuePersonUUID = vPersonUUID.ToValue();
                if (valuePersonUUID is string vPersonUUIDValue) { ret.PersonUUID = vPersonUUIDValue; }
                AlgoStudio.ABI.ARC4.Types.WireType vLegalEntityUUID = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("string");
                count = vLegalEntityUUID.Decode(queue.ToArray());
                queue.Take(Convert.ToInt32(count));
                var valueLegalEntityUUID = vLegalEntityUUID.ToValue();
                if (valueLegalEntityUUID is string vLegalEntityUUIDValue) { ret.LegalEntityUUID = vLegalEntityUUIDValue; }
                AlgoStudio.ABI.ARC4.Types.WireType vBiatecEngagementPoints = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                count = vBiatecEngagementPoints.Decode(queue.ToArray());
                queue.Take(Convert.ToInt32(count));
                var valueBiatecEngagementPoints = vBiatecEngagementPoints.ToValue();
                if (valueBiatecEngagementPoints is ulong vBiatecEngagementPointsValue) { ret.BiatecEngagementPoints = vBiatecEngagementPointsValue; }
                AlgoStudio.ABI.ARC4.Types.WireType vBiatecEngagementRank = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                count = vBiatecEngagementRank.Decode(queue.ToArray());
                queue.Take(Convert.ToInt32(count));
                var valueBiatecEngagementRank = vBiatecEngagementRank.ToValue();
                if (valueBiatecEngagementRank is ulong vBiatecEngagementRankValue) { ret.BiatecEngagementRank = vBiatecEngagementRankValue; }
                AlgoStudio.ABI.ARC4.Types.WireType vAvmEngagementPoints = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                count = vAvmEngagementPoints.Decode(queue.ToArray());
                queue.Take(Convert.ToInt32(count));
                var valueAvmEngagementPoints = vAvmEngagementPoints.ToValue();
                if (valueAvmEngagementPoints is ulong vAvmEngagementPointsValue) { ret.AvmEngagementPoints = vAvmEngagementPointsValue; }
                AlgoStudio.ABI.ARC4.Types.WireType vAvmEngagementRank = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                count = vAvmEngagementRank.Decode(queue.ToArray());
                queue.Take(Convert.ToInt32(count));
                var valueAvmEngagementRank = vAvmEngagementRank.ToValue();
                if (valueAvmEngagementRank is ulong vAvmEngagementRankValue) { ret.AvmEngagementRank = vAvmEngagementRankValue; }
                AlgoStudio.ABI.ARC4.Types.WireType vTradingEngagementPoints = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                count = vTradingEngagementPoints.Decode(queue.ToArray());
                queue.Take(Convert.ToInt32(count));
                var valueTradingEngagementPoints = vTradingEngagementPoints.ToValue();
                if (valueTradingEngagementPoints is ulong vTradingEngagementPointsValue) { ret.TradingEngagementPoints = vTradingEngagementPointsValue; }
                AlgoStudio.ABI.ARC4.Types.WireType vTradingEngagementRank = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                count = vTradingEngagementRank.Decode(queue.ToArray());
                queue.Take(Convert.ToInt32(count));
                var valueTradingEngagementRank = vTradingEngagementRank.ToValue();
                if (valueTradingEngagementRank is ulong vTradingEngagementRankValue) { ret.TradingEngagementRank = vTradingEngagementRankValue; }
                AlgoStudio.ABI.ARC4.Types.WireType vIsLocked = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("bool");
                count = vIsLocked.Decode(queue.ToArray());
                queue.Take(Convert.ToInt32(count));
                var valueIsLocked = vIsLocked.ToValue();
                if (valueIsLocked is bool vIsLockedValue) { ret.IsLocked = vIsLockedValue; }
                AlgoStudio.ABI.ARC4.Types.WireType vKycExpiration = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                count = vKycExpiration.Decode(queue.ToArray());
                queue.Take(Convert.ToInt32(count));
                var valueKycExpiration = vKycExpiration.ToValue();
                if (valueKycExpiration is ulong vKycExpirationValue) { ret.KycExpiration = vKycExpirationValue; }
                AlgoStudio.ABI.ARC4.Types.WireType vInvestorForExpiration = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                count = vInvestorForExpiration.Decode(queue.ToArray());
                queue.Take(Convert.ToInt32(count));
                var valueInvestorForExpiration = vInvestorForExpiration.ToValue();
                if (valueInvestorForExpiration is ulong vInvestorForExpirationValue) { ret.InvestorForExpiration = vInvestorForExpirationValue; }
                AlgoStudio.ABI.ARC4.Types.WireType vIsProfessionalInvestor = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("bool");
                count = vIsProfessionalInvestor.Decode(queue.ToArray());
                queue.Take(Convert.ToInt32(count));
                var valueIsProfessionalInvestor = vIsProfessionalInvestor.ToValue();
                if (valueIsProfessionalInvestor is bool vIsProfessionalInvestorValue) { ret.IsProfessionalInvestor = vIsProfessionalInvestorValue; }
                return ret;

            }

        }

        public class UserInfoV1
        {
            public byte Version { get; set; }

            public ulong VerificationStatus { get; set; }

            public ulong VerificationClass { get; set; }

            public ulong BiatecEngagementPoints { get; set; }

            public ulong BiatecEngagementRank { get; set; }

            public ulong AvmEngagementPoints { get; set; }

            public ulong AvmEngagementRank { get; set; }

            public ulong TradingEngagementPoints { get; set; }

            public ulong TradingEngagementRank { get; set; }

            public AlgoStudio.ABI.ARC4.Types.UInt256 FeeMultiplier { get; set; }

            public AlgoStudio.ABI.ARC4.Types.UInt256 Base { get; set; }

            public bool IsLocked { get; set; }

            public ulong KycExpiration { get; set; }

            public ulong InvestorForExpiration { get; set; }

            public bool IsProfessionalInvestor { get; set; }

            public byte[] ToByteArray()
            {
                var ret = new List<byte>();
                AlgoStudio.ABI.ARC4.Types.WireType vVersion = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint8");
                vVersion.From(Version);
                ret.AddRange(vVersion.Encode());
                AlgoStudio.ABI.ARC4.Types.WireType vVerificationStatus = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                vVerificationStatus.From(VerificationStatus);
                ret.AddRange(vVerificationStatus.Encode());
                AlgoStudio.ABI.ARC4.Types.WireType vVerificationClass = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                vVerificationClass.From(VerificationClass);
                ret.AddRange(vVerificationClass.Encode());
                AlgoStudio.ABI.ARC4.Types.WireType vBiatecEngagementPoints = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                vBiatecEngagementPoints.From(BiatecEngagementPoints);
                ret.AddRange(vBiatecEngagementPoints.Encode());
                AlgoStudio.ABI.ARC4.Types.WireType vBiatecEngagementRank = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                vBiatecEngagementRank.From(BiatecEngagementRank);
                ret.AddRange(vBiatecEngagementRank.Encode());
                AlgoStudio.ABI.ARC4.Types.WireType vAvmEngagementPoints = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                vAvmEngagementPoints.From(AvmEngagementPoints);
                ret.AddRange(vAvmEngagementPoints.Encode());
                AlgoStudio.ABI.ARC4.Types.WireType vAvmEngagementRank = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                vAvmEngagementRank.From(AvmEngagementRank);
                ret.AddRange(vAvmEngagementRank.Encode());
                AlgoStudio.ABI.ARC4.Types.WireType vTradingEngagementPoints = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                vTradingEngagementPoints.From(TradingEngagementPoints);
                ret.AddRange(vTradingEngagementPoints.Encode());
                AlgoStudio.ABI.ARC4.Types.WireType vTradingEngagementRank = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                vTradingEngagementRank.From(TradingEngagementRank);
                ret.AddRange(vTradingEngagementRank.Encode());
                AlgoStudio.ABI.ARC4.Types.WireType vFeeMultiplier = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint256");
                vFeeMultiplier.From(FeeMultiplier);
                ret.AddRange(vFeeMultiplier.Encode());
                AlgoStudio.ABI.ARC4.Types.WireType vBase = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint256");
                vBase.From(Base);
                ret.AddRange(vBase.Encode());
                AlgoStudio.ABI.ARC4.Types.WireType vIsLocked = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("bool");
                vIsLocked.From(IsLocked);
                ret.AddRange(vIsLocked.Encode());
                AlgoStudio.ABI.ARC4.Types.WireType vKycExpiration = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                vKycExpiration.From(KycExpiration);
                ret.AddRange(vKycExpiration.Encode());
                AlgoStudio.ABI.ARC4.Types.WireType vInvestorForExpiration = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                vInvestorForExpiration.From(InvestorForExpiration);
                ret.AddRange(vInvestorForExpiration.Encode());
                AlgoStudio.ABI.ARC4.Types.WireType vIsProfessionalInvestor = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("bool");
                vIsProfessionalInvestor.From(IsProfessionalInvestor);
                ret.AddRange(vIsProfessionalInvestor.Encode());
                return ret.ToArray();

            }

            public static UserInfoV1 Parse(byte[] bytes)
            {
                var queue = new Queue<byte>(bytes);
                var ret = new UserInfoV1();
                uint count = 0;
                AlgoStudio.ABI.ARC4.Types.WireType vVersion = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint8");
                count = vVersion.Decode(queue.ToArray());
                queue.Take(Convert.ToInt32(count));
                var valueVersion = vVersion.ToValue();
                if (valueVersion is byte vVersionValue) { ret.Version = vVersionValue; }
                AlgoStudio.ABI.ARC4.Types.WireType vVerificationStatus = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                count = vVerificationStatus.Decode(queue.ToArray());
                queue.Take(Convert.ToInt32(count));
                var valueVerificationStatus = vVerificationStatus.ToValue();
                if (valueVerificationStatus is ulong vVerificationStatusValue) { ret.VerificationStatus = vVerificationStatusValue; }
                AlgoStudio.ABI.ARC4.Types.WireType vVerificationClass = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                count = vVerificationClass.Decode(queue.ToArray());
                queue.Take(Convert.ToInt32(count));
                var valueVerificationClass = vVerificationClass.ToValue();
                if (valueVerificationClass is ulong vVerificationClassValue) { ret.VerificationClass = vVerificationClassValue; }
                AlgoStudio.ABI.ARC4.Types.WireType vBiatecEngagementPoints = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                count = vBiatecEngagementPoints.Decode(queue.ToArray());
                queue.Take(Convert.ToInt32(count));
                var valueBiatecEngagementPoints = vBiatecEngagementPoints.ToValue();
                if (valueBiatecEngagementPoints is ulong vBiatecEngagementPointsValue) { ret.BiatecEngagementPoints = vBiatecEngagementPointsValue; }
                AlgoStudio.ABI.ARC4.Types.WireType vBiatecEngagementRank = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                count = vBiatecEngagementRank.Decode(queue.ToArray());
                queue.Take(Convert.ToInt32(count));
                var valueBiatecEngagementRank = vBiatecEngagementRank.ToValue();
                if (valueBiatecEngagementRank is ulong vBiatecEngagementRankValue) { ret.BiatecEngagementRank = vBiatecEngagementRankValue; }
                AlgoStudio.ABI.ARC4.Types.WireType vAvmEngagementPoints = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                count = vAvmEngagementPoints.Decode(queue.ToArray());
                queue.Take(Convert.ToInt32(count));
                var valueAvmEngagementPoints = vAvmEngagementPoints.ToValue();
                if (valueAvmEngagementPoints is ulong vAvmEngagementPointsValue) { ret.AvmEngagementPoints = vAvmEngagementPointsValue; }
                AlgoStudio.ABI.ARC4.Types.WireType vAvmEngagementRank = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                count = vAvmEngagementRank.Decode(queue.ToArray());
                queue.Take(Convert.ToInt32(count));
                var valueAvmEngagementRank = vAvmEngagementRank.ToValue();
                if (valueAvmEngagementRank is ulong vAvmEngagementRankValue) { ret.AvmEngagementRank = vAvmEngagementRankValue; }
                AlgoStudio.ABI.ARC4.Types.WireType vTradingEngagementPoints = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                count = vTradingEngagementPoints.Decode(queue.ToArray());
                queue.Take(Convert.ToInt32(count));
                var valueTradingEngagementPoints = vTradingEngagementPoints.ToValue();
                if (valueTradingEngagementPoints is ulong vTradingEngagementPointsValue) { ret.TradingEngagementPoints = vTradingEngagementPointsValue; }
                AlgoStudio.ABI.ARC4.Types.WireType vTradingEngagementRank = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                count = vTradingEngagementRank.Decode(queue.ToArray());
                queue.Take(Convert.ToInt32(count));
                var valueTradingEngagementRank = vTradingEngagementRank.ToValue();
                if (valueTradingEngagementRank is ulong vTradingEngagementRankValue) { ret.TradingEngagementRank = vTradingEngagementRankValue; }
                AlgoStudio.ABI.ARC4.Types.WireType vFeeMultiplier = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint256");
                count = vFeeMultiplier.Decode(queue.ToArray());
                queue.Take(Convert.ToInt32(count));
                var valueFeeMultiplier = vFeeMultiplier.ToValue();
                if (valueFeeMultiplier is AlgoStudio.ABI.ARC4.Types.UInt256 vFeeMultiplierValue) { ret.FeeMultiplier = vFeeMultiplierValue; }
                AlgoStudio.ABI.ARC4.Types.WireType vBase = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint256");
                count = vBase.Decode(queue.ToArray());
                queue.Take(Convert.ToInt32(count));
                var valueBase = vBase.ToValue();
                if (valueBase is AlgoStudio.ABI.ARC4.Types.UInt256 vBaseValue) { ret.Base = vBaseValue; }
                AlgoStudio.ABI.ARC4.Types.WireType vIsLocked = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("bool");
                count = vIsLocked.Decode(queue.ToArray());
                queue.Take(Convert.ToInt32(count));
                var valueIsLocked = vIsLocked.ToValue();
                if (valueIsLocked is bool vIsLockedValue) { ret.IsLocked = vIsLockedValue; }
                AlgoStudio.ABI.ARC4.Types.WireType vKycExpiration = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                count = vKycExpiration.Decode(queue.ToArray());
                queue.Take(Convert.ToInt32(count));
                var valueKycExpiration = vKycExpiration.ToValue();
                if (valueKycExpiration is ulong vKycExpirationValue) { ret.KycExpiration = vKycExpirationValue; }
                AlgoStudio.ABI.ARC4.Types.WireType vInvestorForExpiration = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                count = vInvestorForExpiration.Decode(queue.ToArray());
                queue.Take(Convert.ToInt32(count));
                var valueInvestorForExpiration = vInvestorForExpiration.ToValue();
                if (valueInvestorForExpiration is ulong vInvestorForExpirationValue) { ret.InvestorForExpiration = vInvestorForExpirationValue; }
                AlgoStudio.ABI.ARC4.Types.WireType vIsProfessionalInvestor = AlgoStudio.ABI.ARC4.Types.WireType.FromABIDescription("bool");
                count = vIsProfessionalInvestor.Decode(queue.ToArray());
                queue.Take(Convert.ToInt32(count));
                var valueIsProfessionalInvestor = vIsProfessionalInvestor.ToValue();
                if (valueIsProfessionalInvestor is bool vIsProfessionalInvestorValue) { ret.IsProfessionalInvestor = vIsProfessionalInvestorValue; }
                return ret;

            }

        }

        ///<summary>
        ///Initial setup
        ///</summary>
        public async Task createApplication(Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AlgoStudio.Core.OnCompleteType _tx_callType = AlgoStudio.Core.OnCompleteType.NoOp)
        {
            _tx_boxes ??= new List<BoxRef>();
            _tx_transactions ??= new List<Transaction>();
            _tx_assets ??= new List<ulong>();
            _tx_apps ??= new List<ulong>();
            _tx_accounts ??= new List<Address>();
            byte[] abiHandle = { 184, 68, 123, 54 };
            var result = await base.CallApp(new List<object> { abiHandle }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        public async Task<List<Transaction>> createApplication_Transactions(Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AlgoStudio.Core.OnCompleteType _tx_callType = AlgoStudio.Core.OnCompleteType.NoOp)
        {
            byte[] abiHandle = { 184, 68, 123, 54 };
            return await base.MakeTransactionList(new List<object> { abiHandle }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        ///<summary>
        ///Biatec deploys single identity provider smart contract
        ///</summary>
        /// <param name="appBiatecConfigProvider">Biatec amm provider </param>
        public async Task bootstrap(ulong appBiatecConfigProvider, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AlgoStudio.Core.OnCompleteType _tx_callType = AlgoStudio.Core.OnCompleteType.NoOp)
        {
            _tx_boxes ??= new List<BoxRef>();
            _tx_transactions ??= new List<Transaction>();
            _tx_assets ??= new List<ulong>();
            _tx_apps ??= new List<ulong>();
            _tx_accounts ??= new List<Address>();
            byte[] abiHandle = { 160, 202, 223, 138 };
            var result = await base.CallApp(new List<object> { abiHandle, appBiatecConfigProvider }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        public async Task<List<Transaction>> bootstrap_Transactions(ulong appBiatecConfigProvider, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AlgoStudio.Core.OnCompleteType _tx_callType = AlgoStudio.Core.OnCompleteType.NoOp)
        {
            byte[] abiHandle = { 160, 202, 223, 138 };
            return await base.MakeTransactionList(new List<object> { abiHandle, appBiatecConfigProvider }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        ///<summary>
        ///addressUdpater from global biatec configuration is allowed to update application
        ///</summary>
        /// <param name="appBiatecConfigProvider"> </param>
        /// <param name="newVersion"> </param>
        public async Task updateApplication(ulong appBiatecConfigProvider, byte[] newVersion, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AlgoStudio.Core.OnCompleteType _tx_callType = AlgoStudio.Core.OnCompleteType.NoOp)
        {
            _tx_boxes ??= new List<BoxRef>();
            _tx_transactions ??= new List<Transaction>();
            _tx_assets ??= new List<ulong>();
            _tx_apps ??= new List<ulong>();
            _tx_accounts ??= new List<Address>();
            byte[] abiHandle = { 95, 200, 133, 160 };
            var result = await base.CallApp(new List<object> { abiHandle, appBiatecConfigProvider, newVersion }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        public async Task<List<Transaction>> updateApplication_Transactions(ulong appBiatecConfigProvider, byte[] newVersion, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AlgoStudio.Core.OnCompleteType _tx_callType = AlgoStudio.Core.OnCompleteType.NoOp)
        {
            byte[] abiHandle = { 95, 200, 133, 160 };
            return await base.MakeTransactionList(new List<object> { abiHandle, appBiatecConfigProvider, newVersion }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        ///<summary>
        ///
        ///</summary>
        /// <param name="user"> </param>
        /// <param name="info"> IdentityInfo</param>
        public async Task selfRegistration(Address user, IdentityInfo info, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AlgoStudio.Core.OnCompleteType _tx_callType = AlgoStudio.Core.OnCompleteType.NoOp)
        {
            _tx_boxes ??= new List<BoxRef>();
            _tx_transactions ??= new List<Transaction>();
            _tx_assets ??= new List<ulong>();
            _tx_apps ??= new List<ulong>();
            _tx_accounts ??= new List<Address>();
            _tx_accounts.AddRange(new List<Address> { user });
            byte[] abiHandle = { 232, 200, 238, 217 };
            var result = await base.CallApp(new List<object> { abiHandle, info }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        public async Task<List<Transaction>> selfRegistration_Transactions(Address user, IdentityInfo info, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AlgoStudio.Core.OnCompleteType _tx_callType = AlgoStudio.Core.OnCompleteType.NoOp)
        {
            byte[] abiHandle = { 232, 200, 238, 217 };
            return await base.MakeTransactionList(new List<object> { abiHandle, info }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        ///<summary>
        ///
        ///</summary>
        /// <param name="user"> </param>
        /// <param name="info"> IdentityInfo</param>
        public async Task setInfo(Address user, IdentityInfo info, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AlgoStudio.Core.OnCompleteType _tx_callType = AlgoStudio.Core.OnCompleteType.NoOp)
        {
            _tx_boxes ??= new List<BoxRef>();
            _tx_transactions ??= new List<Transaction>();
            _tx_assets ??= new List<ulong>();
            _tx_apps ??= new List<ulong>();
            _tx_accounts ??= new List<Address>();
            _tx_accounts.AddRange(new List<Address> { user });
            byte[] abiHandle = { 213, 131, 167, 89 };
            var result = await base.CallApp(new List<object> { abiHandle, info }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        public async Task<List<Transaction>> setInfo_Transactions(Address user, IdentityInfo info, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AlgoStudio.Core.OnCompleteType _tx_callType = AlgoStudio.Core.OnCompleteType.NoOp)
        {
            byte[] abiHandle = { 213, 131, 167, 89 };
            return await base.MakeTransactionList(new List<object> { abiHandle, info }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        ///<summary>
        ///addressExecutiveFee can perfom key registration for this LP pool
        ///
        ///
        ///Only addressExecutiveFee is allowed to execute this method.
        ///</summary>
        /// <param name="appBiatecConfigProvider"> </param>
        /// <param name="votePK"> </param>
        /// <param name="selectionPK"> </param>
        /// <param name="stateProofPK"> </param>
        /// <param name="voteFirst"> </param>
        /// <param name="voteLast"> </param>
        /// <param name="voteKeyDilution"> </param>
        public async Task sendOnlineKeyRegistration(ulong appBiatecConfigProvider, byte[] votePK, byte[] selectionPK, byte[] stateProofPK, ulong voteFirst, ulong voteLast, ulong voteKeyDilution, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AlgoStudio.Core.OnCompleteType _tx_callType = AlgoStudio.Core.OnCompleteType.NoOp)
        {
            _tx_boxes ??= new List<BoxRef>();
            _tx_transactions ??= new List<Transaction>();
            _tx_assets ??= new List<ulong>();
            _tx_apps ??= new List<ulong>();
            _tx_accounts ??= new List<Address>();
            byte[] abiHandle = { 131, 146, 92, 23 };
            var result = await base.CallApp(new List<object> { abiHandle, appBiatecConfigProvider, votePK, selectionPK, stateProofPK, voteFirst, voteLast, voteKeyDilution }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        public async Task<List<Transaction>> sendOnlineKeyRegistration_Transactions(ulong appBiatecConfigProvider, byte[] votePK, byte[] selectionPK, byte[] stateProofPK, ulong voteFirst, ulong voteLast, ulong voteKeyDilution, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AlgoStudio.Core.OnCompleteType _tx_callType = AlgoStudio.Core.OnCompleteType.NoOp)
        {
            byte[] abiHandle = { 131, 146, 92, 23 };
            return await base.MakeTransactionList(new List<object> { abiHandle, appBiatecConfigProvider, votePK, selectionPK, stateProofPK, voteFirst, voteLast, voteKeyDilution }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        ///<summary>
        ///Returns user information - fee multiplier, verification class, engagement class ..
        ///</summary>
        /// <param name="user">Get info for specific user address </param>
        /// <param name="v">Version of the data structure to return </param>
        public async Task<UserInfoV1> getUser(Address user, byte v, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AlgoStudio.Core.OnCompleteType _tx_callType = AlgoStudio.Core.OnCompleteType.NoOp)
        {
            _tx_boxes ??= new List<BoxRef>();
            _tx_transactions ??= new List<Transaction>();
            _tx_assets ??= new List<ulong>();
            _tx_apps ??= new List<ulong>();
            _tx_accounts ??= new List<Address>();
            _tx_accounts.AddRange(new List<Address> { user });
            byte[] abiHandle = { 153, 54, 161, 109 };
            var result = await base.CallApp(new List<object> { abiHandle, v }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);
            throw new Exception("Conversion not implemented"); // <unknown return conversion>

        }

        public async Task<List<Transaction>> getUser_Transactions(Address user, byte v, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AlgoStudio.Core.OnCompleteType _tx_callType = AlgoStudio.Core.OnCompleteType.NoOp)
        {
            byte[] abiHandle = { 153, 54, 161, 109 };
            return await base.MakeTransactionList(new List<object> { abiHandle, v }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        ///<summary>
        ///If someone deposits excess assets to this smart contract biatec can use them.
        ///
        ///
        ///Only addressExecutiveFee is allowed to execute this method.
        ///</summary>
        /// <param name="appBiatecConfigProvider">Biatec config app. Only addressExecutiveFee is allowed to execute this method. </param>
        /// <param name="asset">Asset to withdraw. If native token, then zero </param>
        /// <param name="amount">Amount of the asset to be withdrawn </param>
        public async Task<ulong> withdrawExcessAssets(ulong appBiatecConfigProvider, ulong asset, ulong amount, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AlgoStudio.Core.OnCompleteType _tx_callType = AlgoStudio.Core.OnCompleteType.NoOp)
        {
            _tx_boxes ??= new List<BoxRef>();
            _tx_transactions ??= new List<Transaction>();
            _tx_assets ??= new List<ulong>();
            _tx_apps ??= new List<ulong>();
            _tx_accounts ??= new List<Address>();
            byte[] abiHandle = { 203, 162, 233, 93 };
            var result = await base.CallApp(new List<object> { abiHandle, appBiatecConfigProvider, asset, amount }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);
            return BitConverter.ToUInt64(ReverseIfLittleEndian(result.First().ToArray()), 0);

        }

        public async Task<List<Transaction>> withdrawExcessAssets_Transactions(ulong appBiatecConfigProvider, ulong asset, ulong amount, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AlgoStudio.Core.OnCompleteType _tx_callType = AlgoStudio.Core.OnCompleteType.NoOp)
        {
            byte[] abiHandle = { 203, 162, 233, 93 };
            return await base.MakeTransactionList(new List<object> { abiHandle, appBiatecConfigProvider, asset, amount }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        protected string _ARC56DATA = "";
    }

}
