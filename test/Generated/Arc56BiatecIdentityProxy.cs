using System;
using Algorand;
using Algorand.Algod;
using Algorand.Algod.Model;
using Algorand.Algod.Model.Transactions;
using AVM.ClientGenerator;
using AVM.ClientGenerator.Core;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AVM.ClientGenerator.ABI.ARC56;
using Algorand.AVM.ClientGenerator.ABI.ARC56;

namespace BiatecIdentityArc56
{


    public class BiatecIdentityProviderProxy : ProxyBase
    {
        public override AppDescriptionArc56 App { get; set; } = null;

        public BiatecIdentityProviderProxy(DefaultApi defaultApi, ulong appId) : base(defaultApi, appId)
        {
            App = Newtonsoft.Json.JsonConvert.DeserializeObject<AVM.ClientGenerator.ABI.ARC56.AppDescriptionArc56>(Encoding.UTF8.GetString(Convert.FromBase64String(_ARC56DATA))) ?? throw new Exception("Error reading ARC56 data");

        }

        public class Structs
        {
            public class IdentityInfo : AVMObjectType
            {
                public ulong VerificationClass { get; set; }

                public bool IsLocked { get; set; }

                public ulong FeeMultiplier { get; set; }

                public ulong FeeMultiplierBase { get; set; }

                public ulong KycExpiration { get; set; }

                public ulong InvestorForExpiration { get; set; }

                public ulong VerificationStatus { get; set; }

                public bool IsCompany { get; set; }

                public string PersonUuid { get; set; }

                public string LegalEntityUuid { get; set; }

                public ulong BiatecEngagementPoints { get; set; }

                public ulong BiatecEngagementRank { get; set; }

                public ulong AvmEngagementPoints { get; set; }

                public ulong AvmEngagementRank { get; set; }

                public ulong TradingEngagementPoints { get; set; }

                public ulong TradingEngagementRank { get; set; }

                public bool IsProfessionalInvestor { get; set; }

                public byte[] ToByteArray()
                {
                    var ret = new List<byte>();
                    var stringRef = new Dictionary<int, byte[]>();
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vVerificationClass = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    vVerificationClass.From(VerificationClass);
                    ret.AddRange(vVerificationClass.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vIsLocked = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("bool");
                    vIsLocked.From(IsLocked);
                    ret.AddRange(vIsLocked.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vFeeMultiplier = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    vFeeMultiplier.From(FeeMultiplier);
                    ret.AddRange(vFeeMultiplier.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vFeeMultiplierBase = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    vFeeMultiplierBase.From(FeeMultiplierBase);
                    ret.AddRange(vFeeMultiplierBase.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vKycExpiration = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    vKycExpiration.From(KycExpiration);
                    ret.AddRange(vKycExpiration.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vInvestorForExpiration = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    vInvestorForExpiration.From(InvestorForExpiration);
                    ret.AddRange(vInvestorForExpiration.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vVerificationStatus = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    vVerificationStatus.From(VerificationStatus);
                    ret.AddRange(vVerificationStatus.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vIsCompany = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("bool");
                    vIsCompany.From(IsCompany);
                    ret.AddRange(vIsCompany.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vPersonUuid = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("string");
                    vPersonUuid.From(PersonUuid);
                    stringRef[ret.Count] = vPersonUuid.Encode();
                    ret.AddRange(new byte[2]);
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vLegalEntityUuid = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("string");
                    vLegalEntityUuid.From(LegalEntityUuid);
                    stringRef[ret.Count] = vLegalEntityUuid.Encode();
                    ret.AddRange(new byte[2]);
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vBiatecEngagementPoints = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    vBiatecEngagementPoints.From(BiatecEngagementPoints);
                    ret.AddRange(vBiatecEngagementPoints.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vBiatecEngagementRank = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    vBiatecEngagementRank.From(BiatecEngagementRank);
                    ret.AddRange(vBiatecEngagementRank.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vAvmEngagementPoints = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    vAvmEngagementPoints.From(AvmEngagementPoints);
                    ret.AddRange(vAvmEngagementPoints.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vAvmEngagementRank = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    vAvmEngagementRank.From(AvmEngagementRank);
                    ret.AddRange(vAvmEngagementRank.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vTradingEngagementPoints = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    vTradingEngagementPoints.From(TradingEngagementPoints);
                    ret.AddRange(vTradingEngagementPoints.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vTradingEngagementRank = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    vTradingEngagementRank.From(TradingEngagementRank);
                    ret.AddRange(vTradingEngagementRank.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vIsProfessionalInvestor = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("bool");
                    vIsProfessionalInvestor.From(IsProfessionalInvestor);
                    ret.AddRange(vIsProfessionalInvestor.Encode());
                    foreach (var item in stringRef)
                    {
                        var b1 = ret.Count;
                        ret[item.Key] = Convert.ToByte(b1 / 256);
                        ret[item.Key + 1] = Convert.ToByte(b1 % 256);
                        ret.AddRange(item.Value);
                    }
                    return ret.ToArray();

                }

                public static IdentityInfo Parse(byte[] bytes)
                {
                    var queue = new Queue<byte>(bytes);
                    var prefixOffset = 0;
                    var retPrefix = new byte[4] { bytes[0], bytes[1], bytes[2], bytes[3] };
                    if (retPrefix.SequenceEqual(Constants.RetPrefix))
                    {
                        prefixOffset = 4;
                        for (int i = 0; i < 4 && queue.Count > 0; i++) { queue.Dequeue(); }
                    }
                    var ret = new IdentityInfo();
                    uint count = 0;
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vVerificationClass = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    count = vVerificationClass.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueVerificationClass = vVerificationClass.ToValue();
                    if (valueVerificationClass is ulong vVerificationClassValue) { ret.VerificationClass = vVerificationClassValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vIsLocked = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("bool");
                    count = vIsLocked.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueIsLocked = vIsLocked.ToValue();
                    if (valueIsLocked is bool vIsLockedValue) { ret.IsLocked = vIsLockedValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vFeeMultiplier = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    count = vFeeMultiplier.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueFeeMultiplier = vFeeMultiplier.ToValue();
                    if (valueFeeMultiplier is ulong vFeeMultiplierValue) { ret.FeeMultiplier = vFeeMultiplierValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vFeeMultiplierBase = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    count = vFeeMultiplierBase.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueFeeMultiplierBase = vFeeMultiplierBase.ToValue();
                    if (valueFeeMultiplierBase is ulong vFeeMultiplierBaseValue) { ret.FeeMultiplierBase = vFeeMultiplierBaseValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vKycExpiration = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    count = vKycExpiration.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueKycExpiration = vKycExpiration.ToValue();
                    if (valueKycExpiration is ulong vKycExpirationValue) { ret.KycExpiration = vKycExpirationValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vInvestorForExpiration = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    count = vInvestorForExpiration.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueInvestorForExpiration = vInvestorForExpiration.ToValue();
                    if (valueInvestorForExpiration is ulong vInvestorForExpirationValue) { ret.InvestorForExpiration = vInvestorForExpirationValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vVerificationStatus = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    count = vVerificationStatus.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueVerificationStatus = vVerificationStatus.ToValue();
                    if (valueVerificationStatus is ulong vVerificationStatusValue) { ret.VerificationStatus = vVerificationStatusValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vIsCompany = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("bool");
                    count = vIsCompany.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueIsCompany = vIsCompany.ToValue();
                    if (valueIsCompany is bool vIsCompanyValue) { ret.IsCompany = vIsCompanyValue; }
                    var indexPersonUuid = queue.Dequeue() * 256 + queue.Dequeue();
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vPersonUuid = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("string");
                    vPersonUuid.Decode(bytes.Skip(indexPersonUuid + prefixOffset).ToArray());
                    var valuePersonUuid = vPersonUuid.ToValue();
                    if (valuePersonUuid is string vPersonUuidValue) { ret.PersonUuid = vPersonUuidValue; }
                    var indexLegalEntityUuid = queue.Dequeue() * 256 + queue.Dequeue();
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vLegalEntityUuid = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("string");
                    vLegalEntityUuid.Decode(bytes.Skip(indexLegalEntityUuid + prefixOffset).ToArray());
                    var valueLegalEntityUuid = vLegalEntityUuid.ToValue();
                    if (valueLegalEntityUuid is string vLegalEntityUuidValue) { ret.LegalEntityUuid = vLegalEntityUuidValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vBiatecEngagementPoints = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    count = vBiatecEngagementPoints.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueBiatecEngagementPoints = vBiatecEngagementPoints.ToValue();
                    if (valueBiatecEngagementPoints is ulong vBiatecEngagementPointsValue) { ret.BiatecEngagementPoints = vBiatecEngagementPointsValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vBiatecEngagementRank = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    count = vBiatecEngagementRank.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueBiatecEngagementRank = vBiatecEngagementRank.ToValue();
                    if (valueBiatecEngagementRank is ulong vBiatecEngagementRankValue) { ret.BiatecEngagementRank = vBiatecEngagementRankValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vAvmEngagementPoints = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    count = vAvmEngagementPoints.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueAvmEngagementPoints = vAvmEngagementPoints.ToValue();
                    if (valueAvmEngagementPoints is ulong vAvmEngagementPointsValue) { ret.AvmEngagementPoints = vAvmEngagementPointsValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vAvmEngagementRank = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    count = vAvmEngagementRank.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueAvmEngagementRank = vAvmEngagementRank.ToValue();
                    if (valueAvmEngagementRank is ulong vAvmEngagementRankValue) { ret.AvmEngagementRank = vAvmEngagementRankValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vTradingEngagementPoints = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    count = vTradingEngagementPoints.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueTradingEngagementPoints = vTradingEngagementPoints.ToValue();
                    if (valueTradingEngagementPoints is ulong vTradingEngagementPointsValue) { ret.TradingEngagementPoints = vTradingEngagementPointsValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vTradingEngagementRank = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    count = vTradingEngagementRank.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueTradingEngagementRank = vTradingEngagementRank.ToValue();
                    if (valueTradingEngagementRank is ulong vTradingEngagementRankValue) { ret.TradingEngagementRank = vTradingEngagementRankValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vIsProfessionalInvestor = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("bool");
                    count = vIsProfessionalInvestor.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueIsProfessionalInvestor = vIsProfessionalInvestor.ToValue();
                    if (valueIsProfessionalInvestor is bool vIsProfessionalInvestorValue) { ret.IsProfessionalInvestor = vIsProfessionalInvestorValue; }
                    return ret;

                }

                public override string ToString()
                {
                    return $"{this.GetType().ToString()} {BitConverter.ToString(ToByteArray()).Replace("-", "")}";
                }
                public override bool Equals(object? obj)
                {
                    return Equals(obj as IdentityInfo);
                }
                public bool Equals(IdentityInfo? other)
                {
                    return other is not null && ToByteArray().SequenceEqual(other.ToByteArray());
                }
                public override int GetHashCode()
                {
                    return ToByteArray().GetHashCode();
                }
                public static bool operator ==(IdentityInfo left, IdentityInfo right)
                {
                    return EqualityComparer<IdentityInfo>.Default.Equals(left, right);
                }
                public static bool operator !=(IdentityInfo left, IdentityInfo right)
                {
                    return !(left == right);
                }

            }

            public class UserInfoV1 : AVMObjectType
            {
                public byte Version { get; set; }

                public ulong VerificationStatus { get; set; }

                public ulong VerificationClass { get; set; }

                public bool IsCompany { get; set; }

                public string PersonUuid { get; set; }

                public string LegalEntityUuid { get; set; }

                public ulong BiatecEngagementPoints { get; set; }

                public ulong BiatecEngagementRank { get; set; }

                public ulong AvmEngagementPoints { get; set; }

                public ulong AvmEngagementRank { get; set; }

                public ulong TradingEngagementPoints { get; set; }

                public ulong TradingEngagementRank { get; set; }

                public ulong FeeMultiplier { get; set; }

                public ulong Base { get; set; }

                public bool IsLocked { get; set; }

                public ulong KycExpiration { get; set; }

                public ulong InvestorForExpiration { get; set; }

                public bool IsProfessionalInvestor { get; set; }

                public byte[] ToByteArray()
                {
                    var ret = new List<byte>();
                    var stringRef = new Dictionary<int, byte[]>();
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vVersion = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint8");
                    vVersion.From(Version);
                    ret.AddRange(vVersion.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vVerificationStatus = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    vVerificationStatus.From(VerificationStatus);
                    ret.AddRange(vVerificationStatus.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vVerificationClass = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    vVerificationClass.From(VerificationClass);
                    ret.AddRange(vVerificationClass.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vIsCompany = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("bool");
                    vIsCompany.From(IsCompany);
                    ret.AddRange(vIsCompany.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vPersonUuid = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("string");
                    vPersonUuid.From(PersonUuid);
                    stringRef[ret.Count] = vPersonUuid.Encode();
                    ret.AddRange(new byte[2]);
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vLegalEntityUuid = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("string");
                    vLegalEntityUuid.From(LegalEntityUuid);
                    stringRef[ret.Count] = vLegalEntityUuid.Encode();
                    ret.AddRange(new byte[2]);
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vBiatecEngagementPoints = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    vBiatecEngagementPoints.From(BiatecEngagementPoints);
                    ret.AddRange(vBiatecEngagementPoints.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vBiatecEngagementRank = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    vBiatecEngagementRank.From(BiatecEngagementRank);
                    ret.AddRange(vBiatecEngagementRank.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vAvmEngagementPoints = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    vAvmEngagementPoints.From(AvmEngagementPoints);
                    ret.AddRange(vAvmEngagementPoints.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vAvmEngagementRank = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    vAvmEngagementRank.From(AvmEngagementRank);
                    ret.AddRange(vAvmEngagementRank.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vTradingEngagementPoints = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    vTradingEngagementPoints.From(TradingEngagementPoints);
                    ret.AddRange(vTradingEngagementPoints.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vTradingEngagementRank = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    vTradingEngagementRank.From(TradingEngagementRank);
                    ret.AddRange(vTradingEngagementRank.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vFeeMultiplier = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    vFeeMultiplier.From(FeeMultiplier);
                    ret.AddRange(vFeeMultiplier.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vBase = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    vBase.From(Base);
                    ret.AddRange(vBase.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vIsLocked = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("bool");
                    vIsLocked.From(IsLocked);
                    ret.AddRange(vIsLocked.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vKycExpiration = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    vKycExpiration.From(KycExpiration);
                    ret.AddRange(vKycExpiration.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vInvestorForExpiration = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    vInvestorForExpiration.From(InvestorForExpiration);
                    ret.AddRange(vInvestorForExpiration.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vIsProfessionalInvestor = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("bool");
                    vIsProfessionalInvestor.From(IsProfessionalInvestor);
                    ret.AddRange(vIsProfessionalInvestor.Encode());
                    foreach (var item in stringRef)
                    {
                        var b1 = ret.Count;
                        ret[item.Key] = Convert.ToByte(b1 / 256);
                        ret[item.Key + 1] = Convert.ToByte(b1 % 256);
                        ret.AddRange(item.Value);
                    }
                    return ret.ToArray();

                }

                public static UserInfoV1 Parse(byte[] bytes)
                {
                    var queue = new Queue<byte>(bytes);
                    var prefixOffset = 0;
                    var retPrefix = new byte[4] { bytes[0], bytes[1], bytes[2], bytes[3] };
                    if (retPrefix.SequenceEqual(Constants.RetPrefix))
                    {
                        prefixOffset = 4;
                        for (int i = 0; i < 4 && queue.Count > 0; i++) { queue.Dequeue(); }
                    }
                    var ret = new UserInfoV1();
                    uint count = 0;
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vVersion = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint8");
                    count = vVersion.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueVersion = vVersion.ToValue();
                    if (valueVersion is byte vVersionValue) { ret.Version = vVersionValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vVerificationStatus = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    count = vVerificationStatus.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueVerificationStatus = vVerificationStatus.ToValue();
                    if (valueVerificationStatus is ulong vVerificationStatusValue) { ret.VerificationStatus = vVerificationStatusValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vVerificationClass = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    count = vVerificationClass.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueVerificationClass = vVerificationClass.ToValue();
                    if (valueVerificationClass is ulong vVerificationClassValue) { ret.VerificationClass = vVerificationClassValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vIsCompany = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("bool");
                    count = vIsCompany.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueIsCompany = vIsCompany.ToValue();
                    if (valueIsCompany is bool vIsCompanyValue) { ret.IsCompany = vIsCompanyValue; }
                    var indexPersonUuid = queue.Dequeue() * 256 + queue.Dequeue();
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vPersonUuid = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("string");
                    vPersonUuid.Decode(bytes.Skip(indexPersonUuid + prefixOffset).ToArray());
                    var valuePersonUuid = vPersonUuid.ToValue();
                    if (valuePersonUuid is string vPersonUuidValue) { ret.PersonUuid = vPersonUuidValue; }
                    var indexLegalEntityUuid = queue.Dequeue() * 256 + queue.Dequeue();
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vLegalEntityUuid = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("string");
                    vLegalEntityUuid.Decode(bytes.Skip(indexLegalEntityUuid + prefixOffset).ToArray());
                    var valueLegalEntityUuid = vLegalEntityUuid.ToValue();
                    if (valueLegalEntityUuid is string vLegalEntityUuidValue) { ret.LegalEntityUuid = vLegalEntityUuidValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vBiatecEngagementPoints = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    count = vBiatecEngagementPoints.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueBiatecEngagementPoints = vBiatecEngagementPoints.ToValue();
                    if (valueBiatecEngagementPoints is ulong vBiatecEngagementPointsValue) { ret.BiatecEngagementPoints = vBiatecEngagementPointsValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vBiatecEngagementRank = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    count = vBiatecEngagementRank.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueBiatecEngagementRank = vBiatecEngagementRank.ToValue();
                    if (valueBiatecEngagementRank is ulong vBiatecEngagementRankValue) { ret.BiatecEngagementRank = vBiatecEngagementRankValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vAvmEngagementPoints = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    count = vAvmEngagementPoints.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueAvmEngagementPoints = vAvmEngagementPoints.ToValue();
                    if (valueAvmEngagementPoints is ulong vAvmEngagementPointsValue) { ret.AvmEngagementPoints = vAvmEngagementPointsValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vAvmEngagementRank = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    count = vAvmEngagementRank.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueAvmEngagementRank = vAvmEngagementRank.ToValue();
                    if (valueAvmEngagementRank is ulong vAvmEngagementRankValue) { ret.AvmEngagementRank = vAvmEngagementRankValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vTradingEngagementPoints = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    count = vTradingEngagementPoints.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueTradingEngagementPoints = vTradingEngagementPoints.ToValue();
                    if (valueTradingEngagementPoints is ulong vTradingEngagementPointsValue) { ret.TradingEngagementPoints = vTradingEngagementPointsValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vTradingEngagementRank = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    count = vTradingEngagementRank.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueTradingEngagementRank = vTradingEngagementRank.ToValue();
                    if (valueTradingEngagementRank is ulong vTradingEngagementRankValue) { ret.TradingEngagementRank = vTradingEngagementRankValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vFeeMultiplier = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    count = vFeeMultiplier.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueFeeMultiplier = vFeeMultiplier.ToValue();
                    if (valueFeeMultiplier is ulong vFeeMultiplierValue) { ret.FeeMultiplier = vFeeMultiplierValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vBase = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    count = vBase.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueBase = vBase.ToValue();
                    if (valueBase is ulong vBaseValue) { ret.Base = vBaseValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vIsLocked = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("bool");
                    count = vIsLocked.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueIsLocked = vIsLocked.ToValue();
                    if (valueIsLocked is bool vIsLockedValue) { ret.IsLocked = vIsLockedValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vKycExpiration = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    count = vKycExpiration.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueKycExpiration = vKycExpiration.ToValue();
                    if (valueKycExpiration is ulong vKycExpirationValue) { ret.KycExpiration = vKycExpirationValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vInvestorForExpiration = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    count = vInvestorForExpiration.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueInvestorForExpiration = vInvestorForExpiration.ToValue();
                    if (valueInvestorForExpiration is ulong vInvestorForExpirationValue) { ret.InvestorForExpiration = vInvestorForExpirationValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vIsProfessionalInvestor = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("bool");
                    count = vIsProfessionalInvestor.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueIsProfessionalInvestor = vIsProfessionalInvestor.ToValue();
                    if (valueIsProfessionalInvestor is bool vIsProfessionalInvestorValue) { ret.IsProfessionalInvestor = vIsProfessionalInvestorValue; }
                    return ret;

                }

                public override string ToString()
                {
                    return $"{this.GetType().ToString()} {BitConverter.ToString(ToByteArray()).Replace("-", "")}";
                }
                public override bool Equals(object? obj)
                {
                    return Equals(obj as UserInfoV1);
                }
                public bool Equals(UserInfoV1? other)
                {
                    return other is not null && ToByteArray().SequenceEqual(other.ToByteArray());
                }
                public override int GetHashCode()
                {
                    return ToByteArray().GetHashCode();
                }
                public static bool operator ==(UserInfoV1 left, UserInfoV1 right)
                {
                    return EqualityComparer<UserInfoV1>.Default.Equals(left, right);
                }
                public static bool operator !=(UserInfoV1 left, UserInfoV1 right)
                {
                    return !(left == right);
                }

            }

            public class UserInfoShortV1 : AVMObjectType
            {
                public byte Version { get; set; }

                public ulong VerificationClass { get; set; }

                public ulong FeeMultiplier { get; set; }

                public ulong Base { get; set; }

                public bool IsLocked { get; set; }

                public byte[] ToByteArray()
                {
                    var ret = new List<byte>();
                    var stringRef = new Dictionary<int, byte[]>();
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vVersion = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint8");
                    vVersion.From(Version);
                    ret.AddRange(vVersion.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vVerificationClass = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    vVerificationClass.From(VerificationClass);
                    ret.AddRange(vVerificationClass.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vFeeMultiplier = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    vFeeMultiplier.From(FeeMultiplier);
                    ret.AddRange(vFeeMultiplier.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vBase = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    vBase.From(Base);
                    ret.AddRange(vBase.Encode());
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vIsLocked = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("bool");
                    vIsLocked.From(IsLocked);
                    ret.AddRange(vIsLocked.Encode());
                    foreach (var item in stringRef)
                    {
                        var b1 = ret.Count;
                        ret[item.Key] = Convert.ToByte(b1 / 256);
                        ret[item.Key + 1] = Convert.ToByte(b1 % 256);
                        ret.AddRange(item.Value);
                    }
                    return ret.ToArray();

                }

                public static UserInfoShortV1 Parse(byte[] bytes)
                {
                    var queue = new Queue<byte>(bytes);
                    var prefixOffset = 0;
                    var retPrefix = new byte[4] { bytes[0], bytes[1], bytes[2], bytes[3] };
                    if (retPrefix.SequenceEqual(Constants.RetPrefix))
                    {
                        prefixOffset = 4;
                        for (int i = 0; i < 4 && queue.Count > 0; i++) { queue.Dequeue(); }
                    }
                    var ret = new UserInfoShortV1();
                    uint count = 0;
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vVersion = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint8");
                    count = vVersion.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueVersion = vVersion.ToValue();
                    if (valueVersion is byte vVersionValue) { ret.Version = vVersionValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vVerificationClass = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    count = vVerificationClass.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueVerificationClass = vVerificationClass.ToValue();
                    if (valueVerificationClass is ulong vVerificationClassValue) { ret.VerificationClass = vVerificationClassValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vFeeMultiplier = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    count = vFeeMultiplier.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueFeeMultiplier = vFeeMultiplier.ToValue();
                    if (valueFeeMultiplier is ulong vFeeMultiplierValue) { ret.FeeMultiplier = vFeeMultiplierValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vBase = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                    count = vBase.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueBase = vBase.ToValue();
                    if (valueBase is ulong vBaseValue) { ret.Base = vBaseValue; }
                    AVM.ClientGenerator.ABI.ARC4.Types.WireType vIsLocked = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("bool");
                    count = vIsLocked.Decode(queue.ToArray());
                    for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                    var valueIsLocked = vIsLocked.ToValue();
                    if (valueIsLocked is bool vIsLockedValue) { ret.IsLocked = vIsLockedValue; }
                    return ret;

                }

                public override string ToString()
                {
                    return $"{this.GetType().ToString()} {BitConverter.ToString(ToByteArray()).Replace("-", "")}";
                }
                public override bool Equals(object? obj)
                {
                    return Equals(obj as UserInfoShortV1);
                }
                public bool Equals(UserInfoShortV1? other)
                {
                    return other is not null && ToByteArray().SequenceEqual(other.ToByteArray());
                }
                public override int GetHashCode()
                {
                    return ToByteArray().GetHashCode();
                }
                public static bool operator ==(UserInfoShortV1 left, UserInfoShortV1 right)
                {
                    return EqualityComparer<UserInfoShortV1>.Default.Equals(left, right);
                }
                public static bool operator !=(UserInfoShortV1 left, UserInfoShortV1 right)
                {
                    return !(left == right);
                }

            }

        }

        ///<summary>
        ///Initial setup
        ///</summary>
        public async Task CreateApplication(Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef>? _tx_boxes = null, List<Transaction>? _tx_transactions = null, List<ulong>? _tx_assets = null, List<ulong>? _tx_apps = null, List<Address>? _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            _tx_boxes ??= new List<BoxRef>();
            _tx_transactions ??= new List<Transaction>();
            _tx_assets ??= new List<ulong>();
            _tx_apps ??= new List<ulong>();
            _tx_accounts ??= new List<Address>();
            byte[] abiHandle = { 184, 68, 123, 54 };

            var result = await base.CallApp(new List<object> { abiHandle }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        public async Task<List<Transaction>> CreateApplication_Transactions(Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef>? _tx_boxes = null, List<Transaction>? _tx_transactions = null, List<ulong>? _tx_assets = null, List<ulong>? _tx_apps = null, List<Address>? _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            byte[] abiHandle = { 184, 68, 123, 54 };

            return await base.MakeTransactionList(new List<object> { abiHandle }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        ///<summary>
        ///Biatec deploys single identity provider smart contract
        ///</summary>
        /// <param name="appBiatecConfigProvider">Biatec amm provider </param>
        /// <param name="governor"> </param>
        /// <param name="verificationSetter"> </param>
        /// <param name="engagementSetter"> </param>
        public async Task Bootstrap(Address governor, Address verificationSetter, Address engagementSetter, ulong appBiatecConfigProvider, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef>? _tx_boxes = null, List<Transaction>? _tx_transactions = null, List<ulong>? _tx_assets = null, List<ulong>? _tx_apps = null, List<Address>? _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            _tx_boxes ??= new List<BoxRef>();
            _tx_transactions ??= new List<Transaction>();
            _tx_assets ??= new List<ulong>();
            _tx_apps ??= new List<ulong>();
            _tx_accounts ??= new List<Address>();
            _tx_accounts.AddRange(new List<Address> { governor, verificationSetter, engagementSetter });
            byte[] abiHandle = { 227, 191, 92, 31 };
            var appBiatecConfigProviderAbi = new AVM.ClientGenerator.ABI.ARC4.Types.UInt64(); appBiatecConfigProviderAbi.From(appBiatecConfigProvider);
            var governorAbi = new AVM.ClientGenerator.ABI.ARC4.Types.Address(); governorAbi.From(governor);
            var verificationSetterAbi = new AVM.ClientGenerator.ABI.ARC4.Types.Address(); verificationSetterAbi.From(verificationSetter);
            var engagementSetterAbi = new AVM.ClientGenerator.ABI.ARC4.Types.Address(); engagementSetterAbi.From(engagementSetter);

            var result = await base.CallApp(new List<object> { abiHandle, appBiatecConfigProviderAbi, governorAbi, verificationSetterAbi, engagementSetterAbi }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        public async Task<List<Transaction>> Bootstrap_Transactions(Address governor, Address verificationSetter, Address engagementSetter, ulong appBiatecConfigProvider, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef>? _tx_boxes = null, List<Transaction>? _tx_transactions = null, List<ulong>? _tx_assets = null, List<ulong>? _tx_apps = null, List<Address>? _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            byte[] abiHandle = { 227, 191, 92, 31 };
            var appBiatecConfigProviderAbi = new AVM.ClientGenerator.ABI.ARC4.Types.UInt64(); appBiatecConfigProviderAbi.From(appBiatecConfigProvider);
            var governorAbi = new AVM.ClientGenerator.ABI.ARC4.Types.Address(); governorAbi.From(governor);
            var verificationSetterAbi = new AVM.ClientGenerator.ABI.ARC4.Types.Address(); verificationSetterAbi.From(verificationSetter);
            var engagementSetterAbi = new AVM.ClientGenerator.ABI.ARC4.Types.Address(); engagementSetterAbi.From(engagementSetter);

            return await base.MakeTransactionList(new List<object> { abiHandle, appBiatecConfigProviderAbi, governorAbi, verificationSetterAbi, engagementSetterAbi }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        ///<summary>
        ///addressUdpater from global biatec configuration is allowed to update application
        ///</summary>
        /// <param name="appBiatecConfigProvider"> </param>
        /// <param name="newVersion"> </param>
        public async Task UpdateApplication(ulong appBiatecConfigProvider, byte[] newVersion, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef>? _tx_boxes = null, List<Transaction>? _tx_transactions = null, List<ulong>? _tx_assets = null, List<ulong>? _tx_apps = null, List<Address>? _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            _tx_boxes ??= new List<BoxRef>();
            _tx_transactions ??= new List<Transaction>();
            _tx_assets ??= new List<ulong>();
            _tx_apps ??= new List<ulong>();
            _tx_accounts ??= new List<Address>();
            byte[] abiHandle = { 95, 200, 133, 160 };
            var appBiatecConfigProviderAbi = new AVM.ClientGenerator.ABI.ARC4.Types.UInt64(); appBiatecConfigProviderAbi.From(appBiatecConfigProvider);
            var newVersionAbi = new AVM.ClientGenerator.ABI.ARC4.Types.VariableArray<AVM.ClientGenerator.ABI.ARC4.Types.Byte>(); newVersionAbi.From(newVersion);

            var result = await base.CallApp(new List<object> { abiHandle, appBiatecConfigProviderAbi, newVersionAbi }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        public async Task<List<Transaction>> UpdateApplication_Transactions(ulong appBiatecConfigProvider, byte[] newVersion, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef>? _tx_boxes = null, List<Transaction>? _tx_transactions = null, List<ulong>? _tx_assets = null, List<ulong>? _tx_apps = null, List<Address>? _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            byte[] abiHandle = { 95, 200, 133, 160 };
            var appBiatecConfigProviderAbi = new AVM.ClientGenerator.ABI.ARC4.Types.UInt64(); appBiatecConfigProviderAbi.From(appBiatecConfigProvider);
            var newVersionAbi = new AVM.ClientGenerator.ABI.ARC4.Types.VariableArray<AVM.ClientGenerator.ABI.ARC4.Types.Byte>(); newVersionAbi.From(newVersion);

            return await base.MakeTransactionList(new List<object> { abiHandle, appBiatecConfigProviderAbi, newVersionAbi }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        ///<summary>
        ///
        ///</summary>
        /// <param name="user"> </param>
        /// <param name="info"> IdentityInfo</param>
        public async Task SelfRegistration(Address user, Structs.IdentityInfo info, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef>? _tx_boxes = null, List<Transaction>? _tx_transactions = null, List<ulong>? _tx_assets = null, List<ulong>? _tx_apps = null, List<Address>? _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            _tx_boxes ??= new List<BoxRef>();
            _tx_transactions ??= new List<Transaction>();
            _tx_assets ??= new List<ulong>();
            _tx_apps ??= new List<ulong>();
            _tx_accounts ??= new List<Address>();
            _tx_accounts.AddRange(new List<Address> { user });
            byte[] abiHandle = { 174, 100, 193, 103 };
            var userAbi = new AVM.ClientGenerator.ABI.ARC4.Types.Address(); userAbi.From(user);

            var result = await base.CallApp(new List<object> { abiHandle, userAbi, info }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        public async Task<List<Transaction>> SelfRegistration_Transactions(Address user, Structs.IdentityInfo info, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef>? _tx_boxes = null, List<Transaction>? _tx_transactions = null, List<ulong>? _tx_assets = null, List<ulong>? _tx_apps = null, List<Address>? _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            byte[] abiHandle = { 174, 100, 193, 103 };
            var userAbi = new AVM.ClientGenerator.ABI.ARC4.Types.Address(); userAbi.From(user);

            return await base.MakeTransactionList(new List<object> { abiHandle, userAbi, info }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        ///<summary>
        ///
        ///</summary>
        /// <param name="user"> </param>
        /// <param name="info"> IdentityInfo</param>
        public async Task SetInfo(Address user, Structs.IdentityInfo info, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef>? _tx_boxes = null, List<Transaction>? _tx_transactions = null, List<ulong>? _tx_assets = null, List<ulong>? _tx_apps = null, List<Address>? _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            _tx_boxes ??= new List<BoxRef>();
            _tx_transactions ??= new List<Transaction>();
            _tx_assets ??= new List<ulong>();
            _tx_apps ??= new List<ulong>();
            _tx_accounts ??= new List<Address>();
            _tx_accounts.AddRange(new List<Address> { user });
            byte[] abiHandle = { 164, 140, 251, 188 };
            var userAbi = new AVM.ClientGenerator.ABI.ARC4.Types.Address(); userAbi.From(user);

            var result = await base.CallApp(new List<object> { abiHandle, userAbi, info }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        public async Task<List<Transaction>> SetInfo_Transactions(Address user, Structs.IdentityInfo info, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef>? _tx_boxes = null, List<Transaction>? _tx_transactions = null, List<ulong>? _tx_assets = null, List<ulong>? _tx_apps = null, List<Address>? _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            byte[] abiHandle = { 164, 140, 251, 188 };
            var userAbi = new AVM.ClientGenerator.ABI.ARC4.Types.Address(); userAbi.From(user);

            return await base.MakeTransactionList(new List<object> { abiHandle, userAbi, info }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        ///<summary>
        ///addressExecutiveFee can perfom key registration for this LP pool
        ///
        ///
        ///Only addressExecutiveFee is allowed to execute this method.
        ///</summary>
        /// <param name="appBiatecConfigProvider"> </param>
        /// <param name="votePK"> </param>
        /// <param name="selectionPK"> </param>
        /// <param name="stateProofPK"> </param>
        /// <param name="voteFirst"> </param>
        /// <param name="voteLast"> </param>
        /// <param name="voteKeyDilution"> </param>
        public async Task SendOnlineKeyRegistration(ulong appBiatecConfigProvider, byte[] votePK, byte[] selectionPK, byte[] stateProofPK, ulong voteFirst, ulong voteLast, ulong voteKeyDilution, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef>? _tx_boxes = null, List<Transaction>? _tx_transactions = null, List<ulong>? _tx_assets = null, List<ulong>? _tx_apps = null, List<Address>? _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            _tx_boxes ??= new List<BoxRef>();
            _tx_transactions ??= new List<Transaction>();
            _tx_assets ??= new List<ulong>();
            _tx_apps ??= new List<ulong>();
            _tx_accounts ??= new List<Address>();
            byte[] abiHandle = { 131, 146, 92, 23 };
            var appBiatecConfigProviderAbi = new AVM.ClientGenerator.ABI.ARC4.Types.UInt64(); appBiatecConfigProviderAbi.From(appBiatecConfigProvider);
            var votePKAbi = new AVM.ClientGenerator.ABI.ARC4.Types.VariableArray<AVM.ClientGenerator.ABI.ARC4.Types.Byte>(); votePKAbi.From(votePK);
            var selectionPKAbi = new AVM.ClientGenerator.ABI.ARC4.Types.VariableArray<AVM.ClientGenerator.ABI.ARC4.Types.Byte>(); selectionPKAbi.From(selectionPK);
            var stateProofPKAbi = new AVM.ClientGenerator.ABI.ARC4.Types.VariableArray<AVM.ClientGenerator.ABI.ARC4.Types.Byte>(); stateProofPKAbi.From(stateProofPK);
            var voteFirstAbi = new AVM.ClientGenerator.ABI.ARC4.Types.UInt64(); voteFirstAbi.From(voteFirst);
            var voteLastAbi = new AVM.ClientGenerator.ABI.ARC4.Types.UInt64(); voteLastAbi.From(voteLast);
            var voteKeyDilutionAbi = new AVM.ClientGenerator.ABI.ARC4.Types.UInt64(); voteKeyDilutionAbi.From(voteKeyDilution);

            var result = await base.CallApp(new List<object> { abiHandle, appBiatecConfigProviderAbi, votePKAbi, selectionPKAbi, stateProofPKAbi, voteFirstAbi, voteLastAbi, voteKeyDilutionAbi }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        public async Task<List<Transaction>> SendOnlineKeyRegistration_Transactions(ulong appBiatecConfigProvider, byte[] votePK, byte[] selectionPK, byte[] stateProofPK, ulong voteFirst, ulong voteLast, ulong voteKeyDilution, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef>? _tx_boxes = null, List<Transaction>? _tx_transactions = null, List<ulong>? _tx_assets = null, List<ulong>? _tx_apps = null, List<Address>? _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            byte[] abiHandle = { 131, 146, 92, 23 };
            var appBiatecConfigProviderAbi = new AVM.ClientGenerator.ABI.ARC4.Types.UInt64(); appBiatecConfigProviderAbi.From(appBiatecConfigProvider);
            var votePKAbi = new AVM.ClientGenerator.ABI.ARC4.Types.VariableArray<AVM.ClientGenerator.ABI.ARC4.Types.Byte>(); votePKAbi.From(votePK);
            var selectionPKAbi = new AVM.ClientGenerator.ABI.ARC4.Types.VariableArray<AVM.ClientGenerator.ABI.ARC4.Types.Byte>(); selectionPKAbi.From(selectionPK);
            var stateProofPKAbi = new AVM.ClientGenerator.ABI.ARC4.Types.VariableArray<AVM.ClientGenerator.ABI.ARC4.Types.Byte>(); stateProofPKAbi.From(stateProofPK);
            var voteFirstAbi = new AVM.ClientGenerator.ABI.ARC4.Types.UInt64(); voteFirstAbi.From(voteFirst);
            var voteLastAbi = new AVM.ClientGenerator.ABI.ARC4.Types.UInt64(); voteLastAbi.From(voteLast);
            var voteKeyDilutionAbi = new AVM.ClientGenerator.ABI.ARC4.Types.UInt64(); voteKeyDilutionAbi.From(voteKeyDilution);

            return await base.MakeTransactionList(new List<object> { abiHandle, appBiatecConfigProviderAbi, votePKAbi, selectionPKAbi, stateProofPKAbi, voteFirstAbi, voteLastAbi, voteKeyDilutionAbi }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        ///<summary>
        ///Returns user information - fee multiplier, verification class, engagement class ..
        ///</summary>
        /// <param name="user">Get info for specific user address </param>
        /// <param name="v">Version of the data structure to return </param>
        public async Task<Structs.UserInfoV1> GetUser(Address user, byte v, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef>? _tx_boxes = null, List<Transaction>? _tx_transactions = null, List<ulong>? _tx_assets = null, List<ulong>? _tx_apps = null, List<Address>? _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            _tx_boxes ??= new List<BoxRef>();
            _tx_transactions ??= new List<Transaction>();
            _tx_assets ??= new List<ulong>();
            _tx_apps ??= new List<ulong>();
            _tx_accounts ??= new List<Address>();
            _tx_accounts.AddRange(new List<Address> { user });
            byte[] abiHandle = { 232, 173, 24, 146 };
            var userAbi = new AVM.ClientGenerator.ABI.ARC4.Types.Address(); userAbi.From(user);
            var vAbi = new AVM.ClientGenerator.ABI.ARC4.Types.Byte(); vAbi.From(v);

            var result = await base.SimApp(new List<object> { abiHandle, userAbi, vAbi }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);
            return Structs.UserInfoV1.Parse(result.Last());

        }

        public async Task<List<Transaction>> GetUser_Transactions(Address user, byte v, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef>? _tx_boxes = null, List<Transaction>? _tx_transactions = null, List<ulong>? _tx_assets = null, List<ulong>? _tx_apps = null, List<Address>? _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            byte[] abiHandle = { 232, 173, 24, 146 };
            var userAbi = new AVM.ClientGenerator.ABI.ARC4.Types.Address(); userAbi.From(user);
            var vAbi = new AVM.ClientGenerator.ABI.ARC4.Types.Byte(); vAbi.From(v);

            return await base.MakeTransactionList(new List<object> { abiHandle, userAbi, vAbi }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        ///<summary>
        ///Returns short user information - fee multiplier, verification class, engagement class ..
        ///</summary>
        /// <param name="user">Get info for specific user address </param>
        /// <param name="v">Version of the data structure to return </param>
        public async Task<Structs.UserInfoShortV1> GetUserShort(Address user, byte v, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef>? _tx_boxes = null, List<Transaction>? _tx_transactions = null, List<ulong>? _tx_assets = null, List<ulong>? _tx_apps = null, List<Address>? _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            _tx_boxes ??= new List<BoxRef>();
            _tx_transactions ??= new List<Transaction>();
            _tx_assets ??= new List<ulong>();
            _tx_apps ??= new List<ulong>();
            _tx_accounts ??= new List<Address>();
            _tx_accounts.AddRange(new List<Address> { user });
            byte[] abiHandle = { 18, 127, 251, 123 };
            var userAbi = new AVM.ClientGenerator.ABI.ARC4.Types.Address(); userAbi.From(user);
            var vAbi = new AVM.ClientGenerator.ABI.ARC4.Types.Byte(); vAbi.From(v);

            var result = await base.SimApp(new List<object> { abiHandle, userAbi, vAbi }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);
            return Structs.UserInfoShortV1.Parse(result.Last());

        }

        public async Task<List<Transaction>> GetUserShort_Transactions(Address user, byte v, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef>? _tx_boxes = null, List<Transaction>? _tx_transactions = null, List<ulong>? _tx_assets = null, List<ulong>? _tx_apps = null, List<Address>? _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            byte[] abiHandle = { 18, 127, 251, 123 };
            var userAbi = new AVM.ClientGenerator.ABI.ARC4.Types.Address(); userAbi.From(user);
            var vAbi = new AVM.ClientGenerator.ABI.ARC4.Types.Byte(); vAbi.From(v);

            return await base.MakeTransactionList(new List<object> { abiHandle, userAbi, vAbi }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        ///<summary>
        ///If someone deposits excess assets to this smart contract biatec can use them.
        ///
        ///
        ///Only addressExecutiveFee is allowed to execute this method.
        ///</summary>
        /// <param name="appBiatecConfigProvider">Biatec config app. Only addressExecutiveFee is allowed to execute this method. </param>
        /// <param name="asset">Asset to withdraw. If native token, then zero </param>
        /// <param name="amount">Amount of the asset to be withdrawn </param>
        public async Task<ulong> WithdrawExcessAssets(ulong appBiatecConfigProvider, ulong asset, ulong amount, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef>? _tx_boxes = null, List<Transaction>? _tx_transactions = null, List<ulong>? _tx_assets = null, List<ulong>? _tx_apps = null, List<Address>? _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            _tx_boxes ??= new List<BoxRef>();
            _tx_transactions ??= new List<Transaction>();
            _tx_assets ??= new List<ulong>();
            _tx_apps ??= new List<ulong>();
            _tx_accounts ??= new List<Address>();
            byte[] abiHandle = { 203, 162, 233, 93 };
            var appBiatecConfigProviderAbi = new AVM.ClientGenerator.ABI.ARC4.Types.UInt64(); appBiatecConfigProviderAbi.From(appBiatecConfigProvider);
            var assetAbi = new AVM.ClientGenerator.ABI.ARC4.Types.UInt64(); assetAbi.From(asset);
            var amountAbi = new AVM.ClientGenerator.ABI.ARC4.Types.UInt64(); amountAbi.From(amount);

            var result = await base.CallApp(new List<object> { abiHandle, appBiatecConfigProviderAbi, assetAbi, amountAbi }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);
            var lastLogBytes = result.Last();
            if (lastLogBytes.Length < 4 || lastLogBytes[0] != 21 || lastLogBytes[1] != 31 || lastLogBytes[2] != 124 || lastLogBytes[3] != 117) throw new Exception("Invalid ABI handle");
            var lastLogReturnData = lastLogBytes.Skip(4).ToArray();
            var returnValueObj = new AVM.ClientGenerator.ABI.ARC4.Types.UInt64();
            returnValueObj.Decode(lastLogReturnData);
            return BitConverter.ToUInt64(ReverseIfLittleEndian(lastLogReturnData), 0);

        }

        public async Task<List<Transaction>> WithdrawExcessAssets_Transactions(ulong appBiatecConfigProvider, ulong asset, ulong amount, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef>? _tx_boxes = null, List<Transaction>? _tx_transactions = null, List<ulong>? _tx_assets = null, List<ulong>? _tx_apps = null, List<Address>? _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            byte[] abiHandle = { 203, 162, 233, 93 };
            var appBiatecConfigProviderAbi = new AVM.ClientGenerator.ABI.ARC4.Types.UInt64(); appBiatecConfigProviderAbi.From(appBiatecConfigProvider);
            var assetAbi = new AVM.ClientGenerator.ABI.ARC4.Types.UInt64(); assetAbi.From(asset);
            var amountAbi = new AVM.ClientGenerator.ABI.ARC4.Types.UInt64(); amountAbi.From(amount);

            return await base.MakeTransactionList(new List<object> { abiHandle, appBiatecConfigProviderAbi, assetAbi, amountAbi }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        protected override ulong? ExtraProgramPages { get; set; } = 0;
        protected string _ARC56DATA = "eyJhcmNzIjpbNCw1Nl0sIm5hbWUiOiJCaWF0ZWNJZGVudGl0eVByb3ZpZGVyIiwiZGVzYyI6IiIsIm5ldHdvcmtzIjp7fSwic3RydWN0cyI6eyJJZGVudGl0eUluZm8iOlt7Im5hbWUiOiJ2ZXJpZmljYXRpb25DbGFzcyIsInR5cGUiOiJ1aW50NjQifSx7Im5hbWUiOiJpc0xvY2tlZCIsInR5cGUiOiJib29sIn0seyJuYW1lIjoiZmVlTXVsdGlwbGllciIsInR5cGUiOiJ1aW50NjQifSx7Im5hbWUiOiJmZWVNdWx0aXBsaWVyQmFzZSIsInR5cGUiOiJ1aW50NjQifSx7Im5hbWUiOiJreWNFeHBpcmF0aW9uIiwidHlwZSI6InVpbnQ2NCJ9LHsibmFtZSI6ImludmVzdG9yRm9yRXhwaXJhdGlvbiIsInR5cGUiOiJ1aW50NjQifSx7Im5hbWUiOiJ2ZXJpZmljYXRpb25TdGF0dXMiLCJ0eXBlIjoidWludDY0In0seyJuYW1lIjoiaXNDb21wYW55IiwidHlwZSI6ImJvb2wifSx7Im5hbWUiOiJwZXJzb25VVUlEIiwidHlwZSI6InN0cmluZyJ9LHsibmFtZSI6ImxlZ2FsRW50aXR5VVVJRCIsInR5cGUiOiJzdHJpbmcifSx7Im5hbWUiOiJiaWF0ZWNFbmdhZ2VtZW50UG9pbnRzIiwidHlwZSI6InVpbnQ2NCJ9LHsibmFtZSI6ImJpYXRlY0VuZ2FnZW1lbnRSYW5rIiwidHlwZSI6InVpbnQ2NCJ9LHsibmFtZSI6ImF2bUVuZ2FnZW1lbnRQb2ludHMiLCJ0eXBlIjoidWludDY0In0seyJuYW1lIjoiYXZtRW5nYWdlbWVudFJhbmsiLCJ0eXBlIjoidWludDY0In0seyJuYW1lIjoidHJhZGluZ0VuZ2FnZW1lbnRQb2ludHMiLCJ0eXBlIjoidWludDY0In0seyJuYW1lIjoidHJhZGluZ0VuZ2FnZW1lbnRSYW5rIiwidHlwZSI6InVpbnQ2NCJ9LHsibmFtZSI6ImlzUHJvZmVzc2lvbmFsSW52ZXN0b3IiLCJ0eXBlIjoiYm9vbCJ9XSwiVXNlckluZm9WMSI6W3sibmFtZSI6InZlcnNpb24iLCJ0eXBlIjoidWludDgifSx7Im5hbWUiOiJ2ZXJpZmljYXRpb25TdGF0dXMiLCJ0eXBlIjoidWludDY0In0seyJuYW1lIjoidmVyaWZpY2F0aW9uQ2xhc3MiLCJ0eXBlIjoidWludDY0In0seyJuYW1lIjoiaXNDb21wYW55IiwidHlwZSI6ImJvb2wifSx7Im5hbWUiOiJwZXJzb25VVUlEIiwidHlwZSI6InN0cmluZyJ9LHsibmFtZSI6ImxlZ2FsRW50aXR5VVVJRCIsInR5cGUiOiJzdHJpbmcifSx7Im5hbWUiOiJiaWF0ZWNFbmdhZ2VtZW50UG9pbnRzIiwidHlwZSI6InVpbnQ2NCJ9LHsibmFtZSI6ImJpYXRlY0VuZ2FnZW1lbnRSYW5rIiwidHlwZSI6InVpbnQ2NCJ9LHsibmFtZSI6ImF2bUVuZ2FnZW1lbnRQb2ludHMiLCJ0eXBlIjoidWludDY0In0seyJuYW1lIjoiYXZtRW5nYWdlbWVudFJhbmsiLCJ0eXBlIjoidWludDY0In0seyJuYW1lIjoidHJhZGluZ0VuZ2FnZW1lbnRQb2ludHMiLCJ0eXBlIjoidWludDY0In0seyJuYW1lIjoidHJhZGluZ0VuZ2FnZW1lbnRSYW5rIiwidHlwZSI6InVpbnQ2NCJ9LHsibmFtZSI6ImZlZU11bHRpcGxpZXIiLCJ0eXBlIjoidWludDY0In0seyJuYW1lIjoiYmFzZSIsInR5cGUiOiJ1aW50NjQifSx7Im5hbWUiOiJpc0xvY2tlZCIsInR5cGUiOiJib29sIn0seyJuYW1lIjoia3ljRXhwaXJhdGlvbiIsInR5cGUiOiJ1aW50NjQifSx7Im5hbWUiOiJpbnZlc3RvckZvckV4cGlyYXRpb24iLCJ0eXBlIjoidWludDY0In0seyJuYW1lIjoiaXNQcm9mZXNzaW9uYWxJbnZlc3RvciIsInR5cGUiOiJib29sIn1dLCJVc2VySW5mb1Nob3J0VjEiOlt7Im5hbWUiOiJ2ZXJzaW9uIiwidHlwZSI6InVpbnQ4In0seyJuYW1lIjoidmVyaWZpY2F0aW9uQ2xhc3MiLCJ0eXBlIjoidWludDY0In0seyJuYW1lIjoiZmVlTXVsdGlwbGllciIsInR5cGUiOiJ1aW50NjQifSx7Im5hbWUiOiJiYXNlIiwidHlwZSI6InVpbnQ2NCJ9LHsibmFtZSI6ImlzTG9ja2VkIiwidHlwZSI6ImJvb2wifV19LCJNZXRob2RzIjpbeyJuYW1lIjoiY3JlYXRlQXBwbGljYXRpb24iLCJkZXNjIjoiSW5pdGlhbCBzZXR1cCIsImFyZ3MiOltdLCJyZXR1cm5zIjp7InR5cGUiOiJ2b2lkIiwic3RydWN0IjpudWxsLCJkZXNjIjpudWxsfSwiYWN0aW9ucyI6eyJjcmVhdGUiOlsiTm9PcCJdLCJjYWxsIjpbXX0sInJlYWRvbmx5IjpudWxsLCJldmVudHMiOm51bGwsInJlY29tbWVuZGF0aW9ucyI6bnVsbH0seyJuYW1lIjoiYm9vdHN0cmFwIiwiZGVzYyI6IkJpYXRlYyBkZXBsb3lzIHNpbmdsZSBpZGVudGl0eSBwcm92aWRlciBzbWFydCBjb250cmFjdCIsImFyZ3MiOlt7InR5cGUiOiJ1aW50NjQiLCJzdHJ1Y3QiOm51bGwsIm5hbWUiOiJhcHBCaWF0ZWNDb25maWdQcm92aWRlciIsImRlc2MiOiJCaWF0ZWMgYW1tIHByb3ZpZGVyIiwiZGVmYXVsdFZhbHVlIjpudWxsfSx7InR5cGUiOiJhZGRyZXNzIiwic3RydWN0IjpudWxsLCJuYW1lIjoiZ292ZXJub3IiLCJkZXNjIjpudWxsLCJkZWZhdWx0VmFsdWUiOm51bGx9LHsidHlwZSI6ImFkZHJlc3MiLCJzdHJ1Y3QiOm51bGwsIm5hbWUiOiJ2ZXJpZmljYXRpb25TZXR0ZXIiLCJkZXNjIjpudWxsLCJkZWZhdWx0VmFsdWUiOm51bGx9LHsidHlwZSI6ImFkZHJlc3MiLCJzdHJ1Y3QiOm51bGwsIm5hbWUiOiJlbmdhZ2VtZW50U2V0dGVyIiwiZGVzYyI6bnVsbCwiZGVmYXVsdFZhbHVlIjpudWxsfV0sInJldHVybnMiOnsidHlwZSI6InZvaWQiLCJzdHJ1Y3QiOm51bGwsImRlc2MiOm51bGx9LCJhY3Rpb25zIjp7ImNyZWF0ZSI6W10sImNhbGwiOlsiTm9PcCJdfSwicmVhZG9ubHkiOm51bGwsImV2ZW50cyI6bnVsbCwicmVjb21tZW5kYXRpb25zIjpudWxsfSx7Im5hbWUiOiJ1cGRhdGVBcHBsaWNhdGlvbiIsImRlc2MiOiJhZGRyZXNzVWRwYXRlciBmcm9tIGdsb2JhbCBiaWF0ZWMgY29uZmlndXJhdGlvbiBpcyBhbGxvd2VkIHRvIHVwZGF0ZSBhcHBsaWNhdGlvbiIsImFyZ3MiOlt7InR5cGUiOiJ1aW50NjQiLCJzdHJ1Y3QiOm51bGwsIm5hbWUiOiJhcHBCaWF0ZWNDb25maWdQcm92aWRlciIsImRlc2MiOm51bGwsImRlZmF1bHRWYWx1ZSI6bnVsbH0seyJ0eXBlIjoiYnl0ZVtdIiwic3RydWN0IjpudWxsLCJuYW1lIjoibmV3VmVyc2lvbiIsImRlc2MiOm51bGwsImRlZmF1bHRWYWx1ZSI6bnVsbH1dLCJyZXR1cm5zIjp7InR5cGUiOiJ2b2lkIiwic3RydWN0IjpudWxsLCJkZXNjIjpudWxsfSwiYWN0aW9ucyI6eyJjcmVhdGUiOltdLCJjYWxsIjpbIlVwZGF0ZUFwcGxpY2F0aW9uIl19LCJyZWFkb25seSI6bnVsbCwiZXZlbnRzIjpudWxsLCJyZWNvbW1lbmRhdGlvbnMiOm51bGx9LHsibmFtZSI6InNlbGZSZWdpc3RyYXRpb24iLCJkZXNjIjpudWxsLCJhcmdzIjpbeyJ0eXBlIjoiYWRkcmVzcyIsInN0cnVjdCI6bnVsbCwibmFtZSI6InVzZXIiLCJkZXNjIjpudWxsLCJkZWZhdWx0VmFsdWUiOm51bGx9LHsidHlwZSI6Iih1aW50NjQsYm9vbCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LGJvb2wsc3RyaW5nLHN0cmluZyx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCxib29sKSIsInN0cnVjdCI6IklkZW50aXR5SW5mbyIsIm5hbWUiOiJpbmZvIiwiZGVzYyI6bnVsbCwiZGVmYXVsdFZhbHVlIjpudWxsfV0sInJldHVybnMiOnsidHlwZSI6InZvaWQiLCJzdHJ1Y3QiOm51bGwsImRlc2MiOm51bGx9LCJhY3Rpb25zIjp7ImNyZWF0ZSI6W10sImNhbGwiOlsiTm9PcCJdfSwicmVhZG9ubHkiOm51bGwsImV2ZW50cyI6bnVsbCwicmVjb21tZW5kYXRpb25zIjpudWxsfSx7Im5hbWUiOiJzZXRJbmZvIiwiZGVzYyI6bnVsbCwiYXJncyI6W3sidHlwZSI6ImFkZHJlc3MiLCJzdHJ1Y3QiOm51bGwsIm5hbWUiOiJ1c2VyIiwiZGVzYyI6bnVsbCwiZGVmYXVsdFZhbHVlIjpudWxsfSx7InR5cGUiOiIodWludDY0LGJvb2wsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCxib29sLHN0cmluZyxzdHJpbmcsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsYm9vbCkiLCJzdHJ1Y3QiOiJJZGVudGl0eUluZm8iLCJuYW1lIjoiaW5mbyIsImRlc2MiOm51bGwsImRlZmF1bHRWYWx1ZSI6bnVsbH1dLCJyZXR1cm5zIjp7InR5cGUiOiJ2b2lkIiwic3RydWN0IjpudWxsLCJkZXNjIjpudWxsfSwiYWN0aW9ucyI6eyJjcmVhdGUiOltdLCJjYWxsIjpbIk5vT3AiXX0sInJlYWRvbmx5IjpudWxsLCJldmVudHMiOm51bGwsInJlY29tbWVuZGF0aW9ucyI6bnVsbH0seyJuYW1lIjoic2VuZE9ubGluZUtleVJlZ2lzdHJhdGlvbiIsImRlc2MiOiJhZGRyZXNzRXhlY3V0aXZlRmVlIGNhbiBwZXJmb20ga2V5IHJlZ2lzdHJhdGlvbiBmb3IgdGhpcyBMUCBwb29sXG5cblxuT25seSBhZGRyZXNzRXhlY3V0aXZlRmVlIGlzIGFsbG93ZWQgdG8gZXhlY3V0ZSB0aGlzIG1ldGhvZC4iLCJhcmdzIjpbeyJ0eXBlIjoidWludDY0Iiwic3RydWN0IjpudWxsLCJuYW1lIjoiYXBwQmlhdGVjQ29uZmlnUHJvdmlkZXIiLCJkZXNjIjpudWxsLCJkZWZhdWx0VmFsdWUiOm51bGx9LHsidHlwZSI6ImJ5dGVbXSIsInN0cnVjdCI6bnVsbCwibmFtZSI6InZvdGVQSyIsImRlc2MiOm51bGwsImRlZmF1bHRWYWx1ZSI6bnVsbH0seyJ0eXBlIjoiYnl0ZVtdIiwic3RydWN0IjpudWxsLCJuYW1lIjoic2VsZWN0aW9uUEsiLCJkZXNjIjpudWxsLCJkZWZhdWx0VmFsdWUiOm51bGx9LHsidHlwZSI6ImJ5dGVbXSIsInN0cnVjdCI6bnVsbCwibmFtZSI6InN0YXRlUHJvb2ZQSyIsImRlc2MiOm51bGwsImRlZmF1bHRWYWx1ZSI6bnVsbH0seyJ0eXBlIjoidWludDY0Iiwic3RydWN0IjpudWxsLCJuYW1lIjoidm90ZUZpcnN0IiwiZGVzYyI6bnVsbCwiZGVmYXVsdFZhbHVlIjpudWxsfSx7InR5cGUiOiJ1aW50NjQiLCJzdHJ1Y3QiOm51bGwsIm5hbWUiOiJ2b3RlTGFzdCIsImRlc2MiOm51bGwsImRlZmF1bHRWYWx1ZSI6bnVsbH0seyJ0eXBlIjoidWludDY0Iiwic3RydWN0IjpudWxsLCJuYW1lIjoidm90ZUtleURpbHV0aW9uIiwiZGVzYyI6bnVsbCwiZGVmYXVsdFZhbHVlIjpudWxsfV0sInJldHVybnMiOnsidHlwZSI6InZvaWQiLCJzdHJ1Y3QiOm51bGwsImRlc2MiOm51bGx9LCJhY3Rpb25zIjp7ImNyZWF0ZSI6W10sImNhbGwiOlsiTm9PcCJdfSwicmVhZG9ubHkiOm51bGwsImV2ZW50cyI6bnVsbCwicmVjb21tZW5kYXRpb25zIjpudWxsfSx7Im5hbWUiOiJnZXRVc2VyIiwiZGVzYyI6IlJldHVybnMgdXNlciBpbmZvcm1hdGlvbiAtIGZlZSBtdWx0aXBsaWVyLCB2ZXJpZmljYXRpb24gY2xhc3MsIGVuZ2FnZW1lbnQgY2xhc3MgLi4iLCJhcmdzIjpbeyJ0eXBlIjoiYWRkcmVzcyIsInN0cnVjdCI6bnVsbCwibmFtZSI6InVzZXIiLCJkZXNjIjoiR2V0IGluZm8gZm9yIHNwZWNpZmljIHVzZXIgYWRkcmVzcyIsImRlZmF1bHRWYWx1ZSI6bnVsbH0seyJ0eXBlIjoidWludDgiLCJzdHJ1Y3QiOm51bGwsIm5hbWUiOiJ2IiwiZGVzYyI6IlZlcnNpb24gb2YgdGhlIGRhdGEgc3RydWN0dXJlIHRvIHJldHVybiIsImRlZmF1bHRWYWx1ZSI6bnVsbH1dLCJyZXR1cm5zIjp7InR5cGUiOiIodWludDgsdWludDY0LHVpbnQ2NCxib29sLHN0cmluZyxzdHJpbmcsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCxib29sLHVpbnQ2NCx1aW50NjQsYm9vbCkiLCJzdHJ1Y3QiOiJVc2VySW5mb1YxIiwiZGVzYyI6bnVsbH0sImFjdGlvbnMiOnsiY3JlYXRlIjpbXSwiY2FsbCI6WyJOb09wIl19LCJyZWFkb25seSI6dHJ1ZSwiZXZlbnRzIjpudWxsLCJyZWNvbW1lbmRhdGlvbnMiOm51bGx9LHsibmFtZSI6ImdldFVzZXJTaG9ydCIsImRlc2MiOiJSZXR1cm5zIHNob3J0IHVzZXIgaW5mb3JtYXRpb24gLSBmZWUgbXVsdGlwbGllciwgdmVyaWZpY2F0aW9uIGNsYXNzLCBlbmdhZ2VtZW50IGNsYXNzIC4uIiwiYXJncyI6W3sidHlwZSI6ImFkZHJlc3MiLCJzdHJ1Y3QiOm51bGwsIm5hbWUiOiJ1c2VyIiwiZGVzYyI6IkdldCBpbmZvIGZvciBzcGVjaWZpYyB1c2VyIGFkZHJlc3MiLCJkZWZhdWx0VmFsdWUiOm51bGx9LHsidHlwZSI6InVpbnQ4Iiwic3RydWN0IjpudWxsLCJuYW1lIjoidiIsImRlc2MiOiJWZXJzaW9uIG9mIHRoZSBkYXRhIHN0cnVjdHVyZSB0byByZXR1cm4iLCJkZWZhdWx0VmFsdWUiOm51bGx9XSwicmV0dXJucyI6eyJ0eXBlIjoiKHVpbnQ4LHVpbnQ2NCx1aW50NjQsdWludDY0LGJvb2wpIiwic3RydWN0IjoiVXNlckluZm9TaG9ydFYxIiwiZGVzYyI6bnVsbH0sImFjdGlvbnMiOnsiY3JlYXRlIjpbXSwiY2FsbCI6WyJOb09wIl19LCJyZWFkb25seSI6dHJ1ZSwiZXZlbnRzIjpudWxsLCJyZWNvbW1lbmRhdGlvbnMiOm51bGx9LHsibmFtZSI6IndpdGhkcmF3RXhjZXNzQXNzZXRzIiwiZGVzYyI6IklmIHNvbWVvbmUgZGVwb3NpdHMgZXhjZXNzIGFzc2V0cyB0byB0aGlzIHNtYXJ0IGNvbnRyYWN0IGJpYXRlYyBjYW4gdXNlIHRoZW0uXG5cblxuT25seSBhZGRyZXNzRXhlY3V0aXZlRmVlIGlzIGFsbG93ZWQgdG8gZXhlY3V0ZSB0aGlzIG1ldGhvZC4iLCJhcmdzIjpbeyJ0eXBlIjoidWludDY0Iiwic3RydWN0IjpudWxsLCJuYW1lIjoiYXBwQmlhdGVjQ29uZmlnUHJvdmlkZXIiLCJkZXNjIjoiQmlhdGVjIGNvbmZpZyBhcHAuIE9ubHkgYWRkcmVzc0V4ZWN1dGl2ZUZlZSBpcyBhbGxvd2VkIHRvIGV4ZWN1dGUgdGhpcyBtZXRob2QuIiwiZGVmYXVsdFZhbHVlIjpudWxsfSx7InR5cGUiOiJ1aW50NjQiLCJzdHJ1Y3QiOm51bGwsIm5hbWUiOiJhc3NldCIsImRlc2MiOiJBc3NldCB0byB3aXRoZHJhdy4gSWYgbmF0aXZlIHRva2VuLCB0aGVuIHplcm8iLCJkZWZhdWx0VmFsdWUiOm51bGx9LHsidHlwZSI6InVpbnQ2NCIsInN0cnVjdCI6bnVsbCwibmFtZSI6ImFtb3VudCIsImRlc2MiOiJBbW91bnQgb2YgdGhlIGFzc2V0IHRvIGJlIHdpdGhkcmF3biIsImRlZmF1bHRWYWx1ZSI6bnVsbH1dLCJyZXR1cm5zIjp7InR5cGUiOiJ1aW50NjQiLCJzdHJ1Y3QiOm51bGwsImRlc2MiOm51bGx9LCJhY3Rpb25zIjp7ImNyZWF0ZSI6W10sImNhbGwiOlsiTm9PcCJdfSwicmVhZG9ubHkiOm51bGwsImV2ZW50cyI6bnVsbCwicmVjb21tZW5kYXRpb25zIjpudWxsfV0sInN0YXRlIjp7InNjaGVtYSI6eyJnbG9iYWwiOnsiaW50cyI6MSwiYnl0ZXMiOjR9LCJsb2NhbCI6eyJpbnRzIjowLCJieXRlcyI6MH19LCJrZXlzIjp7Imdsb2JhbCI6eyJkZXNjIjpudWxsLCJrZXlUeXBlIjoiIiwidmFsdWVUeXBlIjoiIiwia2V5IjoiIn0sImxvY2FsIjp7ImRlc2MiOm51bGwsImtleVR5cGUiOiIiLCJ2YWx1ZVR5cGUiOiIiLCJrZXkiOiIifSwiYm94Ijp7ImRlc2MiOm51bGwsImtleVR5cGUiOiIiLCJ2YWx1ZVR5cGUiOiIiLCJrZXkiOiIifX0sIm1hcHMiOnsiZ2xvYmFsIjp7ImRlc2MiOm51bGwsImtleVR5cGUiOiIiLCJ2YWx1ZVR5cGUiOiIiLCJwcmVmaXgiOm51bGx9LCJsb2NhbCI6eyJkZXNjIjpudWxsLCJrZXlUeXBlIjoiIiwidmFsdWVUeXBlIjoiIiwicHJlZml4IjpudWxsfSwiYm94Ijp7ImRlc2MiOm51bGwsImtleVR5cGUiOiIiLCJ2YWx1ZVR5cGUiOiIiLCJwcmVmaXgiOm51bGx9fX0sImJhcmVBY3Rpb25zIjp7ImNyZWF0ZSI6W10sImNhbGwiOltdfSwic291cmNlSW5mbyI6eyJhcHByb3ZhbCI6eyJzb3VyY2VJbmZvIjpbeyJwYyI6WzBdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjE4MSJ9LHsicGMiOlsxLDIsMyw0LDUsNiw3LDgsOSwxMCwxMSwxMiwxMywxNCwxNSwxNl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6Miwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MTgxIn0seyJwYyI6WzE3LDE4LDE5LDIwLDIxLDIyLDIzLDI0LDI1LDI2LDI3LDI4LDI5LDMwLDMxLDMyLDMzLDM0LDM1LDM2LDM3LDM4LDM5LDQwLDQxLDQyLDQzLDQ0LDQ1LDQ2LDQ3LDQ4LDQ5LDUwLDUxLDUyLDUzLDU0LDU1LDU2LDU3LDU4LDU5LDYwLDYxLDYyLDYzLDY0LDY1LDY2LDY3LDY4LDY5LDcwLDcxLDcyLDczLDc0LDc1LDc2LDc3LDc4LDc5LDgwLDgxLDgyLDgzLDg0LDg1LDg2LDg3LDg4LDg5LDkwLDkxLDkyLDkzLDk0LDk1LDk2LDk3LDk4LDk5LDEwMCwxMDEsMTAyLDEwMywxMDQsMTA1LDEwNiwxMDcsMTA4LDEwOSwxMTAsMTExLDExMiwxMTNdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjMsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjE4MSJ9LHsicGMiOlsxMTQsMTE1XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MTgxIn0seyJwYyI6WzExNl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjE4MSJ9LHsicGMiOlsxMTcsMTE4XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MTgxIn0seyJwYyI6WzExOV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTgsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjE4MSJ9LHsicGMiOlsxMjAsMTIxXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxOSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MTgxIn0seyJwYyI6WzEyMl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MjAsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjE4MSJ9LHsicGMiOlsxMjMsMTI0LDEyNSwxMjYsMTI3LDEyOCwxMjksMTMwLDEzMSwxMzIsMTMzLDEzNCwxMzUsMTM2LDEzNywxMzgsMTM5LDE0MCwxNDEsMTQyLDE0MywxNDQsMTQ1LDE0NiwxNDcsMTQ4XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoyMSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MTgxIn0seyJwYyI6WzE0OV0sImVycm9yTWVzc2FnZSI6IlRoZSByZXF1ZXN0ZWQgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGlzIGNvbnRyYWN0LiBBcmUgeW91IHVzaW5nIHRoZSBjb3JyZWN0IE9uQ29tcGxldGU/IERpZCB5b3Ugc2V0IHlvdXIgYXBwIElEPyIsInRlYWwiOjI1LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoxODEifSx7InBjIjpbMTUwLDE1MSwxNTJdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjMwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMDYifSx7InBjIjpbMTUzXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjozMSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjA2In0seyJwYyI6WzE1NF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MzIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjIwNiJ9LHsicGMiOlsxNTUsMTU2LDE1N10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MzgsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjIwNiJ9LHsicGMiOlsxNTgsMTU5XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo0Miwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjA3In0seyJwYyI6WzE2MCwxNjEsMTYyLDE2MywxNjQsMTY1LDE2NiwxNjcsMTY4LDE2OSwxNzAsMTcxLDE3MiwxNzMsMTc0LDE3NSwxNzYsMTc3LDE3OCwxNzksMTgwLDE4MSwxODJdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjQzLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMDcifSx7InBjIjpbMTgzXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo0NCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjA3In0seyJwYyI6WzE4NF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NDUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjIwNiJ9LHsicGMiOlsxODUsMTg2LDE4N10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NTAsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjIxOCJ9LHsicGMiOlsxODhdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjUxLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMTgifSx7InBjIjpbMTg5XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo1Miwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjE4In0seyJwYyI6WzE5MF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NTMsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjIxOCJ9LHsicGMiOlsxOTFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjU0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMTgifSx7InBjIjpbMTkyXSwiZXJyb3JNZXNzYWdlIjoiYXJndW1lbnQgMCAoZW5nYWdlbWVudFNldHRlcikgZm9yIGJvb3RzdHJhcCBtdXN0IGJlIGEgYWRkcmVzcyIsInRlYWwiOjU3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMTgifSx7InBjIjpbMTkzLDE5NCwxOTVdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjYwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMTcifSx7InBjIjpbMTk2XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo2MSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjE3In0seyJwYyI6WzE5N10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NjIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjIxNyJ9LHsicGMiOlsxOThdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjYzLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMTcifSx7InBjIjpbMTk5XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo2NCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjE3In0seyJwYyI6WzIwMF0sImVycm9yTWVzc2FnZSI6ImFyZ3VtZW50IDEgKHZlcmlmaWNhdGlvblNldHRlcikgZm9yIGJvb3RzdHJhcCBtdXN0IGJlIGEgYWRkcmVzcyIsInRlYWwiOjY3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMTcifSx7InBjIjpbMjAxLDIwMiwyMDNdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjcwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMTYifSx7InBjIjpbMjA0XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo3MSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjE2In0seyJwYyI6WzIwNV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NzIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjIxNiJ9LHsicGMiOlsyMDZdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjczLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMTYifSx7InBjIjpbMjA3XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo3NCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjE2In0seyJwYyI6WzIwOF0sImVycm9yTWVzc2FnZSI6ImFyZ3VtZW50IDIgKGdvdmVybm9yKSBmb3IgYm9vdHN0cmFwIG11c3QgYmUgYSBhZGRyZXNzIiwidGVhbCI6NzcsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjIxNiJ9LHsicGMiOlsyMDksMjEwLDIxMV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6ODAsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjIxNSJ9LHsicGMiOlsyMTJdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjgxLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMTUifSx7InBjIjpbMjEzLDIxNCwyMTVdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjg0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMTQifSx7InBjIjpbMjE2XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo4NSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjE0In0seyJwYyI6WzIxN10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6ODYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjIxNCJ9LHsicGMiOlsyMTgsMjE5LDIyMF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTMsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjIxNCJ9LHsicGMiOlsyMjFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjk2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMTQifSx7InBjIjpbMjIyLDIyM10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTAwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMjAifSx7InBjIjpbMjI0LDIyNSwyMjZdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEwMSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjIwIn0seyJwYyI6WzIyNywyMjhdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEwMiwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjIwIn0seyJwYyI6WzIyOV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTAzLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMjAifSx7InBjIjpbMjMwXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMDQsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjIyMCJ9LHsicGMiOlsyMzFdLCJlcnJvck1lc3NhZ2UiOiJPbmx5IGNyZWF0b3Igb2YgdGhlIGFwcCBjYW4gc2V0IGl0IHVwIiwidGVhbCI6MTA3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMjAifSx7InBjIjpbMjMyLDIzM10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTExLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMjEifSx7InBjIjpbMjM0LDIzNV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTEyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMjEifSx7InBjIjpbMjM2XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMTMsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjIyMSJ9LHsicGMiOlsyMzcsMjM4LDIzOV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTE3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMjIifSx7InBjIjpbMjQwLDI0MV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTE4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMjIifSx7InBjIjpbMjQyXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMTksInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjIyMiJ9LHsicGMiOlsyNDMsMjQ0LDI0NV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTIzLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMjMifSx7InBjIjpbMjQ2LDI0N10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTI0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMjMifSx7InBjIjpbMjQ4XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMjUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjIyMyJ9LHsicGMiOlsyNDksMjUwXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMjksInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjIyNCJ9LHsicGMiOlsyNTEsMjUyXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMzAsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjIyNCJ9LHsicGMiOlsyNTNdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEzMSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjI0In0seyJwYyI6WzI1NCwyNTVdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEzNSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjI2In0seyJwYyI6WzI1NiwyNTddLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEzNiwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjI2In0seyJwYyI6WzI1OF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTM3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMjYifSx7InBjIjpbMjU5XSwiZXJyb3JNZXNzYWdlIjoiZ2xvYmFsIHN0YXRlIHZhbHVlIGRvZXMgbm90IGV4aXN0OiBhcHBCaWF0ZWNDb25maWdQcm92aWRlci5nbG9iYWxTdGF0ZSgncycpIiwidGVhbCI6MTQwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMjYifSx7InBjIjpbMjYwLDI2MV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTQxLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMjYifSx7InBjIjpbMjYyLDI2M10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTQ1LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMjcifSx7InBjIjpbMjY0XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNDYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjIyNyJ9LHsicGMiOlsyNjVdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE0Nywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjI3In0seyJwYyI6WzI2Nl0sImVycm9yTWVzc2FnZSI6IkVSUl9QQVVTRUQiLCJ0ZWFsIjoxNTAsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjIyNyJ9LHsicGMiOlsyNjddLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE1MSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjE0In0seyJwYyI6WzI2OCwyNjksMjcwXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNTYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjIzMyJ9LHsicGMiOlsyNzEsMjcyLDI3M10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTU3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMzMifSx7InBjIjpbMjc0LDI3NSwyNzZdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE2MCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjMzIn0seyJwYyI6WzI3N10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTYxLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMzMifSx7InBjIjpbMjc4LDI3OSwyODBdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE2NCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjMzIn0seyJwYyI6WzI4MV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTY1LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMzMifSx7InBjIjpbMjgyXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNjYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjIzMyJ9LHsicGMiOlsyODMsMjg0LDI4NV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTcyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMzMifSx7InBjIjpbMjg2XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNzUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjIzMyJ9LHsicGMiOlsyODddLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE3Niwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjMzIn0seyJwYyI6WzI4OCwyODldLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE4MCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjM0In0seyJwYyI6WzI5MCwyOTFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE4MSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjM0In0seyJwYyI6WzI5Ml0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTgyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMzQifSx7InBjIjpbMjkzXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxODMsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjIzNCJ9LHsicGMiOlsyOTRdLCJlcnJvck1lc3NhZ2UiOiJDb25maWd1cmF0aW9uIGFwcCBkb2VzIG5vdCBtYXRjaCIsInRlYWwiOjE4Niwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjM0In0seyJwYyI6WzI5NSwyOTZdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE5MCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjM1In0seyJwYyI6WzI5NywyOTgsMjk5XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxOTEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjIzNSJ9LHsicGMiOlszMDBdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE5Miwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjM1In0seyJwYyI6WzMwMV0sImVycm9yTWVzc2FnZSI6Imdsb2JhbCBzdGF0ZSB2YWx1ZSBkb2VzIG5vdCBleGlzdDogYXBwQmlhdGVjQ29uZmlnUHJvdmlkZXIuZ2xvYmFsU3RhdGUoJ3UnKSIsInRlYWwiOjE5NSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjM1In0seyJwYyI6WzMwMiwzMDNdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE5Niwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjM1In0seyJwYyI6WzMwNCwzMDVdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjIwMCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjM2In0seyJwYyI6WzMwNiwzMDddLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjIwMSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjM2In0seyJwYyI6WzMwOF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MjAyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMzYifSx7InBjIjpbMzA5XSwiZXJyb3JNZXNzYWdlIjoiT25seSBhZGRyZXNzVWRwYXRlciBzZXR1cCBpbiB0aGUgY29uZmlnIGNhbiB1cGRhdGUgYXBwbGljYXRpb24iLCJ0ZWFsIjoyMDUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjIzNiJ9LHsicGMiOlszMTAsMzExXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoyMDksInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjIzNyJ9LHsicGMiOlszMTIsMzEzXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoyMTAsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjIzNyJ9LHsicGMiOlszMTRdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjIxMSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjM3In0seyJwYyI6WzMxNV0sImVycm9yTWVzc2FnZSI6Imdsb2JhbCBzdGF0ZSB2YWx1ZSBkb2VzIG5vdCBleGlzdDogYXBwQmlhdGVjQ29uZmlnUHJvdmlkZXIuZ2xvYmFsU3RhdGUoJ3MnKSIsInRlYWwiOjIxNCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjM3In0seyJwYyI6WzMxNiwzMTddLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjIxNSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjM3In0seyJwYyI6WzMxOCwzMTldLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjIxOSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjM4In0seyJwYyI6WzMyMF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MjIwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMzgifSx7InBjIjpbMzIxXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoyMjEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjIzOCJ9LHsicGMiOlszMjJdLCJlcnJvck1lc3NhZ2UiOiJFUlJfUEFVU0VEIiwidGVhbCI6MjI0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMzgifSx7InBjIjpbMzIzLDMyNF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MjI4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMzkifSx7InBjIjpbMzI1LDMyNl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MjI5LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMzkifSx7InBjIjpbMzI3XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoyMzAsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjIzOSJ9LHsicGMiOlszMjhdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjIzMSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjMzIn0seyJwYyI6WzMyOSwzMzAsMzMxXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoyMzYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI0MiJ9LHsicGMiOlszMzIsMzMzLDMzNF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MjM5LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNDIifSx7InBjIjpbMzM1XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoyNDAsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI0MiJ9LHsicGMiOlszMzZdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjI0MSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjQyIn0seyJwYyI6WzMzN10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MjQyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNDIifSx7InBjIjpbMzM4XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoyNDMsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI0MiJ9LHsicGMiOlszMzldLCJlcnJvck1lc3NhZ2UiOiJhcmd1bWVudCAxICh1c2VyKSBmb3Igc2VsZlJlZ2lzdHJhdGlvbiBtdXN0IGJlIGEgYWRkcmVzcyIsInRlYWwiOjI0Niwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjQyIn0seyJwYyI6WzM0MCwzNDEsMzQyXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoyNDksInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI0MiJ9LHsicGMiOlszNDNdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjI1MCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjQyIn0seyJwYyI6WzM0NF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MjUxLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNDIifSx7InBjIjpbMzQ1LDM0NiwzNDddLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjI1NSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjQyIn0seyJwYyI6WzM0OF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MjU5LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNDMifSx7InBjIjpbMzQ5LDM1MF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MjYwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNDMifSx7InBjIjpbMzUxXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoyNjEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI0MyJ9LHsicGMiOlszNTJdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjI2Miwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjQzIn0seyJwYyI6WzM1M10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MjYzLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNDMifSx7InBjIjpbMzU0XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoyNjQsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI0MyJ9LHsicGMiOlszNTVdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjI2NSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjQzIn0seyJwYyI6WzM1Nl0sImVycm9yTWVzc2FnZSI6IlNlbGYgcmVnaXN0cmF0aW9uIGNhbm5vdCBiZSBleGVjdXRlZCBpZiBhZGRyZXNzIGlzIGFscmVhZHkgcmVnaXN0ZXJlZCIsInRlYWwiOjI2OCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjQzIn0seyJwYyI6WzM1NywzNThdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjI3Miwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjQ2In0seyJwYyI6WzM1OSwzNjBdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjI3Mywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjQ2In0seyJwYyI6WzM2MSwzNjJdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjI3NCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjQ2In0seyJwYyI6WzM2MywzNjQsMzY1XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoyNzUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI0NiJ9LHsicGMiOlszNjZdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjI3Niwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjQ2In0seyJwYyI6WzM2N10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6Mjc3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNDYifSx7InBjIjpbMzY4XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoyNzgsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI0NiJ9LHsicGMiOlszNjldLCJlcnJvck1lc3NhZ2UiOiJWZXJpZmljYXRpb24gc3RhdHVzIG11c3QgYmUgZW1wdHkiLCJ0ZWFsIjoyODEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI0NiJ9LHsicGMiOlszNzAsMzcxXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoyODUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI0OCJ9LHsicGMiOlszNzIsMzczXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoyODYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI0OCJ9LHsicGMiOlszNzQsMzc1XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoyODcsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI0OCJ9LHsicGMiOlszNzYsMzc3LDM3OF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6Mjg4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNDgifSx7InBjIjpbMzc5XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoyODksInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI0OCJ9LHsicGMiOlszODBdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjI5MCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjQ4In0seyJwYyI6WzM4MV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MjkxLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNDgifSx7InBjIjpbMzgyXSwiZXJyb3JNZXNzYWdlIjoidmVyaWZpY2F0aW9uQ2xhc3MgbXVzdCBlcXVhbCB0byAwIiwidGVhbCI6Mjk0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNDgifSx7InBjIjpbMzgzLDM4NF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MzAxLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNTIifSx7InBjIjpbMzg1LDM4Nl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MzAyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNTIifSx7InBjIjpbMzg3LDM4OF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MzAzLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNTIifSx7InBjIjpbMzg5LDM5MF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MzA0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNTIifSx7InBjIjpbMzkxLDM5Ml0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MzA1LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNTIifSx7InBjIjpbMzkzLDM5NF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MzA2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNTIifSx7InBjIjpbMzk1XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjozMDcsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI1MiJ9LHsicGMiOlszOTZdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjMwOCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjUyIn0seyJwYyI6WzM5NywzOThdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjMwOSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjUyIn0seyJwYyI6WzM5OV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MzEwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNTIifSx7InBjIjpbNDAwXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjozMTEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI1MiJ9LHsicGMiOls0MDFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjMxMiwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjUyIn0seyJwYyI6WzQwMl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MzEzLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNTIifSx7InBjIjpbNDAzXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjozMTQsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI1MiJ9LHsicGMiOls0MDRdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjMxNSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjUyIn0seyJwYyI6WzQwNV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MzE2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNTIifSx7InBjIjpbNDA2LDQwNyw0MDhdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjMxNywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjUyIn0seyJwYyI6WzQwOSw0MTBdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjMxOCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjUyIn0seyJwYyI6WzQxMV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MzE5LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNTIifSx7InBjIjpbNDEyXSwiZXJyb3JNZXNzYWdlIjoicGVyc29uVVVJRCBtdXN0IGVxdWFsIHRvIDAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCIsInRlYWwiOjMyMiwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjUxIn0seyJwYyI6WzQxMyw0MTRdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjMyOSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjU3In0seyJwYyI6WzQxNSw0MTZdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjMzMCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjU3In0seyJwYyI6WzQxNyw0MThdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjMzMSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjU3In0seyJwYyI6WzQxOSw0MjBdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjMzMiwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjU3In0seyJwYyI6WzQyMSw0MjJdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjMzMywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjU3In0seyJwYyI6WzQyMyw0MjRdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjMzNCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjU3In0seyJwYyI6WzQyNV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MzM1LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNTcifSx7InBjIjpbNDI2XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjozMzYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI1NyJ9LHsicGMiOls0MjcsNDI4XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjozMzcsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI1NyJ9LHsicGMiOls0MjldLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjMzOCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjU3In0seyJwYyI6WzQzMF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MzM5LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNTcifSx7InBjIjpbNDMxXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjozNDAsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI1NyJ9LHsicGMiOls0MzJdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjM0MSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjU3In0seyJwYyI6WzQzM10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MzQyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNTcifSx7InBjIjpbNDM0XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjozNDMsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI1NyJ9LHsicGMiOls0MzVdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjM0NCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjU3In0seyJwYyI6WzQzNiw0MzcsNDM4XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjozNDUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI1NyJ9LHsicGMiOls0MzksNDQwXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjozNDYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI1NyJ9LHsicGMiOls0NDFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjM0Nywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjU3In0seyJwYyI6WzQ0Ml0sImVycm9yTWVzc2FnZSI6ImxlZ2FsRW50aXR5VVVJRCBtdXN0IGVxdWFsIHRvIDAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCIsInRlYWwiOjM1MCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjU2In0seyJwYyI6WzQ0Myw0NDRdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjM1NCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjYxIn0seyJwYyI6WzQ0NSw0NDZdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjM1NSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjYxIn0seyJwYyI6WzQ0Nyw0NDhdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjM1Niwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjYxIn0seyJwYyI6WzQ0OSw0NTAsNDUxXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjozNTcsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI2MSJ9LHsicGMiOls0NTJdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjM1OCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjYxIn0seyJwYyI6WzQ1M10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MzU5LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNjEifSx7InBjIjpbNDU0XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjozNjAsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI2MSJ9LHsicGMiOls0NTVdLCJlcnJvck1lc3NhZ2UiOiJiaWF0ZWNFbmdhZ2VtZW50UG9pbnRzIG11c3QgZXF1YWwgdG8gMCIsInRlYWwiOjM2Mywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjYxIn0seyJwYyI6WzQ1Niw0NTddLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjM2Nywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjYzIn0seyJwYyI6WzQ1OCw0NTldLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjM2OCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjYzIn0seyJwYyI6WzQ2MCw0NjFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjM2OSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjYzIn0seyJwYyI6WzQ2Miw0NjMsNDY0XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjozNzAsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI2MyJ9LHsicGMiOls0NjVdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjM3MSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjYzIn0seyJwYyI6WzQ2Nl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MzcyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNjMifSx7InBjIjpbNDY3XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjozNzMsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI2MyJ9LHsicGMiOls0NjhdLCJlcnJvck1lc3NhZ2UiOiJiaWF0ZWNFbmdhZ2VtZW50UmFuayBtdXN0IGVxdWFsIHRvIDAiLCJ0ZWFsIjozNzYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI2MyJ9LHsicGMiOls0NjksNDcwXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjozODAsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI2NSJ9LHsicGMiOls0NzEsNDcyXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjozODEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI2NSJ9LHsicGMiOls0NzMsNDc0XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjozODIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI2NSJ9LHsicGMiOls0NzUsNDc2LDQ3N10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MzgzLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNjUifSx7InBjIjpbNDc4XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjozODQsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI2NSJ9LHsicGMiOls0NzldLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjM4NSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjY1In0seyJwYyI6WzQ4MF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6Mzg2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNjUifSx7InBjIjpbNDgxXSwiZXJyb3JNZXNzYWdlIjoiYXZtRW5nYWdlbWVudFBvaW50cyBtdXN0IGVxdWFsIHRvIDAiLCJ0ZWFsIjozODksInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI2NSJ9LHsicGMiOls0ODIsNDgzXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjozOTMsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI2NyJ9LHsicGMiOls0ODQsNDg1XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjozOTQsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI2NyJ9LHsicGMiOls0ODYsNDg3XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjozOTUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI2NyJ9LHsicGMiOls0ODgsNDg5LDQ5MF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6Mzk2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNjcifSx7InBjIjpbNDkxXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjozOTcsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI2NyJ9LHsicGMiOls0OTJdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjM5OCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjY3In0seyJwYyI6WzQ5M10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6Mzk5LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNjcifSx7InBjIjpbNDk0XSwiZXJyb3JNZXNzYWdlIjoiYXZtRW5nYWdlbWVudFJhbmsgbXVzdCBlcXVhbCB0byAwIiwidGVhbCI6NDAyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNjcifSx7InBjIjpbNDk1LDQ5Nl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NDA2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNjkifSx7InBjIjpbNDk3LDQ5OF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NDA3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNjkifSx7InBjIjpbNDk5LDUwMF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NDA4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNjkifSx7InBjIjpbNTAxLDUwMiw1MDNdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjQwOSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjY5In0seyJwYyI6WzUwNF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NDEwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNjkifSx7InBjIjpbNTA1XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo0MTEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI2OSJ9LHsicGMiOls1MDZdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjQxMiwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjY5In0seyJwYyI6WzUwN10sImVycm9yTWVzc2FnZSI6InRyYWRpbmdFbmdhZ2VtZW50UG9pbnRzIG11c3QgZXF1YWwgdG8gMCIsInRlYWwiOjQxNSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjY5In0seyJwYyI6WzUwOCw1MDldLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjQxOSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjcxIn0seyJwYyI6WzUxMCw1MTFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjQyMCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjcxIn0seyJwYyI6WzUxMiw1MTNdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjQyMSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjcxIn0seyJwYyI6WzUxNCw1MTUsNTE2XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo0MjIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI3MSJ9LHsicGMiOls1MTddLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjQyMywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjcxIn0seyJwYyI6WzUxOF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NDI0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNzEifSx7InBjIjpbNTE5XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo0MjUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI3MSJ9LHsicGMiOls1MjBdLCJlcnJvck1lc3NhZ2UiOiJ0cmFkaW5nRW5nYWdlbWVudFJhbmsgbXVzdCBlcXVhbCB0byAwIiwidGVhbCI6NDI4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNzEifSx7InBjIjpbNTIxLDUyMl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NDMyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNzMifSx7InBjIjpbNTIzLDUyNF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NDMzLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNzMifSx7InBjIjpbNTI1LDUyNl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NDM0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNzMifSx7InBjIjpbNTI3LDUyOF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NDM1LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNzMifSx7InBjIjpbNTI5XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo0MzYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI3MyJ9LHsicGMiOls1MzBdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjQzNywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjczIn0seyJwYyI6WzUzMV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NDM4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNzMifSx7InBjIjpbNTMyXSwiZXJyb3JNZXNzYWdlIjoiaXNMb2NrZWQgbXVzdCBlcXVhbCB0byBmYWxzZSIsInRlYWwiOjQ0MSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjczIn0seyJwYyI6WzUzMyw1MzRdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjQ0NSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mjc1In0seyJwYyI6WzUzNSw1MzZdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjQ0Niwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mjc1In0seyJwYyI6WzUzNyw1MzhdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjQ0Nywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mjc1In0seyJwYyI6WzUzOSw1NDAsNTQxXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo0NDgsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI3NSJ9LHsicGMiOls1NDJdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjQ0OSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mjc1In0seyJwYyI6WzU0M10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NDUwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNzUifSx7InBjIjpbNTQ0XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo0NTEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI3NSJ9LHsicGMiOls1NDVdLCJlcnJvck1lc3NhZ2UiOiJreWNFeHBpcmF0aW9uIG11c3QgZXF1YWwgdG8gMCIsInRlYWwiOjQ1NCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mjc1In0seyJwYyI6WzU0Niw1NDddLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjQ1OCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mjc3In0seyJwYyI6WzU0OCw1NDldLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjQ1OSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mjc3In0seyJwYyI6WzU1MCw1NTFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjQ2MCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mjc3In0seyJwYyI6WzU1Miw1NTMsNTU0XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo0NjEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI3NyJ9LHsicGMiOls1NTVdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjQ2Miwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mjc3In0seyJwYyI6WzU1Nl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NDYzLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNzcifSx7InBjIjpbNTU3XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo0NjQsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI3NyJ9LHsicGMiOls1NThdLCJlcnJvck1lc3NhZ2UiOiJpbnZlc3RvckZvckV4cGlyYXRpb24gbXVzdCBlcXVhbCB0byAwIiwidGVhbCI6NDY3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNzcifSx7InBjIjpbNTU5LDU2MF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NDcxLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNzkifSx7InBjIjpbNTYxLDU2Ml0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NDcyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNzkifSx7InBjIjpbNTYzLDU2NF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NDczLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNzkifSx7InBjIjpbNTY1LDU2Nl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NDc0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNzkifSx7InBjIjpbNTY3XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo0NzUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI3OSJ9LHsicGMiOls1NjhdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjQ3Niwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mjc5In0seyJwYyI6WzU2OV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NDc3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNzkifSx7InBjIjpbNTcwXSwiZXJyb3JNZXNzYWdlIjoiaXNQcm9mZXNzaW9uYWxJbnZlc3RvciBtdXN0IGVxdWFsIHRvIGZhbHNlIiwidGVhbCI6NDgwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNzkifSx7InBjIjpbNTcxLDU3Ml0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NDg0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyODEifSx7InBjIjpbNTczLDU3NF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NDg1LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyODEifSx7InBjIjpbNTc1LDU3Nl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NDg2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyODEifSx7InBjIjpbNTc3LDU3OCw1NzldLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjQ4Nywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjgxIn0seyJwYyI6WzU4MF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NDg4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyODEifSx7InBjIjpbNTgxLDU4Ml0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NDg5LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyODEifSx7InBjIjpbNTgzXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo0OTAsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI4MSJ9LHsicGMiOls1ODRdLCJlcnJvck1lc3NhZ2UiOiJGZWVNdWx0aXBsaWVyQmFzZSBtdXN0IGJlIHNldCBwcm9wZXJseSIsInRlYWwiOjQ5Mywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjgxIn0seyJwYyI6WzU4NSw1ODZdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjQ5Nywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjgyIn0seyJwYyI6WzU4Nyw1ODhdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjQ5OCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjgyIn0seyJwYyI6WzU4OSw1OTBdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjQ5OSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjgyIn0seyJwYyI6WzU5MSw1OTIsNTkzXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo1MDAsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI4MiJ9LHsicGMiOls1OTRdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjUwMSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjgyIn0seyJwYyI6WzU5NSw1OTYsNTk3LDU5OCw1OTksNjAwXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo1MDIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI4MiJ9LHsicGMiOls2MDFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjUwMywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjgyIn0seyJwYyI6WzYwMl0sImVycm9yTWVzc2FnZSI6IkluaXRpYWwgZmVlIG11bHRpcGxpZXIgbXVzdCBiZSBzZXQgdG8gMiAqIFNDQUxFIiwidGVhbCI6NTA2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyODIifSx7InBjIjpbNjAzXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo1MTAsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI4MyJ9LHsicGMiOls2MDQsNjA1XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo1MTEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI4MyJ9LHsicGMiOls2MDZdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjUxMiwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjgzIn0seyJwYyI6WzYwN10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NTEzLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyODMifSx7InBjIjpbNjA4XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo1MTQsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI4MyJ9LHsicGMiOls2MDldLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjUxNSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjgzIn0seyJwYyI6WzYxMCw2MTFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjUxNiwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjgzIn0seyJwYyI6WzYxMl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NTE3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyODMifSx7InBjIjpbNjEzXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo1MTgsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI0MiJ9LHsicGMiOls2MTQsNjE1LDYxNl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NTIzLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyODYifSx7InBjIjpbNjE3LDYxOCw2MTldLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjUyNiwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mjg2In0seyJwYyI6WzYyMF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NTI3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyODYifSx7InBjIjpbNjIxXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo1MjgsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI4NiJ9LHsicGMiOls2MjJdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjUyOSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mjg2In0seyJwYyI6WzYyM10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NTMwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyODYifSx7InBjIjpbNjI0XSwiZXJyb3JNZXNzYWdlIjoiYXJndW1lbnQgMSAodXNlcikgZm9yIHNldEluZm8gbXVzdCBiZSBhIGFkZHJlc3MiLCJ0ZWFsIjo1MzMsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI4NiJ9LHsicGMiOls2MjUsNjI2LDYyN10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NTM2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyODYifSx7InBjIjpbNjI4XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo1MzcsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI4NiJ9LHsicGMiOls2MjldLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjUzOCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mjg2In0seyJwYyI6WzYzMCw2MzEsNjMyXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo1NDIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI4NiJ9LHsicGMiOls2MzMsNjM0XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo1NDYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI4NyJ9LHsicGMiOls2MzUsNjM2XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo1NDcsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI4NyJ9LHsicGMiOls2MzddLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjU0OCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mjg3In0seyJwYyI6WzYzOF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NTQ5LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyODcifSx7InBjIjpbNjM5XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo1NTAsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI4NyJ9LHsicGMiOls2NDAsNjQxXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo1NTQsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI4OCJ9LHsicGMiOls2NDIsNjQzXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo1NTUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI4OCJ9LHsicGMiOls2NDQsNjQ1XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo1NTYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI4OCJ9LHsicGMiOls2NDYsNjQ3LDY0OF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NTU3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyODgifSx7InBjIjpbNjQ5XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo1NTgsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI4OCJ9LHsicGMiOls2NTAsNjUxXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo1NTksInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI4OCJ9LHsicGMiOls2NTJdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjU2MCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mjg4In0seyJwYyI6WzY1M10sImVycm9yTWVzc2FnZSI6IkZlZU11bHRpcGxpZXJCYXNlIG11c3QgYmUgc2V0IHByb3Blcmx5IiwidGVhbCI6NTYzLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyODgifSx7InBjIjpbNjU0XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo1NjcsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI4OSJ9LHsicGMiOls2NTUsNjU2XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo1NjgsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI4OSJ9LHsicGMiOls2NTddLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjU2OSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mjg5In0seyJwYyI6WzY1OF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NTcwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyODkifSx7InBjIjpbNjU5XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo1NzEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI4OSJ9LHsicGMiOls2NjBdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjU3Miwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mjg5In0seyJwYyI6WzY2MSw2NjJdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjU3Mywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mjg5In0seyJwYyI6WzY2M10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NTc0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyODkifSx7InBjIjpbNjY0XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo1NzUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI4NiJ9LHsicGMiOls2NjUsNjY2LDY2N10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NTgwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMDQifSx7InBjIjpbNjY4XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo1ODEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjMwNCJ9LHsicGMiOls2NjksNjcwLDY3MV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NTg0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMDMifSx7InBjIjpbNjcyXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo1ODUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjMwMyJ9LHsicGMiOls2NzMsNjc0LDY3NV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NTg4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMDIifSx7InBjIjpbNjc2XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo1ODksInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjMwMiJ9LHsicGMiOls2NzcsNjc4LDY3OV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NTkyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMDEifSx7InBjIjpbNjgwLDY4MSw2ODJdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjU5Mywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzAxIn0seyJwYyI6WzY4Myw2ODQsNjg1XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo1OTYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjMwMCJ9LHsicGMiOls2ODYsNjg3LDY4OF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NTk3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMDAifSx7InBjIjpbNjg5LDY5MCw2OTFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjYwMCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mjk5In0seyJwYyI6WzY5Miw2OTMsNjk0XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo2MDEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI5OSJ9LHsicGMiOls2OTUsNjk2LDY5N10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NjA0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyOTgifSx7InBjIjpbNjk4XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo2MDUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI5OCJ9LHsicGMiOls2OTksNzAwLDcwMV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NjA4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyOTcifSx7InBjIjpbNzAyXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo2MDksInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI5NyJ9LHsicGMiOls3MDNdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjYxMCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mjk3In0seyJwYyI6WzcwNCw3MDUsNzA2XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo2MTgsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI5NyJ9LHsicGMiOls3MDddLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjYyMSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mjk3In0seyJwYyI6WzcwOF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NjIyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyOTcifSx7InBjIjpbNzA5LDcxMF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NjI2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMDYifSx7InBjIjpbNzExLDcxMl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NjI3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMDYifSx7InBjIjpbNzEzXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo2MjgsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjMwNiJ9LHsicGMiOls3MTRdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjYyOSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzA2In0seyJwYyI6WzcxNV0sImVycm9yTWVzc2FnZSI6IkNvbmZpZ3VyYXRpb24gYXBwIGRvZXMgbm90IG1hdGNoIiwidGVhbCI6NjMyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMDYifSx7InBjIjpbNzE2LDcxN10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NjM2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMDcifSx7InBjIjpbNzE4LDcxOV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NjM3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMDcifSx7InBjIjpbNzIwXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo2MzgsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjMwNyJ9LHsicGMiOls3MjFdLCJlcnJvck1lc3NhZ2UiOiJnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IGFwcEJpYXRlY0NvbmZpZ1Byb3ZpZGVyLmdsb2JhbFN0YXRlKCdlZicpIiwidGVhbCI6NjQxLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMDcifSx7InBjIjpbNzIyLDcyM10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NjQyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMDcifSx7InBjIjpbNzI0LDcyNV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NjQ5LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMDkifSx7InBjIjpbNzI2LDcyN10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NjUwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMDkifSx7InBjIjpbNzI4XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo2NTEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjMwOSJ9LHsicGMiOls3MjldLCJlcnJvck1lc3NhZ2UiOiJPbmx5IGZlZSBleGVjdXRvciBzZXR1cCBpbiB0aGUgY29uZmlnIGNhbiB0YWtlIHRoZSBjb2xsZWN0ZWQgZmVlcyIsInRlYWwiOjY1NCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzA4In0seyJwYyI6WzczMCw3MzFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjY1OCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzEyIn0seyJwYyI6WzczMiw3MzNdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjY1OSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzEyIn0seyJwYyI6WzczNF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NjYwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMTIifSx7InBjIjpbNzM1XSwiZXJyb3JNZXNzYWdlIjoiZ2xvYmFsIHN0YXRlIHZhbHVlIGRvZXMgbm90IGV4aXN0OiBhcHBCaWF0ZWNDb25maWdQcm92aWRlci5nbG9iYWxTdGF0ZSgncycpIiwidGVhbCI6NjYzLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMTIifSx7InBjIjpbNzM2LDczN10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NjY0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMTIifSx7InBjIjpbNzM4LDczOV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NjY4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMTMifSx7InBjIjpbNzQwXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo2NjksInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjMxMyJ9LHsicGMiOls3NDFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjY3MCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzEzIn0seyJwYyI6Wzc0Ml0sImVycm9yTWVzc2FnZSI6IkVSUl9QQVVTRUQiLCJ0ZWFsIjo2NzMsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjMxMyJ9LHsicGMiOls3NDNdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjY4NSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzE0In0seyJwYyI6Wzc0NF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6Njg2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMTQifSx7InBjIjpbNzQ1LDc0Nl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6Njg3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMTQifSx7InBjIjpbNzQ3LDc0OF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NjkxLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMTUifSx7InBjIjpbNzQ5LDc1MF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NjkyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMTUifSx7InBjIjpbNzUxLDc1Ml0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6Njk2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMTYifSx7InBjIjpbNzUzLDc1NF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6Njk3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMTYifSx7InBjIjpbNzU1LDc1Nl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NzAxLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMTcifSx7InBjIjpbNzU3LDc1OF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NzAyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMTcifSx7InBjIjpbNzU5LDc2MF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NzA2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMTgifSx7InBjIjpbNzYxLDc2Ml0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NzA3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMTgifSx7InBjIjpbNzYzLDc2NF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NzExLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMTkifSx7InBjIjpbNzY1LDc2Nl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NzEyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMTkifSx7InBjIjpbNzY3LDc2OF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NzE2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMjAifSx7InBjIjpbNzY5LDc3MF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NzE3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMjAifSx7InBjIjpbNzcxXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo3MjEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjMyMSJ9LHsicGMiOls3NzIsNzczXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo3MjIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjMyMSJ9LHsicGMiOls3NzRdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjcyNSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzE0In0seyJwYyI6Wzc3NV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NzI2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyOTcifSx7InBjIjpbNzc2LDc3N10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NzMxLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMzEifSx7InBjIjpbNzc4LDc3OSw3ODBdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjczNCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzMyIn0seyJwYyI6Wzc4MV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NzM1LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMzIifSx7InBjIjpbNzgyXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo3MzYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjMzMiJ9LHsicGMiOls3ODNdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjczNywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzMyIn0seyJwYyI6Wzc4NF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NzM4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMzIifSx7InBjIjpbNzg1XSwiZXJyb3JNZXNzYWdlIjoiYXJndW1lbnQgMCAodikgZm9yIGdldFVzZXIgbXVzdCBiZSBhIHVpbnQ4IiwidGVhbCI6NzQxLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMzIifSx7InBjIjpbNzg2XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo3NDIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjMzMiJ9LHsicGMiOls3ODcsNzg4LDc4OV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NzQ1LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMzIifSx7InBjIjpbNzkwXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo3NDYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjMzMiJ9LHsicGMiOls3OTFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjc0Nywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzMyIn0seyJwYyI6Wzc5Ml0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NzQ4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMzIifSx7InBjIjpbNzkzXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo3NDksInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjMzMiJ9LHsicGMiOls3OTRdLCJlcnJvck1lc3NhZ2UiOiJhcmd1bWVudCAxICh1c2VyKSBmb3IgZ2V0VXNlciBtdXN0IGJlIGEgYWRkcmVzcyIsInRlYWwiOjc1Miwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzMyIn0seyJwYyI6Wzc5NSw3OTYsNzk3XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo3NTUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjMzMSJ9LHsicGMiOls3OThdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjc1Niwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzMxIn0seyJwYyI6Wzc5OV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NzU3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMzEifSx7InBjIjpbODAwXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo3NTgsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjMzMSJ9LHsicGMiOls4MDFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjc1OSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzMxIn0seyJwYyI6WzgwMiw4MDMsODA0XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo3NjgsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjMzMSJ9LHsicGMiOls4MDVdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjc3MSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzMxIn0seyJwYyI6WzgwNiw4MDddLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjc3Miwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzMxIn0seyJwYyI6WzgwOCw4MDldLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjc3Niwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzMzIn0seyJwYyI6WzgxMF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6Nzc3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMzMifSx7InBjIjpbODExXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo3NzgsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjMzMyJ9LHsicGMiOls4MTJdLCJlcnJvck1lc3NhZ2UiOiJDdXJyZW50bHkgc3VwcG9ydGVkIHZlcnNpb24gb2YgdGhlIGRhdGEgc3RydWN0dXJlIGlzICcxJyIsInRlYWwiOjc4MSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzMzIn0seyJwYyI6WzgxM10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6Nzg2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMzQifSx7InBjIjpbODE0LDgxNV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6Nzg3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMzQifSx7InBjIjpbODE2XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo3ODgsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjMzNCJ9LHsicGMiOls4MTddLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjc4OSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzM0In0seyJwYyI6WzgxOF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6NzkwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMzQifSx7InBjIjpbODE5XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo3OTEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjMzNCJ9LHsicGMiOls4MjBdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjc5Miwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzM0In0seyJwYyI6WzgyMSw4MjIsODIzXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo3OTMsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjMzNCJ9LHsicGMiOls4MjRdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjgxNywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzM1In0seyJwYyI6WzgyNV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6ODE4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMzUifSx7InBjIjpbODI2LDgyN10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6ODE5LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMzUifSx7InBjIjpbODI4LDgyOV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6ODIwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMzYifSx7InBjIjpbODMwXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo4MjEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjMzNiJ9LHsicGMiOls4MzEsODMyLDgzM10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6ODIyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMzYifSx7InBjIjpbODM0LDgzNSw4MzZdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjgyMywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzM2In0seyJwYyI6WzgzN10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6ODI0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNDEifSx7InBjIjpbODM4LDgzOSw4NDBdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjgyNSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzQxIn0seyJwYyI6Wzg0MV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6ODI2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNDAifSx7InBjIjpbODQyLDg0Myw4NDRdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjgyNywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzQwIn0seyJwYyI6Wzg0NV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6ODI4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNTEifSx7InBjIjpbODQ2XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo4MjksInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM1MSJ9LHsicGMiOls4NDddLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjgzMCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzUxIn0seyJwYyI6Wzg0OF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6ODMxLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNTEifSx7InBjIjpbODQ5LDg1MCw4NTFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjgzMiwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzUyIn0seyJwYyI6Wzg1Miw4NTNdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjgzMywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzUyIn0seyJwYyI6Wzg1NCw4NTUsODU2XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo4MzQsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM1MiJ9LHsicGMiOls4NTcsODU4XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo4MzUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM1MyJ9LHsicGMiOls4NTksODYwLDg2MV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6ODM2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNTMifSx7InBjIjpbODYyXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo4MzcsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM0MiJ9LHsicGMiOls4NjMsODY0LDg2NV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6ODM4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNDIifSx7InBjIjpbODY2XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo4MzksInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM0MyJ9LHsicGMiOls4NjcsODY4LDg2OV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6ODQwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNDMifSx7InBjIjpbODcwXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo4NDEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM0NCJ9LHsicGMiOls4NzEsODcyLDg3M10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6ODQyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNDQifSx7InBjIjpbODc0XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo4NDMsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM0NSJ9LHsicGMiOls4NzUsODc2LDg3N10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6ODQ0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNDUifSx7InBjIjpbODc4XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo4NDUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM0NiJ9LHsicGMiOls4NzksODgwLDg4MV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6ODQ2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNDYifSx7InBjIjpbODgyXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo4NDcsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM0NyJ9LHsicGMiOls4ODMsODg0LDg4NV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6ODQ4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNDcifSx7InBjIjpbODg2LDg4N10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6ODQ5LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMzgifSx7InBjIjpbODg4LDg4OSw4OTBdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjg1MCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzM4In0seyJwYyI6Wzg5MSw4OTJdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjg1MSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzM3In0seyJwYyI6Wzg5Myw4OTQsODk1XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo4NTIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjMzNyJ9LHsicGMiOls4OTZdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjg1Mywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzM5In0seyJwYyI6Wzg5N10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6ODU0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMzkifSx7InBjIjpbODk4XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo4NTUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjMzOSJ9LHsicGMiOls4OTldLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjg1Niwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzM5In0seyJwYyI6WzkwMCw5MDEsOTAyXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo4NTcsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM0OCJ9LHsicGMiOls5MDNdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjg1OCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzQ4In0seyJwYyI6WzkwNCw5MDUsOTA2XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo4NTksInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM0OCJ9LHsicGMiOls5MDddLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjg2MCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzQ5In0seyJwYyI6WzkwOCw5MDksOTEwXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo4NjEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM0OSJ9LHsicGMiOls5MTFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjg2Miwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzUwIn0seyJwYyI6WzkxMl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6ODYzLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNTAifSx7InBjIjpbOTEzXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo4NjQsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM1MCJ9LHsicGMiOls5MTRdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjg2NSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzUwIn0seyJwYyI6WzkxNSw5MTYsOTE3XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo4NjYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjMzNSJ9LHsicGMiOls5MThdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjg2Nywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzM1In0seyJwYyI6WzkxOV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6ODY4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMzUifSx7InBjIjpbOTIwLDkyMV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6ODY5LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMzUifSx7InBjIjpbOTIyLDkyM10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6ODczLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNTUifSx7InBjIjpbOTI0LDkyNSw5MjZdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjg3NCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzU1In0seyJwYyI6WzkyN10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6ODc5LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNTcifSx7InBjIjpbOTI4LDkyOV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6ODgwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNTcifSx7InBjIjpbOTMwXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo4ODEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM1NyJ9LHsicGMiOls5MzEsOTMyXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo4ODIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM1NyJ9LHsicGMiOls5MzNdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjkwNSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzU5In0seyJwYyI6WzkzNF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTA2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNTkifSx7InBjIjpbOTM1LDkzNl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTA3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNTkifSx7InBjIjpbOTM3LDkzOF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTA4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNjAifSx7InBjIjpbOTM5XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo5MDksInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM2MCJ9LHsicGMiOls5NDAsOTQxLDk0Ml0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTEwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNjAifSx7InBjIjpbOTQzLDk0NCw5NDVdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjkxMSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzYwIn0seyJwYyI6Wzk0Niw5NDddLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjkxMiwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzU3In0seyJwYyI6Wzk0OF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTEzLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNTcifSx7InBjIjpbOTQ5XSwiZXJyb3JNZXNzYWdlIjoiYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLmlkZW50aXRpZXModXNlcikudmFsdWUiLCJ0ZWFsIjo5MTYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM1NyJ9LHsicGMiOls5NTAsOTUxXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo5MTcsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM2NSJ9LHsicGMiOls5NTIsOTUzXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo5MTgsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM2NSJ9LHsicGMiOls5NTQsOTU1LDk1Nl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTE5LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNjUifSx7InBjIjpbOTU3XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo5MjAsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM2NSJ9LHsicGMiOls5NThdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjkyMSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzY1In0seyJwYyI6Wzk1OSw5NjAsOTYxXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo5MjIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM2NSJ9LHsicGMiOls5NjIsOTYzXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo5MjMsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM1NyJ9LHsicGMiOls5NjRdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjkyNCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzU3In0seyJwYyI6Wzk2NV0sImVycm9yTWVzc2FnZSI6ImJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5pZGVudGl0aWVzKHVzZXIpLnZhbHVlIiwidGVhbCI6OTI3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNTcifSx7InBjIjpbOTY2LDk2N10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTI4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNjQifSx7InBjIjpbOTY4LDk2OV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTI5LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNjQifSx7InBjIjpbOTcwLDk3MSw5NzJdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjkzMCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzY0In0seyJwYyI6Wzk3M10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTMxLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNjQifSx7InBjIjpbOTc0XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo5MzIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM2NCJ9LHsicGMiOls5NzUsOTc2LDk3N10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTMzLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNjQifSx7InBjIjpbOTc4XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo5MzQsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3NSJ9LHsicGMiOls5NzldLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjkzNSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzc1In0seyJwYyI6Wzk4MCw5ODFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjkzNiwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzU3In0seyJwYyI6Wzk4Ml0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTM3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNTcifSx7InBjIjpbOTgzXSwiZXJyb3JNZXNzYWdlIjoiYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLmlkZW50aXRpZXModXNlcikudmFsdWUiLCJ0ZWFsIjo5NDAsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM1NyJ9LHsicGMiOls5ODQsOTg1XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo5NDEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3NSJ9LHsicGMiOls5ODYsOTg3XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo5NDIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3NSJ9LHsicGMiOls5ODgsOTg5LDk5MF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTQzLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzUifSx7InBjIjpbOTkxXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo5NDQsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3NSJ9LHsicGMiOls5OTJdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjk0NSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzc1In0seyJwYyI6Wzk5Myw5OTQsOTk1XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo5NDYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3NiJ9LHsicGMiOls5OTYsOTk3XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo5NDcsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM1NyJ9LHsicGMiOls5OThdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjk0OCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzU3In0seyJwYyI6Wzk5OV0sImVycm9yTWVzc2FnZSI6ImJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5pZGVudGl0aWVzKHVzZXIpLnZhbHVlIiwidGVhbCI6OTUxLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNTcifSx7InBjIjpbMTAwMCwxMDAxXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo5NTIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3NiJ9LHsicGMiOlsxMDAyLDEwMDNdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjk1Mywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzc2In0seyJwYyI6WzEwMDQsMTAwNV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTU0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzYifSx7InBjIjpbMTAwNiwxMDA3XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo5NTUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3NiJ9LHsicGMiOlsxMDA4LDEwMDldLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjk1Niwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzc2In0seyJwYyI6WzEwMTBdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjk1Nywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzc2In0seyJwYyI6WzEwMTFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjk1OCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzc2In0seyJwYyI6WzEwMTIsMTAxM10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTU5LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzYifSx7InBjIjpbMTAxNF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTYwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzYifSx7InBjIjpbMTAxNV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTYxLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzYifSx7InBjIjpbMTAxNl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTYyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzYifSx7InBjIjpbMTAxN10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTYzLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzYifSx7InBjIjpbMTAxOF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTY0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzYifSx7InBjIjpbMTAxOV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTY1LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzYifSx7InBjIjpbMTAyMF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTY2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzYifSx7InBjIjpbMTAyMSwxMDIyLDEwMjNdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjk2Nywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzc2In0seyJwYyI6WzEwMjRdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjk2OCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzc2In0seyJwYyI6WzEwMjVdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjk2OSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzc2In0seyJwYyI6WzEwMjZdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjk3MCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzc2In0seyJwYyI6WzEwMjcsMTAyOCwxMDI5XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo5NzEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3NiJ9LHsicGMiOlsxMDMwXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo5NzIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3NiJ9LHsicGMiOlsxMDMxXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo5NzMsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3NiJ9LHsicGMiOlsxMDMyLDEwMzMsMTAzNF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTc0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzYifSx7InBjIjpbMTAzNSwxMDM2XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo5NzUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM1NyJ9LHsicGMiOlsxMDM3XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo5NzYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM1NyJ9LHsicGMiOlsxMDM4XSwiZXJyb3JNZXNzYWdlIjoiYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLmlkZW50aXRpZXModXNlcikudmFsdWUiLCJ0ZWFsIjo5NzksInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM1NyJ9LHsicGMiOlsxMDM5LDEwNDBdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjk4MCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzc3In0seyJwYyI6WzEwNDEsMTA0Ml0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTgxLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzcifSx7InBjIjpbMTA0MywxMDQ0XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo5ODIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3NyJ9LHsicGMiOlsxMDQ1LDEwNDZdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjk4Mywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzc3In0seyJwYyI6WzEwNDcsMTA0OF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTg0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzcifSx7InBjIjpbMTA0OV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTg1LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzcifSx7InBjIjpbMTA1MF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTg2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzcifSx7InBjIjpbMTA1MSwxMDUyXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo5ODcsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3NyJ9LHsicGMiOlsxMDUzXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo5ODgsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3NyJ9LHsicGMiOlsxMDU0XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo5ODksInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3NyJ9LHsicGMiOlsxMDU1XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo5OTAsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3NyJ9LHsicGMiOlsxMDU2XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo5OTEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3NyJ9LHsicGMiOlsxMDU3XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo5OTIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3NyJ9LHsicGMiOlsxMDU4XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo5OTMsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3NyJ9LHsicGMiOlsxMDU5XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjo5OTQsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3NyJ9LHsicGMiOlsxMDYwLDEwNjEsMTA2Ml0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTk1LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzcifSx7InBjIjpbMTA2M10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTk2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzcifSx7InBjIjpbMTA2NF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTk3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzcifSx7InBjIjpbMTA2NV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6OTk4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzcifSx7InBjIjpbMTA2NiwxMDY3LDEwNjhdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjk5OSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzc3In0seyJwYyI6WzEwNjldLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEwMDAsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3NyJ9LHsicGMiOlsxMDcwXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMDAxLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzcifSx7InBjIjpbMTA3MSwxMDcyLDEwNzNdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEwMDIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3NyJ9LHsicGMiOlsxMDc0LDEwNzVdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEwMDMsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM1NyJ9LHsicGMiOlsxMDc2XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMDA0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNTcifSx7InBjIjpbMTA3N10sImVycm9yTWVzc2FnZSI6ImJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5pZGVudGl0aWVzKHVzZXIpLnZhbHVlIiwidGVhbCI6MTAwNywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzU3In0seyJwYyI6WzEwNzgsMTA3OV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTAwOCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzY2In0seyJwYyI6WzEwODAsMTA4MV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTAwOSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzY2In0seyJwYyI6WzEwODIsMTA4MywxMDg0XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMDEwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNjYifSx7InBjIjpbMTA4NV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTAxMSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzY2In0seyJwYyI6WzEwODZdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEwMTIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM2NiJ9LHsicGMiOlsxMDg3LDEwODgsMTA4OV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTAxMywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzY2In0seyJwYyI6WzEwOTAsMTA5MV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTAxNCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzU3In0seyJwYyI6WzEwOTJdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEwMTUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM1NyJ9LHsicGMiOlsxMDkzXSwiZXJyb3JNZXNzYWdlIjoiYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLmlkZW50aXRpZXModXNlcikudmFsdWUiLCJ0ZWFsIjoxMDE4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNTcifSx7InBjIjpbMTA5NCwxMDk1XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMDE5LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNjcifSx7InBjIjpbMTA5NiwxMDk3XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMDIwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNjcifSx7InBjIjpbMTA5OCwxMDk5LDExMDBdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEwMjEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM2NyJ9LHsicGMiOlsxMTAxXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMDIyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNjcifSx7InBjIjpbMTEwMl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTAyMywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzY3In0seyJwYyI6WzExMDMsMTEwNCwxMTA1XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMDI0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNjcifSx7InBjIjpbMTEwNiwxMTA3XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMDI1LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNTcifSx7InBjIjpbMTEwOF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTAyNiwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzU3In0seyJwYyI6WzExMDldLCJlcnJvck1lc3NhZ2UiOiJib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMuaWRlbnRpdGllcyh1c2VyKS52YWx1ZSIsInRlYWwiOjEwMjksInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM1NyJ9LHsicGMiOlsxMTEwLDExMTFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEwMzAsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM2OCJ9LHsicGMiOlsxMTEyLDExMTNdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEwMzEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM2OCJ9LHsicGMiOlsxMTE0LDExMTUsMTExNl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTAzMiwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzY4In0seyJwYyI6WzExMTddLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEwMzMsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM2OCJ9LHsicGMiOlsxMTE4XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMDM0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNjgifSx7InBjIjpbMTExOSwxMTIwLDExMjFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEwMzUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM2OCJ9LHsicGMiOlsxMTIyLDExMjNdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEwMzYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM1NyJ9LHsicGMiOlsxMTI0XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMDM3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNTcifSx7InBjIjpbMTEyNV0sImVycm9yTWVzc2FnZSI6ImJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5pZGVudGl0aWVzKHVzZXIpLnZhbHVlIiwidGVhbCI6MTA0MCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzU3In0seyJwYyI6WzExMjYsMTEyN10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTA0MSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzY5In0seyJwYyI6WzExMjgsMTEyOV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTA0Miwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzY5In0seyJwYyI6WzExMzAsMTEzMSwxMTMyXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMDQzLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNjkifSx7InBjIjpbMTEzM10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTA0NCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzY5In0seyJwYyI6WzExMzRdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEwNDUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM2OSJ9LHsicGMiOlsxMTM1LDExMzYsMTEzN10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTA0Niwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzY5In0seyJwYyI6WzExMzgsMTEzOV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTA0Nywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzU3In0seyJwYyI6WzExNDBdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEwNDgsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM1NyJ9LHsicGMiOlsxMTQxXSwiZXJyb3JNZXNzYWdlIjoiYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLmlkZW50aXRpZXModXNlcikudmFsdWUiLCJ0ZWFsIjoxMDUxLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNTcifSx7InBjIjpbMTE0MiwxMTQzXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMDUyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzAifSx7InBjIjpbMTE0NCwxMTQ1XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMDUzLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzAifSx7InBjIjpbMTE0NiwxMTQ3LDExNDhdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEwNTQsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3MCJ9LHsicGMiOlsxMTQ5XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMDU1LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzAifSx7InBjIjpbMTE1MF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTA1Niwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzcwIn0seyJwYyI6WzExNTEsMTE1MiwxMTUzXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMDU3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzAifSx7InBjIjpbMTE1NCwxMTU1XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMDU4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNTcifSx7InBjIjpbMTE1Nl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTA1OSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzU3In0seyJwYyI6WzExNTddLCJlcnJvck1lc3NhZ2UiOiJib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMuaWRlbnRpdGllcyh1c2VyKS52YWx1ZSIsInRlYWwiOjEwNjIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM1NyJ9LHsicGMiOlsxMTU4LDExNTldLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEwNjMsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3MSJ9LHsicGMiOlsxMTYwLDExNjFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEwNjQsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3MSJ9LHsicGMiOlsxMTYyLDExNjMsMTE2NF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTA2NSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzcxIn0seyJwYyI6WzExNjVdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEwNjYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3MSJ9LHsicGMiOlsxMTY2XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMDY3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzEifSx7InBjIjpbMTE2NywxMTY4LDExNjldLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEwNjgsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3MSJ9LHsicGMiOlsxMTcwLDExNzFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEwNjksInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM1NyJ9LHsicGMiOlsxMTcyXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMDcwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNTcifSx7InBjIjpbMTE3M10sImVycm9yTWVzc2FnZSI6ImJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5pZGVudGl0aWVzKHVzZXIpLnZhbHVlIiwidGVhbCI6MTA3Mywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzU3In0seyJwYyI6WzExNzQsMTE3NV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTA3NCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzYyIn0seyJwYyI6WzExNzYsMTE3N10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTA3NSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzYyIn0seyJwYyI6WzExNzgsMTE3OSwxMTgwXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMDc2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNjIifSx7InBjIjpbMTE4MV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTA3Nywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzYyIn0seyJwYyI6WzExODJdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEwNzgsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM2MiJ9LHsicGMiOlsxMTgzLDExODQsMTE4NV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTA3OSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzYyIn0seyJwYyI6WzExODYsMTE4N10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTA4MCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzU3In0seyJwYyI6WzExODhdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEwODEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM1NyJ9LHsicGMiOlsxMTg5XSwiZXJyb3JNZXNzYWdlIjoiYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLmlkZW50aXRpZXModXNlcikudmFsdWUiLCJ0ZWFsIjoxMDg0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNTcifSx7InBjIjpbMTE5MCwxMTkxXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMDg1LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNjEifSx7InBjIjpbMTE5MiwxMTkzXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMDg2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNjEifSx7InBjIjpbMTE5NCwxMTk1LDExOTZdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEwODcsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM2MSJ9LHsicGMiOlsxMTk3XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMDg4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNjEifSx7InBjIjpbMTE5OF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTA4OSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzYxIn0seyJwYyI6WzExOTksMTIwMCwxMjAxXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMDkwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNjEifSx7InBjIjpbMTIwMl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTA5MSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzYzIn0seyJwYyI6WzEyMDNdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEwOTIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM2MyJ9LHsicGMiOlsxMjA0LDEyMDVdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEwOTMsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM1NyJ9LHsicGMiOlsxMjA2XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMDk0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNTcifSx7InBjIjpbMTIwN10sImVycm9yTWVzc2FnZSI6ImJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5pZGVudGl0aWVzKHVzZXIpLnZhbHVlIiwidGVhbCI6MTA5Nywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzU3In0seyJwYyI6WzEyMDgsMTIwOV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTA5OCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzYzIn0seyJwYyI6WzEyMTAsMTIxMV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTA5OSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzYzIn0seyJwYyI6WzEyMTIsMTIxM10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTEwMCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzYzIn0seyJwYyI6WzEyMTRdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjExMDEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM2MyJ9LHsicGMiOlsxMjE1XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMTAyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNjMifSx7InBjIjpbMTIxNiwxMjE3LDEyMThdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjExMDMsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3MiJ9LHsicGMiOlsxMjE5LDEyMjBdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjExMDQsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM1NyJ9LHsicGMiOlsxMjIxXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMTA1LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNTcifSx7InBjIjpbMTIyMl0sImVycm9yTWVzc2FnZSI6ImJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5pZGVudGl0aWVzKHVzZXIpLnZhbHVlIiwidGVhbCI6MTEwOCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzU3In0seyJwYyI6WzEyMjMsMTIyNF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTEwOSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzcyIn0seyJwYyI6WzEyMjUsMTIyNl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTExMCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzcyIn0seyJwYyI6WzEyMjcsMTIyOCwxMjI5XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMTExLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzIifSx7InBjIjpbMTIzMF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTExMiwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzcyIn0seyJwYyI6WzEyMzFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjExMTMsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3MiJ9LHsicGMiOlsxMjMyLDEyMzMsMTIzNF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTExNCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzcyIn0seyJwYyI6WzEyMzUsMTIzNl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTExNSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzU3In0seyJwYyI6WzEyMzddLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjExMTYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM1NyJ9LHsicGMiOlsxMjM4XSwiZXJyb3JNZXNzYWdlIjoiYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLmlkZW50aXRpZXModXNlcikudmFsdWUiLCJ0ZWFsIjoxMTE5LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNTcifSx7InBjIjpbMTIzOSwxMjQwXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMTIwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzMifSx7InBjIjpbMTI0MSwxMjQyXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMTIxLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzMifSx7InBjIjpbMTI0MywxMjQ0LDEyNDVdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjExMjIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3MyJ9LHsicGMiOlsxMjQ2XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMTIzLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzMifSx7InBjIjpbMTI0N10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTEyNCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzczIn0seyJwYyI6WzEyNDgsMTI0OSwxMjUwXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMTI1LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzMifSx7InBjIjpbMTI1MV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTEyNiwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzc0In0seyJwYyI6WzEyNTJdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjExMjcsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3NCJ9LHsicGMiOlsxMjUzLDEyNTRdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjExMjgsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM1NyJ9LHsicGMiOlsxMjU1XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMTI5LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNTcifSx7InBjIjpbMTI1Nl0sImVycm9yTWVzc2FnZSI6ImJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5pZGVudGl0aWVzKHVzZXIpLnZhbHVlIiwidGVhbCI6MTEzMiwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzU3In0seyJwYyI6WzEyNTcsMTI1OF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTEzMywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzc0In0seyJwYyI6WzEyNTksMTI2MF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTEzNCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzc0In0seyJwYyI6WzEyNjEsMTI2Ml0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTEzNSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzc0In0seyJwYyI6WzEyNjNdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjExMzYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM3NCJ9LHsicGMiOlsxMjY0XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMTM3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNzQifSx7InBjIjpbMTI2NSwxMjY2LDEyNjddLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjExMzgsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM1OSJ9LHsicGMiOlsxMjY4XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMTM5LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNTkifSx7InBjIjpbMTI2OV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTE0MCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzU5In0seyJwYyI6WzEyNzAsMTI3MV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTE0MSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzU5In0seyJwYyI6WzEyNzIsMTI3M10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTE0NSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzc5In0seyJwYyI6WzEyNzQsMTI3NV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTE0OSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzMxIn0seyJwYyI6WzEyNzYsMTI3N10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTE1Miwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzMxIn0seyJwYyI6WzEyNzhdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjExNTMsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjMzMSJ9LHsicGMiOlsxMjc5LDEyODBdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjExNTgsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM4OCJ9LHsicGMiOlsxMjgxLDEyODIsMTI4M10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTE2MSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzg5In0seyJwYyI6WzEyODRdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjExNjIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM4OSJ9LHsicGMiOlsxMjg1XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMTYzLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozODkifSx7InBjIjpbMTI4Nl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTE2NCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzg5In0seyJwYyI6WzEyODddLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjExNjUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM4OSJ9LHsicGMiOlsxMjg4XSwiZXJyb3JNZXNzYWdlIjoiYXJndW1lbnQgMCAodikgZm9yIGdldFVzZXJTaG9ydCBtdXN0IGJlIGEgdWludDgiLCJ0ZWFsIjoxMTY4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozODkifSx7InBjIjpbMTI4OV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTE2OSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzg5In0seyJwYyI6WzEyOTAsMTI5MSwxMjkyXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMTcyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozODkifSx7InBjIjpbMTI5M10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTE3Mywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzg5In0seyJwYyI6WzEyOTRdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjExNzQsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM4OSJ9LHsicGMiOlsxMjk1XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMTc1LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozODkifSx7InBjIjpbMTI5Nl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTE3Niwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzg5In0seyJwYyI6WzEyOTddLCJlcnJvck1lc3NhZ2UiOiJhcmd1bWVudCAxICh1c2VyKSBmb3IgZ2V0VXNlclNob3J0IG11c3QgYmUgYSBhZGRyZXNzIiwidGVhbCI6MTE3OSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzg5In0seyJwYyI6WzEyOTgsMTI5OSwxMzAwXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMTgyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozODgifSx7InBjIjpbMTMwMV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTE4Mywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzg4In0seyJwYyI6WzEzMDJdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjExODQsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM4OCJ9LHsicGMiOlsxMzAzXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMTg1LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozODgifSx7InBjIjpbMTMwNF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTE4Niwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzg4In0seyJwYyI6WzEzMDUsMTMwNiwxMzA3XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMTk1LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozODgifSx7InBjIjpbMTMwOF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTE5OCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzg4In0seyJwYyI6WzEzMDksMTMxMF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTE5OSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzg4In0seyJwYyI6WzEzMTEsMTMxMl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTIwMywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzkwIn0seyJwYyI6WzEzMTNdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEyMDQsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM5MCJ9LHsicGMiOlsxMzE0XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMjA1LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozOTAifSx7InBjIjpbMTMxNV0sImVycm9yTWVzc2FnZSI6IkN1cnJlbnRseSBzdXBwb3J0ZWQgdmVyc2lvbiBvZiB0aGUgZGF0YSBzdHJ1Y3R1cmUgaXMgJzEnIiwidGVhbCI6MTIwOCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzkwIn0seyJwYyI6WzEzMTZdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEyMTMsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM5MSJ9LHsicGMiOlsxMzE3LDEzMThdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEyMTQsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM5MSJ9LHsicGMiOlsxMzE5XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMjE1LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozOTEifSx7InBjIjpbMTMyMF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTIxNiwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzkxIn0seyJwYyI6WzEzMjFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEyMTcsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM5MSJ9LHsicGMiOlsxMzIyXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMjE4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozOTEifSx7InBjIjpbMTMyM10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTIxOSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzkxIn0seyJwYyI6WzEzMjQsMTMyNSwxMzI2XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMjIwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozOTEifSx7InBjIjpbMTMyNywxMzI4XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMjMxLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozOTMifSx7InBjIjpbMTMyOV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTIzMiwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzkzIn0seyJwYyI6WzEzMzAsMTMzMSwxMzMyXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMjMzLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozOTMifSx7InBjIjpbMTMzM10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTIzNCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzk3In0seyJwYyI6WzEzMzRdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEyMzUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM5NyJ9LHsicGMiOlsxMzM1LDEzMzZdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEyMzYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM5NSJ9LHsicGMiOlsxMzM3XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMjM3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozOTUifSx7InBjIjpbMTMzOCwxMzM5XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMjM4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozOTQifSx7InBjIjpbMTM0MF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTIzOSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzk0In0seyJwYyI6WzEzNDFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEyNDAsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM5NiJ9LHsicGMiOlsxMzQyXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMjQxLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozOTYifSx7InBjIjpbMTM0M10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTI0Miwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mzk2In0seyJwYyI6WzEzNDRdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEyNDMsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM5NiJ9LHsicGMiOlsxMzQ1XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMjQ0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozOTIifSx7InBjIjpbMTM0NiwxMzQ3XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMjQ1LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozOTIifSx7InBjIjpbMTM0OCwxMzQ5XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMjQ5LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozOTkifSx7InBjIjpbMTM1MCwxMzUxLDEzNTJdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEyNTAsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM5OSJ9LHsicGMiOlsxMzUzXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMjU1LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MDEifSx7InBjIjpbMTM1NCwxMzU1XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMjU2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MDEifSx7InBjIjpbMTM1Nl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTI1Nywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDAxIn0seyJwYyI6WzEzNTcsMTM1OF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTI1OCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDAxIn0seyJwYyI6WzEzNTksMTM2MF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTI2OCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDA0In0seyJwYyI6WzEzNjFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEyNjksInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQwNCJ9LHsicGMiOlsxMzYyLDEzNjMsMTM2NF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTI3MCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDA0In0seyJwYyI6WzEzNjUsMTM2Nl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTI3MSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDAxIn0seyJwYyI6WzEzNjddLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEyNzIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQwMSJ9LHsicGMiOlsxMzY4XSwiZXJyb3JNZXNzYWdlIjoiYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLmlkZW50aXRpZXModXNlcikudmFsdWUiLCJ0ZWFsIjoxMjc1LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MDEifSx7InBjIjpbMTM2OSwxMzcwXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMjc2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MDgifSx7InBjIjpbMTM3MSwxMzcyXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMjc3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MDgifSx7InBjIjpbMTM3MywxMzc0LDEzNzVdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEyNzgsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQwOCJ9LHsicGMiOlsxMzc2XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMjc5LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MDgifSx7InBjIjpbMTM3N10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTI4MCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDA4In0seyJwYyI6WzEzNzhdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEyODEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQwOCJ9LHsicGMiOlsxMzc5LDEzODBdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEyODIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQwMSJ9LHsicGMiOlsxMzgxXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMjgzLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MDEifSx7InBjIjpbMTM4Ml0sImVycm9yTWVzc2FnZSI6ImJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5pZGVudGl0aWVzKHVzZXIpLnZhbHVlIiwidGVhbCI6MTI4Niwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDAxIn0seyJwYyI6WzEzODMsMTM4NF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTI4Nywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDA2In0seyJwYyI6WzEzODUsMTM4Nl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTI4OCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDA2In0seyJwYyI6WzEzODcsMTM4OCwxMzg5XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMjg5LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MDYifSx7InBjIjpbMTM5MF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTI5MCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDA2In0seyJwYyI6WzEzOTFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEyOTEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQwNiJ9LHsicGMiOlsxMzkyXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMjkyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MDYifSx7InBjIjpbMTM5MywxMzk0XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMjkzLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MDEifSx7InBjIjpbMTM5NV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTI5NCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDAxIn0seyJwYyI6WzEzOTZdLCJlcnJvck1lc3NhZ2UiOiJib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMuaWRlbnRpdGllcyh1c2VyKS52YWx1ZSIsInRlYWwiOjEyOTcsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQwMSJ9LHsicGMiOlsxMzk3LDEzOThdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEyOTgsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQwNSJ9LHsicGMiOlsxMzk5LDE0MDBdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEyOTksInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQwNSJ9LHsicGMiOlsxNDAxLDE0MDIsMTQwM10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTMwMCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDA1In0seyJwYyI6WzE0MDRdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEzMDEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQwNSJ9LHsicGMiOlsxNDA1XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMzAyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MDUifSx7InBjIjpbMTQwNl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTMwMywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDA1In0seyJwYyI6WzE0MDddLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEzMDQsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQwNyJ9LHsicGMiOlsxNDA4XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMzA1LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MDcifSx7InBjIjpbMTQwOSwxNDEwXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMzA2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MDEifSx7InBjIjpbMTQxMV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTMwNywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDAxIn0seyJwYyI6WzE0MTJdLCJlcnJvck1lc3NhZ2UiOiJib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMuaWRlbnRpdGllcyh1c2VyKS52YWx1ZSIsInRlYWwiOjEzMTAsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQwMSJ9LHsicGMiOlsxNDEzLDE0MTRdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEzMTEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQwNyJ9LHsicGMiOlsxNDE1LDE0MTZdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEzMTIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQwNyJ9LHsicGMiOlsxNDE3LDE0MThdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEzMTMsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQwNyJ9LHsicGMiOlsxNDE5XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMzE0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MDcifSx7InBjIjpbMTQyMF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTMxNSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDA3In0seyJwYyI6WzE0MjFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEzMTYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQwMyJ9LHsicGMiOlsxNDIyLDE0MjNdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEzMTcsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQwMyJ9LHsicGMiOlsxNDI0LDE0MjVdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEzMjEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQxMCJ9LHsicGMiOlsxNDI2LDE0MjddLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEzMjUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM4OCJ9LHsicGMiOlsxNDI4LDE0MjldLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEzMjgsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM4OCJ9LHsicGMiOlsxNDMwXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMzI5LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozODgifSx7InBjIjpbMTQzMSwxNDMyXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMzM0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MjEifSx7InBjIjpbMTQzMywxNDM0LDE0MzVdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEzMzcsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQyMSJ9LHsicGMiOlsxNDM2XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMzM4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MjEifSx7InBjIjpbMTQzNywxNDM4LDE0MzldLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEzNDEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQyMSJ9LHsicGMiOlsxNDQwXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMzQyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MjEifSx7InBjIjpbMTQ0MSwxNDQyLDE0NDNdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEzNDUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQyMSJ9LHsicGMiOlsxNDQ0XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMzQ2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MjEifSx7InBjIjpbMTQ0NSwxNDQ2LDE0NDddLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEzNDksInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQyMSJ9LHsicGMiOlsxNDQ4XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMzUwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MjEifSx7InBjIjpbMTQ0OV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTM1MSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDIxIn0seyJwYyI6WzE0NTBdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEzNTIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQyMSJ9LHsicGMiOlsxNDUxXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMzUzLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MjEifSx7InBjIjpbMTQ1Ml0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTM1NCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDIxIn0seyJwYyI6WzE0NTMsMTQ1NCwxNDU1XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMzY2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MjEifSx7InBjIjpbMTQ1Nl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTM2OSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDIxIn0seyJwYyI6WzE0NTddLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEzNzAsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQyMSJ9LHsicGMiOlsxNDU4LDE0NTldLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEzNzQsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQyMiJ9LHsicGMiOlsxNDYwLDE0NjFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEzNzUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQyMiJ9LHsicGMiOlsxNDYyXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMzc2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MjIifSx7InBjIjpbMTQ2M10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTM3Nywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDIyIn0seyJwYyI6WzE0NjRdLCJlcnJvck1lc3NhZ2UiOiJDb25maWd1cmF0aW9uIGFwcCBkb2VzIG5vdCBtYXRjaCIsInRlYWwiOjEzODAsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQyMiJ9LHsicGMiOlsxNDY1LDE0NjZdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEzODQsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQyMyJ9LHsicGMiOlsxNDY3LDE0NjhdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjEzODUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQyMyJ9LHsicGMiOlsxNDY5XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMzg2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MjMifSx7InBjIjpbMTQ3MF0sImVycm9yTWVzc2FnZSI6Imdsb2JhbCBzdGF0ZSB2YWx1ZSBkb2VzIG5vdCBleGlzdDogYXBwQmlhdGVjQ29uZmlnUHJvdmlkZXIuZ2xvYmFsU3RhdGUoJ2VmJykiLCJ0ZWFsIjoxMzg5LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MjMifSx7InBjIjpbMTQ3MSwxNDcyXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMzkwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MjMifSx7InBjIjpbMTQ3MywxNDc0XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMzk0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MjQifSx7InBjIjpbMTQ3NSwxNDc2XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxMzk1LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MjQifSx7InBjIjpbMTQ3N10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTM5Niwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDI0In0seyJwYyI6WzE0NzhdLCJlcnJvck1lc3NhZ2UiOiJnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IGFwcEJpYXRlY0NvbmZpZ1Byb3ZpZGVyLmdsb2JhbFN0YXRlKCdzJykiLCJ0ZWFsIjoxMzk5LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MjQifSx7InBjIjpbMTQ3OSwxNDgwXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNDAwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MjQifSx7InBjIjpbMTQ4MSwxNDgyXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNDA0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MjUifSx7InBjIjpbMTQ4M10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTQwNSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDI1In0seyJwYyI6WzE0ODRdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE0MDYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQyNSJ9LHsicGMiOlsxNDg1XSwiZXJyb3JNZXNzYWdlIjoiRVJSX1BBVVNFRCIsInRlYWwiOjE0MDksInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQyNSJ9LHsicGMiOlsxNDg2LDE0ODddLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE0MTYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQyNyJ9LHsicGMiOlsxNDg4LDE0ODldLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE0MTcsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQyNyJ9LHsicGMiOlsxNDkwXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNDE4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MjcifSx7InBjIjpbMTQ5MV0sImVycm9yTWVzc2FnZSI6Ik9ubHkgZmVlIGV4ZWN1dG9yIHNldHVwIGluIHRoZSBjb25maWcgY2FuIHRha2UgdGhlIGNvbGxlY3RlZCBmZWVzIiwidGVhbCI6MTQyMSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDI2In0seyJwYyI6WzE0OTIsMTQ5M10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTQyNSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDMxIn0seyJwYyI6WzE0OTQsMTQ5NV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTQyNiwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDMxIn0seyJwYyI6WzE0OTYsMTQ5N10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTQyNywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDMxIn0seyJwYyI6WzE0OTgsMTQ5OSwxNTAwXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNDI4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MzEifSx7InBjIjpbMTUwMSwxNTAyXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNDMyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MzMifSx7InBjIjpbMTUwMywxNTA0XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNDM1LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MjEifSx7InBjIjpbMTUwNSwxNTA2XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNDM4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0MjEifSx7InBjIjpbMTUwN10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTQzOSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDIxIn0seyJwYyI6WzE1MDgsMTUwOSwxNTEwXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNDQ4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0NDIifSx7InBjIjpbMTUxMSwxNTEyXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNDUzLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0NDMifSx7InBjIjpbMTUxM10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTQ1NCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDQzIn0seyJwYyI6WzE1MTRdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE0NTUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQ0MyJ9LHsicGMiOlsxNTE1LDE1MTYsMTUxN10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTQ1Niwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDQzIn0seyJwYyI6WzE1MThdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE0NjUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQ0NCJ9LHsicGMiOlsxNTE5XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNDY2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0NDQifSx7InBjIjpbMTUyMCwxNTIxXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNDY3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0NDQifSx7InBjIjpbMTUyMiwxNTIzXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNDcxLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0NDUifSx7InBjIjpbMTUyNCwxNTI1XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNDcyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0NDUifSx7InBjIjpbMTUyNiwxNTI3XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNDc2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0NDYifSx7InBjIjpbMTUyOCwxNTI5XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNDc3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0NDYifSx7InBjIjpbMTUzMF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTQ4MSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDQ3In0seyJwYyI6WzE1MzEsMTUzMl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTQ4Miwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDQ3In0seyJwYyI6WzE1MzNdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE0ODUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQ0NCJ9LHsicGMiOlsxNTM0LDE1MzUsMTUzNl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTQ4Niwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDQzIn0seyJwYyI6WzE1MzddLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE0OTYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQ1MCJ9LHsicGMiOlsxNTM4LDE1MzldLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE0OTcsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQ1MCJ9LHsicGMiOlsxNTQwLDE1NDFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE0OTgsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQ1MCJ9LHsicGMiOlsxNTQyLDE1NDNdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE1MDIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQ1MSJ9LHsicGMiOlsxNTQ0LDE1NDVdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE1MDMsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQ1MSJ9LHsicGMiOlsxNTQ2LDE1NDddLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE1MDcsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQ1MiJ9LHsicGMiOlsxNTQ4LDE1NDldLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE1MDgsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQ1MiJ9LHsicGMiOlsxNTUwLDE1NTFdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE1MTIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQ1MyJ9LHsicGMiOlsxNTUyLDE1NTNdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE1MTMsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQ1MyJ9LHsicGMiOlsxNTU0XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNTE3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0NTQifSx7InBjIjpbMTU1NSwxNTU2XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNTE4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czo0NTQifSx7InBjIjpbMTU1N10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTUyMSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6NDUwIn0seyJwYyI6WzE1NThdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE1MjQsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjQ0MiJ9LHsicGMiOlsxNTU5LDE1NjAsMTU2MSwxNTYyLDE1NjMsMTU2NF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTUyNywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MTgxIn0seyJwYyI6WzE1NjUsMTU2NiwxNTY3XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNTI4LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoxODEifSx7InBjIjpbMTU2OCwxNTY5LDE1NzAsMTU3MV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTUyOSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MTgxIn0seyJwYyI6WzE1NzJdLCJlcnJvck1lc3NhZ2UiOiJ0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY3JlYXRlIE5vT3AiLCJ0ZWFsIjoxNTMyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoxODEifSx7InBjIjpbMTU3MywxNTc0LDE1NzUsMTU3NiwxNTc3LDE1NzhdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE1MzUsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjE4MSJ9LHsicGMiOlsxNTc5LDE1ODAsMTU4MSwxNTgyLDE1ODMsMTU4NF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTUzNiwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MTgxIn0seyJwYyI6WzE1ODUsMTU4NiwxNTg3LDE1ODgsMTU4OSwxNTkwXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNTM3LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoxODEifSx7InBjIjpbMTU5MSwxNTkyLDE1OTMsMTU5NCwxNTk1LDE1OTZdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE1MzgsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjE4MSJ9LHsicGMiOlsxNTk3LDE1OTgsMTU5OSwxNjAwLDE2MDEsMTYwMl0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTUzOSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MTgxIn0seyJwYyI6WzE2MDMsMTYwNCwxNjA1LDE2MDYsMTYwNywxNjA4XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNTQwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoxODEifSx7InBjIjpbMTYwOSwxNjEwLDE2MTEsMTYxMiwxNjEzLDE2MTRdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE1NDEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjE4MSJ9LHsicGMiOlsxNjE1LDE2MTYsMTYxN10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTU0Miwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MTgxIn0seyJwYyI6WzE2MTgsMTYxOSwxNjIwLDE2MjEsMTYyMiwxNjIzLDE2MjQsMTYyNSwxNjI2LDE2MjcsMTYyOCwxNjI5LDE2MzAsMTYzMSwxNjMyLDE2MzNdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE1NDMsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjE4MSJ9LHsicGMiOlsxNjM0XSwiZXJyb3JNZXNzYWdlIjoidGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNhbGwgTm9PcCIsInRlYWwiOjE1NDYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjE4MSJ9LHsicGMiOlsxNjM1LDE2MzYsMTYzNywxNjM4LDE2MzksMTY0MF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTU0OSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MTgxIn0seyJwYyI6WzE2NDEsMTY0MiwxNjQzXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNTUwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoxODEifSx7InBjIjpbMTY0NCwxNjQ1LDE2NDYsMTY0N10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTU1MSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MTgxIn0seyJwYyI6WzE2NDhdLCJlcnJvck1lc3NhZ2UiOiJ0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY2FsbCBVcGRhdGVBcHBsaWNhdGlvbiIsInRlYWwiOjE1NTQsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjE4MSJ9LHsicGMiOlsxNjQ5LDE2NTAsMTY1MV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTU1Nywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MTgxIn0seyJwYyI6WzE2NTIsMTY1M10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTU1OCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MTgxIn0seyJwYyI6WzE2NTQsMTY1NV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTU1OSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MTgxIn0seyJwYyI6WzE2NTZdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE1NjAsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjE4MSJ9LHsicGMiOlsxNjU3LDE2NThdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE1NjEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjE4MSJ9LHsicGMiOlsxNjU5LDE2NjBdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE1NjIsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjE4MSJ9LHsicGMiOlsxNjYxXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNTYzLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoxODEifSx7InBjIjpbMTY2MiwxNjYzLDE2NjRdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE1NjYsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjE4MSJ9LHsicGMiOlsxNjY1LDE2NjZdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE1NjcsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjE4MSJ9LHsicGMiOlsxNjY3LDE2NjhdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE1NjgsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjE4MSJ9LHsicGMiOlsxNjY5XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNTY5LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoxODEifSx7InBjIjpbMTY3MCwxNjcxXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNTcwLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoxODEifSx7InBjIjpbMTY3MiwxNjczXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNTcxLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoxODEifSx7InBjIjpbMTY3NF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTU3Miwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MTgxIn0seyJwYyI6WzE2NzVdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE1NzMsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjE4MSJ9LHsicGMiOlsxNjc2LDE2NzddLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE1NzQsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjE4MSJ9LHsicGMiOlsxNjc4XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNTc1LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoxODEifSx7InBjIjpbMTY3OV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTU3Niwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MTgxIn0seyJwYyI6WzE2ODBdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE1NzcsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjE4MSJ9LHsicGMiOlsxNjgxLDE2ODIsMTY4M10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTU3OCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MTgxIn0seyJwYyI6WzE2ODQsMTY4NV0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTU3OSwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MTgxIn0seyJwYyI6WzE2ODYsMTY4N10sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTU4MCwic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MTgxIn0seyJwYyI6WzE2ODhdLCJlcnJvck1lc3NhZ2UiOm51bGwsInRlYWwiOjE1ODEsInNvdXJjZSI6ImNvbnRyYWN0c1xcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjE4MSJ9LHsicGMiOlsxNjg5XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNTgyLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoxODEifSx7InBjIjpbMTY5MCwxNjkxXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNTgzLCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoxODEifSx7InBjIjpbMTY5MiwxNjkzXSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNTg0LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoxODEifSx7InBjIjpbMTY5NCwxNjk1XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNTg1LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoxODEifSx7InBjIjpbMTY5NiwxNjk3XSwiZXJyb3JNZXNzYWdlIjpudWxsLCJ0ZWFsIjoxNTg2LCJzb3VyY2UiOiJjb250cmFjdHNcXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoxODEifSx7InBjIjpbMTY5OF0sImVycm9yTWVzc2FnZSI6bnVsbCwidGVhbCI6MTU4Nywic291cmNlIjoiY29udHJhY3RzXFxCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MTgxIn1dLCJwY09mZnNldE1ldGhvZCI6Im5vbmUifSwiY2xlYXIiOnsic291cmNlSW5mbyI6W10sInBjT2Zmc2V0TWV0aG9kIjoibm9uZSJ9fSwic291cmNlIjp7ImFwcHJvdmFsIjoiSTNCeVlXZHRZU0IyWlhKemFXOXVJREV3Q21sdWRHTmliRzlqYXlBd0lERWdNeklnTWlBMk5DQXhNREF3TURBd01EQXdJRGd4TmlBMU1DQTFNZ3BpZVhSbFkySnNiMk5ySURCNElEQjRNREF3TURBd01EQXdNREF3TURBd01DQXdlREF3SURCNE5qa2dNSGcwTWlBd2VEY3pJREI0TVRVeFpqZGpOelVnTUhnek1ETXdNekF6TURNd016QXpNRE13TW1Rek1ETXdNekF6TURKa016QXpNRE13TXpBeVpETXdNekF6TURNd01tUXpNRE13TXpBek1ETXdNekF6TURNd016QXpNRE13TXpBZ01IZ3dNREF3TURBd01EYzNNelU1TkRBd0lEQjRNREF3TURBd01EQXpZamxoWTJFd01DQXdlRGN6TmpNM05qWTFOeklnTUhnMk5UWTJJREI0TURBMk9DQXdlREF3TURBZ01IZzJOUW9LTHk4Z1ZHaHBjeUJVUlVGTUlIZGhjeUJuWlc1bGNtRjBaV1FnWW5rZ1ZFVkJURk5qY21sd2RDQjJNQzR4TURZdU13b3ZMeUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2WVd4bmIzSmhibVJtYjNWdVpHRjBhVzl1TDFSRlFVeFRZM0pwY0hRS0NpOHZJRlJvYVhNZ1kyOXVkSEpoWTNRZ2FYTWdZMjl0Y0d4cFlXNTBJSGRwZEdnZ1lXNWtMMjl5SUdsdGNHeGxiV1Z1ZEhNZ2RHaGxJR1p2Ykd4dmQybHVaeUJCVWtOek9pQmJJRUZTUXpRZ1hRb0tMeThnVkdobElHWnZiR3h2ZDJsdVp5QjBaVzRnYkdsdVpYTWdiMllnVkVWQlRDQm9ZVzVrYkdVZ2FXNXBkR2xoYkNCd2NtOW5jbUZ0SUdac2IzY0tMeThnVkdocGN5QndZWFIwWlhKdUlHbHpJSFZ6WldRZ2RHOGdiV0ZyWlNCcGRDQmxZWE41SUdadmNpQmhibmx2Ym1VZ2RHOGdjR0Z5YzJVZ2RHaGxJSE4wWVhKMElHOW1JSFJvWlNCd2NtOW5jbUZ0SUdGdVpDQmtaWFJsY20xcGJtVWdhV1lnWVNCemNHVmphV1pwWXlCaFkzUnBiMjRnYVhNZ1lXeHNiM2RsWkFvdkx5QklaWEpsTENCaFkzUnBiMjRnY21WbVpYSnpJSFJ2SUhSb1pTQlBia052YlhCc1pYUmxJR2x1SUdOdmJXSnBibUYwYVc5dUlIZHBkR2dnZDJobGRHaGxjaUIwYUdVZ1lYQndJR2x6SUdKbGFXNW5JR055WldGMFpXUWdiM0lnWTJGc2JHVmtDaTh2SUVWMlpYSjVJSEJ2YzNOcFlteGxJR0ZqZEdsdmJpQm1iM0lnZEdocGN5QmpiMjUwY21GamRDQnBjeUJ5WlhCeVpYTmxiblJsWkNCcGJpQjBhR1VnYzNkcGRHTm9JSE4wWVhSbGJXVnVkQW92THlCSlppQjBhR1VnWVdOMGFXOXVJR2x6SUc1dmRDQnBiWEJzWlcxbGJuUmxaQ0JwYmlCMGFHVWdZMjl1ZEhKaFkzUXNJR2wwY3lCeVpYTndaV04wYVhabElHSnlZVzVqYUNCM2FXeHNJR0psSUNJcVRrOVVYMGxOVUV4RlRVVk9WRVZFSWlCM2FHbGphQ0JxZFhOMElHTnZiblJoYVc1eklDSmxjbklpQ25SNGJpQkJjSEJzYVdOaGRHbHZia2xFQ2lFS2NIVnphR2x1ZENBMkNpb0tkSGh1SUU5dVEyOXRjR3hsZEdsdmJnb3JDbk4zYVhSamFDQXFZMkZzYkY5T2IwOXdJQ3BPVDFSZlNVMVFURVZOUlU1VVJVUWdLazVQVkY5SlRWQk1SVTFGVGxSRlJDQXFUazlVWDBsTlVFeEZUVVZPVkVWRUlDcGpZV3hzWDFWd1pHRjBaVUZ3Y0d4cFkyRjBhVzl1SUNwT1QxUmZTVTFRVEVWTlJVNVVSVVFnS21OeVpXRjBaVjlPYjA5d0lDcE9UMVJmU1UxUVRFVk5SVTVVUlVRZ0trNVBWRjlKVFZCTVJVMUZUbFJGUkNBcVRrOVVYMGxOVUV4RlRVVk9WRVZFSUNwT1QxUmZTVTFRVEVWTlJVNVVSVVFnS2s1UFZGOUpUVkJNUlUxRlRsUkZSQW9LS2s1UFZGOUpUVkJNUlUxRlRsUkZSRG9LQ1M4dklGUm9aU0J5WlhGMVpYTjBaV1FnWVdOMGFXOXVJR2x6SUc1dmRDQnBiWEJzWlcxbGJuUmxaQ0JwYmlCMGFHbHpJR052Ym5SeVlXTjBMaUJCY21VZ2VXOTFJSFZ6YVc1bklIUm9aU0JqYjNKeVpXTjBJRTl1UTI5dGNHeGxkR1UvSUVScFpDQjViM1VnYzJWMElIbHZkWElnWVhCd0lFbEVQd29KWlhKeUNnb3ZMeUJqY21WaGRHVkJjSEJzYVdOaGRHbHZiaWdwZG05cFpBb3FZV0pwWDNKdmRYUmxYMk55WldGMFpVRndjR3hwWTJGMGFXOXVPZ29KTHk4Z1pYaGxZM1YwWlNCamNtVmhkR1ZCY0hCc2FXTmhkR2x2YmlncGRtOXBaQW9KWTJGc2JITjFZaUJqY21WaGRHVkJjSEJzYVdOaGRHbHZiZ29KYVc1MFl5QXhJQzh2SURFS0NYSmxkSFZ5YmdvS0x5OGdZM0psWVhSbFFYQndiR2xqWVhScGIyNG9LVG9nZG05cFpBb3ZMd292THlCSmJtbDBhV0ZzSUhObGRIVndDbU55WldGMFpVRndjR3hwWTJGMGFXOXVPZ29KY0hKdmRHOGdNQ0F3Q2dvSkx5OGdZMjl1ZEhKaFkzUnpYRUpwWVhSbFkwbGtaVzUwYVhSNVVISnZkbWxrWlhJdVlXeG5ieTUwY3pveU1EY0tDUzh2SUhSb2FYTXVkbVZ5YzJsdmJpNTJZV3gxWlNBOUlIWmxjbk5wYjI0S0NXSjVkR1ZqSURFd0lDOHZJQ0FpYzJOMlpYSWlDZ2x3ZFhOb1lubDBaWE1nSWtKSlFWUkZReTFKUkVWT1ZDMHdNUzB3TXkwd01TSUtDV0Z3Y0Y5bmJHOWlZV3hmY0hWMENnbHlaWFJ6ZFdJS0NpOHZJR0p2YjNSemRISmhjQ2gxYVc1ME5qUXNZV1JrY21WemN5eGhaR1J5WlhOekxHRmtaSEpsYzNNcGRtOXBaQW9xWVdKcFgzSnZkWFJsWDJKdmIzUnpkSEpoY0RvS0NTOHZJR1Z1WjJGblpXMWxiblJUWlhSMFpYSTZJR0ZrWkhKbGMzTUtDWFI0Ym1FZ1FYQndiR2xqWVhScGIyNUJjbWR6SURRS0NXUjFjQW9KYkdWdUNnbHBiblJqSURJZ0x5OGdNeklLQ1QwOUNnb0pMeThnWVhKbmRXMWxiblFnTUNBb1pXNW5ZV2RsYldWdWRGTmxkSFJsY2lrZ1ptOXlJR0p2YjNSemRISmhjQ0J0ZFhOMElHSmxJR0VnWVdSa2NtVnpjd29KWVhOelpYSjBDZ29KTHk4Z2RtVnlhV1pwWTJGMGFXOXVVMlYwZEdWeU9pQmhaR1J5WlhOekNnbDBlRzVoSUVGd2NHeHBZMkYwYVc5dVFYSm5jeUF6Q2dsa2RYQUtDV3hsYmdvSmFXNTBZeUF5SUM4dklETXlDZ2s5UFFvS0NTOHZJR0Z5WjNWdFpXNTBJREVnS0habGNtbG1hV05oZEdsdmJsTmxkSFJsY2lrZ1ptOXlJR0p2YjNSemRISmhjQ0J0ZFhOMElHSmxJR0VnWVdSa2NtVnpjd29KWVhOelpYSjBDZ29KTHk4Z1oyOTJaWEp1YjNJNklHRmtaSEpsYzNNS0NYUjRibUVnUVhCd2JHbGpZWFJwYjI1QmNtZHpJRElLQ1dSMWNBb0piR1Z1Q2dscGJuUmpJRElnTHk4Z016SUtDVDA5Q2dvSkx5OGdZWEpuZFcxbGJuUWdNaUFvWjI5MlpYSnViM0lwSUdadmNpQmliMjkwYzNSeVlYQWdiWFZ6ZENCaVpTQmhJR0ZrWkhKbGMzTUtDV0Z6YzJWeWRBb0tDUzh2SUdGd2NFSnBZWFJsWTBOdmJtWnBaMUJ5YjNacFpHVnlPaUIxYVc1ME5qUUtDWFI0Ym1FZ1FYQndiR2xqWVhScGIyNUJjbWR6SURFS0NXSjBiMmtLQ2drdkx5QmxlR1ZqZFhSbElHSnZiM1J6ZEhKaGNDaDFhVzUwTmpRc1lXUmtjbVZ6Y3l4aFpHUnlaWE56TEdGa1pISmxjM01wZG05cFpBb0pZMkZzYkhOMVlpQmliMjkwYzNSeVlYQUtDV2x1ZEdNZ01TQXZMeUF4Q2dseVpYUjFjbTRLQ2k4dklHSnZiM1J6ZEhKaGNDaGhjSEJDYVdGMFpXTkRiMjVtYVdkUWNtOTJhV1JsY2pvZ1FYQndTVVFzSUdkdmRtVnlibTl5T2lCQlpHUnlaWE56TENCMlpYSnBabWxqWVhScGIyNVRaWFIwWlhJNklFRmtaSEpsYzNNc0lHVnVaMkZuWlcxbGJuUlRaWFIwWlhJNklFRmtaSEpsYzNNcE9pQjJiMmxrQ2k4dkNpOHZJRUpwWVhSbFl5QmtaWEJzYjNseklITnBibWRzWlNCcFpHVnVkR2wwZVNCd2NtOTJhV1JsY2lCemJXRnlkQ0JqYjI1MGNtRmpkQW92THlCQWNHRnlZVzBnWVhCd1FtbGhkR1ZqUTI5dVptbG5VSEp2ZG1sa1pYSWdRbWxoZEdWaklHRnRiU0J3Y205MmFXUmxjZ3BpYjI5MGMzUnlZWEE2Q2dsd2NtOTBieUEwSURBS0Nna3ZMeUJRZFhOb0lHVnRjSFI1SUdKNWRHVnpJR0ZtZEdWeUlIUm9aU0JtY21GdFpTQndiMmx1ZEdWeUlIUnZJSEpsYzJWeWRtVWdjM0JoWTJVZ1ptOXlJR3h2WTJGc0lIWmhjbWxoWW14bGN3b0pZbmwwWldNZ01DQXZMeUF3ZUFvS0NTOHZJR052Ym5SeVlXTjBjMXhDYVdGMFpXTkpaR1Z1ZEdsMGVWQnliM1pwWkdWeUxtRnNaMjh1ZEhNNk1qSXdDZ2t2THlCaGMzTmxjblFvZEdocGN5NTBlRzR1YzJWdVpHVnlJRDA5UFNCMGFHbHpMbUZ3Y0M1amNtVmhkRzl5TENBblQyNXNlU0JqY21WaGRHOXlJRzltSUhSb1pTQmhjSEFnWTJGdUlITmxkQ0JwZENCMWNDY3BDZ2wwZUc0Z1UyVnVaR1Z5Q2dsMGVHNWhJRUZ3Y0d4cFkyRjBhVzl1Y3lBd0NnbGhjSEJmY0dGeVlXMXpYMmRsZENCQmNIQkRjbVZoZEc5eUNnbHdiM0FLQ1QwOUNnb0pMeThnVDI1c2VTQmpjbVZoZEc5eUlHOW1JSFJvWlNCaGNIQWdZMkZ1SUhObGRDQnBkQ0IxY0FvSllYTnpaWEowQ2dvSkx5OGdZMjl1ZEhKaFkzUnpYRUpwWVhSbFkwbGtaVzUwYVhSNVVISnZkbWxrWlhJdVlXeG5ieTUwY3pveU1qRUtDUzh2SUhSb2FYTXVZWEJ3UW1saGRHVmpRMjl1Wm1sblVISnZkbWxrWlhJdWRtRnNkV1VnUFNCaGNIQkNhV0YwWldORGIyNW1hV2RRY205MmFXUmxjZ29KWW5sMFpXTWdOQ0F2THlBZ0lrSWlDZ2xtY21GdFpWOWthV2NnTFRFZ0x5OGdZWEJ3UW1saGRHVmpRMjl1Wm1sblVISnZkbWxrWlhJNklFRndjRWxFQ2dsaGNIQmZaMnh2WW1Gc1gzQjFkQW9LQ1M4dklHTnZiblJ5WVdOMGMxeENhV0YwWldOSlpHVnVkR2wwZVZCeWIzWnBaR1Z5TG1Gc1oyOHVkSE02TWpJeUNna3ZMeUIwYUdsekxtZHZkbVZ5Ym05eUxuWmhiSFZsSUQwZ1oyOTJaWEp1YjNJS0NYQjFjMmhpZVhSbGN5QXdlRFkzSUM4dklDSm5JZ29KWm5KaGJXVmZaR2xuSUMweUlDOHZJR2R2ZG1WeWJtOXlPaUJCWkdSeVpYTnpDZ2xoY0hCZloyeHZZbUZzWDNCMWRBb0tDUzh2SUdOdmJuUnlZV04wYzF4Q2FXRjBaV05KWkdWdWRHbDBlVkJ5YjNacFpHVnlMbUZzWjI4dWRITTZNakl6Q2drdkx5QjBhR2x6TG5abGNtbG1hV05oZEdsdmJsTmxkSFJsY2k1MllXeDFaU0E5SUhabGNtbG1hV05oZEdsdmJsTmxkSFJsY2dvSmNIVnphR0o1ZEdWeklEQjROellnTHk4Z0luWWlDZ2xtY21GdFpWOWthV2NnTFRNZ0x5OGdkbVZ5YVdacFkyRjBhVzl1VTJWMGRHVnlPaUJCWkdSeVpYTnpDZ2xoY0hCZloyeHZZbUZzWDNCMWRBb0tDUzh2SUdOdmJuUnlZV04wYzF4Q2FXRjBaV05KWkdWdWRHbDBlVkJ5YjNacFpHVnlMbUZzWjI4dWRITTZNakkwQ2drdkx5QjBhR2x6TG1WdVoyRm5aVzFsYm5SVFpYUjBaWEl1ZG1Gc2RXVWdQU0JsYm1kaFoyVnRaVzUwVTJWMGRHVnlDZ2xpZVhSbFl5QXhOQ0F2THlBZ0ltVWlDZ2xtY21GdFpWOWthV2NnTFRRZ0x5OGdaVzVuWVdkbGJXVnVkRk5sZEhSbGNqb2dRV1JrY21WemN3b0pZWEJ3WDJkc2IySmhiRjl3ZFhRS0Nna3ZMeUJqYjI1MGNtRmpkSE5jUW1saGRHVmpTV1JsYm5ScGRIbFFjbTkyYVdSbGNpNWhiR2R2TG5Sek9qSXlOZ29KTHk4Z2NHRjFjMlZrSUQwZ1lYQndRbWxoZEdWalEyOXVabWxuVUhKdmRtbGtaWEl1WjJ4dlltRnNVM1JoZEdVb0ozTW5LU0JoY3lCMWFXNTBOalFLQ1daeVlXMWxYMlJwWnlBdE1TQXZMeUJoY0hCQ2FXRjBaV05EYjI1bWFXZFFjbTkyYVdSbGNqb2dRWEJ3U1VRS0NXSjVkR1ZqSURVZ0x5OGdJQ0p6SWdvSllYQndYMmRzYjJKaGJGOW5aWFJmWlhnS0Nna3ZMeUJuYkc5aVlXd2djM1JoZEdVZ2RtRnNkV1VnWkc5bGN5QnViM1FnWlhocGMzUTZJR0Z3Y0VKcFlYUmxZME52Ym1acFoxQnliM1pwWkdWeUxtZHNiMkpoYkZOMFlYUmxLQ2R6SnlrS0NXRnpjMlZ5ZEFvSlpuSmhiV1ZmWW5WeWVTQXdJQzh2SUhCaGRYTmxaRG9nZFdsdWREWTBDZ29KTHk4Z1kyOXVkSEpoWTNSelhFSnBZWFJsWTBsa1pXNTBhWFI1VUhKdmRtbGtaWEl1WVd4bmJ5NTBjem95TWpjS0NTOHZJR0Z6YzJWeWRDaHdZWFZ6WldRZ1BUMDlJREFzSUNkRlVsSmZVRUZWVTBWRUp5a0tDV1p5WVcxbFgyUnBaeUF3SUM4dklIQmhkWE5sWkRvZ2RXbHVkRFkwQ2dscGJuUmpJREFnTHk4Z01Bb0pQVDBLQ2drdkx5QkZVbEpmVUVGVlUwVkVDZ2xoYzNObGNuUUtDWEpsZEhOMVlnb0tMeThnZFhCa1lYUmxRWEJ3YkdsallYUnBiMjRvZFdsdWREWTBMR0o1ZEdWYlhTbDJiMmxrQ2lwaFltbGZjbTkxZEdWZmRYQmtZWFJsUVhCd2JHbGpZWFJwYjI0NkNna3ZMeUJ1WlhkV1pYSnphVzl1T2lCaWVYUmxXMTBLQ1hSNGJtRWdRWEJ3YkdsallYUnBiMjVCY21keklESUtDV1Y0ZEhKaFkzUWdNaUF3Q2dvSkx5OGdZWEJ3UW1saGRHVmpRMjl1Wm1sblVISnZkbWxrWlhJNklIVnBiblEyTkFvSmRIaHVZU0JCY0hCc2FXTmhkR2x2YmtGeVozTWdNUW9KWW5SdmFRb0tDUzh2SUdWNFpXTjFkR1VnZFhCa1lYUmxRWEJ3YkdsallYUnBiMjRvZFdsdWREWTBMR0o1ZEdWYlhTbDJiMmxrQ2dsallXeHNjM1ZpSUhWd1pHRjBaVUZ3Y0d4cFkyRjBhVzl1Q2dscGJuUmpJREVnTHk4Z01Rb0pjbVYwZFhKdUNnb3ZMeUIxY0dSaGRHVkJjSEJzYVdOaGRHbHZiaWhoY0hCQ2FXRjBaV05EYjI1bWFXZFFjbTkyYVdSbGNqb2dRWEJ3U1VRc0lHNWxkMVpsY25OcGIyNDZJR0o1ZEdWektUb2dkbTlwWkFvdkx3b3ZMeUJoWkdSeVpYTnpWV1J3WVhSbGNpQm1jbTl0SUdkc2IySmhiQ0JpYVdGMFpXTWdZMjl1Wm1sbmRYSmhkR2x2YmlCcGN5QmhiR3h2ZDJWa0lIUnZJSFZ3WkdGMFpTQmhjSEJzYVdOaGRHbHZiZ3AxY0dSaGRHVkJjSEJzYVdOaGRHbHZiam9LQ1hCeWIzUnZJRElnTUFvS0NTOHZJRkIxYzJnZ1pXMXdkSGtnWW5sMFpYTWdZV1owWlhJZ2RHaGxJR1p5WVcxbElIQnZhVzUwWlhJZ2RHOGdjbVZ6WlhKMlpTQnpjR0ZqWlNCbWIzSWdiRzlqWVd3Z2RtRnlhV0ZpYkdWekNnbGllWFJsWXlBd0lDOHZJREI0Q2dsa2RYQUtDZ2t2THlCamIyNTBjbUZqZEhOY1FtbGhkR1ZqU1dSbGJuUnBkSGxRY205MmFXUmxjaTVoYkdkdkxuUnpPakl6TkFvSkx5OGdZWE56WlhKMEtHRndjRUpwWVhSbFkwTnZibVpwWjFCeWIzWnBaR1Z5SUQwOVBTQjBhR2x6TG1Gd2NFSnBZWFJsWTBOdmJtWnBaMUJ5YjNacFpHVnlMblpoYkhWbExDQW5RMjl1Wm1sbmRYSmhkR2x2YmlCaGNIQWdaRzlsY3lCdWIzUWdiV0YwWTJnbktRb0pabkpoYldWZlpHbG5JQzB4SUM4dklHRndjRUpwWVhSbFkwTnZibVpwWjFCeWIzWnBaR1Z5T2lCQmNIQkpSQW9KWW5sMFpXTWdOQ0F2THlBZ0lrSWlDZ2xoY0hCZloyeHZZbUZzWDJkbGRBb0pQVDBLQ2drdkx5QkRiMjVtYVdkMWNtRjBhVzl1SUdGd2NDQmtiMlZ6SUc1dmRDQnRZWFJqYUFvSllYTnpaWEowQ2dvSkx5OGdZMjl1ZEhKaFkzUnpYRUpwWVhSbFkwbGtaVzUwYVhSNVVISnZkbWxrWlhJdVlXeG5ieTUwY3pveU16VUtDUzh2SUdGa1pISmxjM05WWkhCaGRHVnlJRDBnWVhCd1FtbGhkR1ZqUTI5dVptbG5VSEp2ZG1sa1pYSXVaMnh2WW1Gc1UzUmhkR1VvSjNVbktTQmhjeUJCWkdSeVpYTnpDZ2xtY21GdFpWOWthV2NnTFRFZ0x5OGdZWEJ3UW1saGRHVmpRMjl1Wm1sblVISnZkbWxrWlhJNklFRndjRWxFQ2dsd2RYTm9ZbmwwWlhNZ01IZzNOU0F2THlBaWRTSUtDV0Z3Y0Y5bmJHOWlZV3hmWjJWMFgyVjRDZ29KTHk4Z1oyeHZZbUZzSUhOMFlYUmxJSFpoYkhWbElHUnZaWE1nYm05MElHVjRhWE4wT2lCaGNIQkNhV0YwWldORGIyNW1hV2RRY205MmFXUmxjaTVuYkc5aVlXeFRkR0YwWlNnbmRTY3BDZ2xoYzNObGNuUUtDV1p5WVcxbFgySjFjbmtnTUNBdkx5QmhaR1J5WlhOelZXUndZWFJsY2pvZ1lXUmtjbVZ6Y3dvS0NTOHZJR052Ym5SeVlXTjBjMXhDYVdGMFpXTkpaR1Z1ZEdsMGVWQnliM1pwWkdWeUxtRnNaMjh1ZEhNNk1qTTJDZ2t2THlCaGMzTmxjblFvZEdocGN5NTBlRzR1YzJWdVpHVnlJRDA5UFNCaFpHUnlaWE56VldSd1lYUmxjaXdnSjA5dWJIa2dZV1JrY21WemMxVmtjR0YwWlhJZ2MyVjBkWEFnYVc0Z2RHaGxJR052Ym1acFp5QmpZVzRnZFhCa1lYUmxJR0Z3Y0d4cFkyRjBhVzl1SnlrS0NYUjRiaUJUWlc1a1pYSUtDV1p5WVcxbFgyUnBaeUF3SUM4dklHRmtaSEpsYzNOVlpIQmhkR1Z5T2lCaFpHUnlaWE56Q2drOVBRb0tDUzh2SUU5dWJIa2dZV1JrY21WemMxVmtjR0YwWlhJZ2MyVjBkWEFnYVc0Z2RHaGxJR052Ym1acFp5QmpZVzRnZFhCa1lYUmxJR0Z3Y0d4cFkyRjBhVzl1Q2dsaGMzTmxjblFLQ2drdkx5QmpiMjUwY21GamRITmNRbWxoZEdWalNXUmxiblJwZEhsUWNtOTJhV1JsY2k1aGJHZHZMblJ6T2pJek53b0pMeThnY0dGMWMyVmtJRDBnWVhCd1FtbGhkR1ZqUTI5dVptbG5VSEp2ZG1sa1pYSXVaMnh2WW1Gc1UzUmhkR1VvSjNNbktTQmhjeUIxYVc1ME5qUUtDV1p5WVcxbFgyUnBaeUF0TVNBdkx5QmhjSEJDYVdGMFpXTkRiMjVtYVdkUWNtOTJhV1JsY2pvZ1FYQndTVVFLQ1dKNWRHVmpJRFVnTHk4Z0lDSnpJZ29KWVhCd1gyZHNiMkpoYkY5blpYUmZaWGdLQ2drdkx5Qm5iRzlpWVd3Z2MzUmhkR1VnZG1Gc2RXVWdaRzlsY3lCdWIzUWdaWGhwYzNRNklHRndjRUpwWVhSbFkwTnZibVpwWjFCeWIzWnBaR1Z5TG1kc2IySmhiRk4wWVhSbEtDZHpKeWtLQ1dGemMyVnlkQW9KWm5KaGJXVmZZblZ5ZVNBeElDOHZJSEJoZFhObFpEb2dkV2x1ZERZMENnb0pMeThnWTI5dWRISmhZM1J6WEVKcFlYUmxZMGxrWlc1MGFYUjVVSEp2ZG1sa1pYSXVZV3huYnk1MGN6b3lNemdLQ1M4dklHRnpjMlZ5ZENod1lYVnpaV1FnUFQwOUlEQXNJQ2RGVWxKZlVFRlZVMFZFSnlrS0NXWnlZVzFsWDJScFp5QXhJQzh2SUhCaGRYTmxaRG9nZFdsdWREWTBDZ2xwYm5SaklEQWdMeThnTUFvSlBUMEtDZ2t2THlCRlVsSmZVRUZWVTBWRUNnbGhjM05sY25RS0Nna3ZMeUJqYjI1MGNtRmpkSE5jUW1saGRHVmpTV1JsYm5ScGRIbFFjbTkyYVdSbGNpNWhiR2R2TG5Sek9qSXpPUW9KTHk4Z2RHaHBjeTUyWlhKemFXOXVMblpoYkhWbElEMGdibVYzVm1WeWMybHZiZ29KWW5sMFpXTWdNVEFnTHk4Z0lDSnpZM1psY2lJS0NXWnlZVzFsWDJScFp5QXRNaUF2THlCdVpYZFdaWEp6YVc5dU9pQmllWFJsY3dvSllYQndYMmRzYjJKaGJGOXdkWFFLQ1hKbGRITjFZZ29LTHk4Z2MyVnNabEpsWjJsemRISmhkR2x2YmloaFpHUnlaWE56TENoMWFXNTBOalFzWW05dmJDeDFhVzUwTmpRc2RXbHVkRFkwTEhWcGJuUTJOQ3gxYVc1ME5qUXNkV2x1ZERZMExHSnZiMndzYzNSeWFXNW5MSE4wY21sdVp5eDFhVzUwTmpRc2RXbHVkRFkwTEhWcGJuUTJOQ3gxYVc1ME5qUXNkV2x1ZERZMExIVnBiblEyTkN4aWIyOXNLU2wyYjJsa0NpcGhZbWxmY205MWRHVmZjMlZzWmxKbFoybHpkSEpoZEdsdmJqb0tDUzh2SUdsdVptODZJQ2gxYVc1ME5qUXNZbTl2YkN4MWFXNTBOalFzZFdsdWREWTBMSFZwYm5RMk5DeDFhVzUwTmpRc2RXbHVkRFkwTEdKdmIyd3NjM1J5YVc1bkxITjBjbWx1Wnl4MWFXNTBOalFzZFdsdWREWTBMSFZwYm5RMk5DeDFhVzUwTmpRc2RXbHVkRFkwTEhWcGJuUTJOQ3hpYjI5c0tRb0pkSGh1WVNCQmNIQnNhV05oZEdsdmJrRnlaM01nTWdvS0NTOHZJSFZ6WlhJNklHRmtaSEpsYzNNS0NYUjRibUVnUVhCd2JHbGpZWFJwYjI1QmNtZHpJREVLQ1dSMWNBb0piR1Z1Q2dscGJuUmpJRElnTHk4Z016SUtDVDA5Q2dvSkx5OGdZWEpuZFcxbGJuUWdNU0FvZFhObGNpa2dabTl5SUhObGJHWlNaV2RwYzNSeVlYUnBiMjRnYlhWemRDQmlaU0JoSUdGa1pISmxjM01LQ1dGemMyVnlkQW9LQ1M4dklHVjRaV04xZEdVZ2MyVnNabEpsWjJsemRISmhkR2x2YmloaFpHUnlaWE56TENoMWFXNTBOalFzWW05dmJDeDFhVzUwTmpRc2RXbHVkRFkwTEhWcGJuUTJOQ3gxYVc1ME5qUXNkV2x1ZERZMExHSnZiMndzYzNSeWFXNW5MSE4wY21sdVp5eDFhVzUwTmpRc2RXbHVkRFkwTEhWcGJuUTJOQ3gxYVc1ME5qUXNkV2x1ZERZMExIVnBiblEyTkN4aWIyOXNLU2wyYjJsa0NnbGpZV3hzYzNWaUlITmxiR1pTWldkcGMzUnlZWFJwYjI0S0NXbHVkR01nTVNBdkx5QXhDZ2x5WlhSMWNtNEtDaTh2SUhObGJHWlNaV2RwYzNSeVlYUnBiMjRvZFhObGNqb2dRV1JrY21WemN5d2dhVzVtYnpvZ1NXUmxiblJwZEhsSmJtWnZLVG9nZG05cFpBcHpaV3htVW1WbmFYTjBjbUYwYVc5dU9nb0pjSEp2ZEc4Z01pQXdDZ29KTHk4Z1kyOXVkSEpoWTNSelhFSnBZWFJsWTBsa1pXNTBhWFI1VUhKdmRtbGtaWEl1WVd4bmJ5NTBjem95TkRNS0NTOHZJR0Z6YzJWeWRDZ2hkR2hwY3k1cFpHVnVkR2wwYVdWektIVnpaWElwTG1WNGFYTjBjeXdnSjFObGJHWWdjbVZuYVhOMGNtRjBhVzl1SUdOaGJtNXZkQ0JpWlNCbGVHVmpkWFJsWkNCcFppQmhaR1J5WlhOeklHbHpJR0ZzY21WaFpIa2djbVZuYVhOMFpYSmxaQ2NwQ2dsaWVYUmxZeUF6SUM4dklDQWlhU0lLQ1daeVlXMWxYMlJwWnlBdE1TQXZMeUIxYzJWeU9pQkJaR1J5WlhOekNnbGpiMjVqWVhRS0NXSnZlRjlzWlc0S0NYTjNZWEFLQ1hCdmNBb0pJUW9LQ1M4dklGTmxiR1lnY21WbmFYTjBjbUYwYVc5dUlHTmhibTV2ZENCaVpTQmxlR1ZqZFhSbFpDQnBaaUJoWkdSeVpYTnpJR2x6SUdGc2NtVmhaSGtnY21WbmFYTjBaWEpsWkFvSllYTnpaWEowQ2dvSkx5OGdZMjl1ZEhKaFkzUnpYRUpwWVhSbFkwbGtaVzUwYVhSNVVISnZkbWxrWlhJdVlXeG5ieTUwY3pveU5EWUtDUzh2SUdGemMyVnlkQ2hwYm1adkxuWmxjbWxtYVdOaGRHbHZibE4wWVhSMWN5QTlQVDBnTVN3Z0oxWmxjbWxtYVdOaGRHbHZiaUJ6ZEdGMGRYTWdiWFZ6ZENCaVpTQmxiWEIwZVNjcENnbG1jbUZ0WlY5a2FXY2dMVElnTHk4Z2FXNW1iem9nU1dSbGJuUnBkSGxKYm1adkNnbHpkRzl5WlNBeU5UVWdMeThnWm5Wc2JDQmhjbkpoZVFvSmJHOWhaQ0F5TlRVZ0x5OGdablZzYkNCaGNuSmhlUW9KWlhoMGNtRmpkQ0EwTVNBNENnbGlkRzlwQ2dscGJuUmpJREVnTHk4Z01Rb0pQVDBLQ2drdkx5QldaWEpwWm1sallYUnBiMjRnYzNSaGRIVnpJRzExYzNRZ1ltVWdaVzF3ZEhrS0NXRnpjMlZ5ZEFvS0NTOHZJR052Ym5SeVlXTjBjMXhDYVdGMFpXTkpaR1Z1ZEdsMGVWQnliM1pwWkdWeUxtRnNaMjh1ZEhNNk1qUTRDZ2t2THlCaGMzTmxjblFvYVc1bWJ5NTJaWEpwWm1sallYUnBiMjVEYkdGemN5QTlQVDBnTUN3Z0ozWmxjbWxtYVdOaGRHbHZia05zWVhOeklHMTFjM1FnWlhGMVlXd2dkRzhnTUNjcENnbG1jbUZ0WlY5a2FXY2dMVElnTHk4Z2FXNW1iem9nU1dSbGJuUnBkSGxKYm1adkNnbHpkRzl5WlNBeU5UVWdMeThnWm5Wc2JDQmhjbkpoZVFvSmJHOWhaQ0F5TlRVZ0x5OGdablZzYkNCaGNuSmhlUW9KWlhoMGNtRmpkQ0F3SURnS0NXSjBiMmtLQ1dsdWRHTWdNQ0F2THlBd0NnazlQUW9LQ1M4dklIWmxjbWxtYVdOaGRHbHZia05zWVhOeklHMTFjM1FnWlhGMVlXd2dkRzhnTUFvSllYTnpaWEowQ2dvSkx5OGdZMjl1ZEhKaFkzUnpYRUpwWVhSbFkwbGtaVzUwYVhSNVVISnZkbWxrWlhJdVlXeG5ieTUwY3pveU5URUtDUzh2SUdGemMyVnlkQ2dLQ1M4dklDQWdJQ0FnSUdsdVptOHVjR1Z5YzI5dVZWVkpSQ0E5UFQwZ0p6QXdNREF3TURBd0xUQXdNREF0TURBd01DMHdNREF3TFRBd01EQXdNREF3TURBd01DY3NDZ2t2THlBZ0lDQWdJQ0FuY0dWeWMyOXVWVlZKUkNCdGRYTjBJR1Z4ZFdGc0lIUnZJREF3TURBd01EQXdMVEF3TURBdE1EQXdNQzB3TURBd0xUQXdNREF3TURBd01EQXdNQ2NLQ1M4dklDQWdJQ0FwQ2dsbWNtRnRaVjlrYVdjZ0xUSWdMeThnYVc1bWJ6b2dTV1JsYm5ScGRIbEpibVp2Q2dsemRHOXlaU0F5TlRVZ0x5OGdablZzYkNCaGNuSmhlUW9KYVc1MFl5QTNJQzh2SURVd0NnbHNiMkZrSURJMU5TQXZMeUJtZFd4c0lHRnljbUY1Q2dsc2IyRmtJREkxTlNBdkx5Qm1kV3hzSUdGeWNtRjVDZ2wxYm1OdmRtVnlJRElLQ1dWNGRISmhZM1JmZFdsdWRERTJDZ2xrZFhBZ0x5OGdaSFZ3YkdsallYUmxJSE4wWVhKMElHOW1JR1ZzWlcxbGJuUUtDV3h2WVdRZ01qVTFJQzh2SUdaMWJHd2dZWEp5WVhrS0NYTjNZWEFLQ1dWNGRISmhZM1JmZFdsdWRERTJJQzh2SUdkbGRDQnVkVzFpWlhJZ2IyWWdaV3hsYldWdWRITUtDV2x1ZEdNZ01TQXZMeUFnWjJWMElIUjVjR1VnYkdWdVozUm9DZ2txSUM4dklHMTFiSFJwY0d4NUlHSjVJSFI1Y0dVZ2JHVnVaM1JvQ2dscGJuUmpJRE1nTHk4Z01nb0pLeUF2THlCaFpHUWdkSGR2SUdadmNpQnNaVzVuZEdnS0NXVjRkSEpoWTNRekNnbGxlSFJ5WVdOMElESWdNQW9KWW5sMFpXTWdOeUF2THlBZ0lqQXdNREF3TURBd0xUQXdNREF0TURBd01DMHdNREF3TFRBd01EQXdNREF3TURBd01DSUtDVDA5Q2dvSkx5OGdjR1Z5YzI5dVZWVkpSQ0J0ZFhOMElHVnhkV0ZzSUhSdklEQXdNREF3TURBd0xUQXdNREF0TURBd01DMHdNREF3TFRBd01EQXdNREF3TURBd01Bb0pZWE56WlhKMENnb0pMeThnWTI5dWRISmhZM1J6WEVKcFlYUmxZMGxrWlc1MGFYUjVVSEp2ZG1sa1pYSXVZV3huYnk1MGN6b3lOVFlLQ1M4dklHRnpjMlZ5ZENnS0NTOHZJQ0FnSUNBZ0lHbHVabTh1YkdWbllXeEZiblJwZEhsVlZVbEVJRDA5UFNBbk1EQXdNREF3TURBdE1EQXdNQzB3TURBd0xUQXdNREF0TURBd01EQXdNREF3TURBd0p5d0tDUzh2SUNBZ0lDQWdJQ2RzWldkaGJFVnVkR2wwZVZWVlNVUWdiWFZ6ZENCbGNYVmhiQ0IwYnlBd01EQXdNREF3TUMwd01EQXdMVEF3TURBdE1EQXdNQzB3TURBd01EQXdNREF3TURBbkNna3ZMeUFnSUNBZ0tRb0pabkpoYldWZlpHbG5JQzB5SUM4dklHbHVabTg2SUVsa1pXNTBhWFI1U1c1bWJ3b0pjM1J2Y21VZ01qVTFJQzh2SUdaMWJHd2dZWEp5WVhrS0NXbHVkR01nT0NBdkx5QTFNZ29KYkc5aFpDQXlOVFVnTHk4Z1puVnNiQ0JoY25KaGVRb0piRzloWkNBeU5UVWdMeThnWm5Wc2JDQmhjbkpoZVFvSmRXNWpiM1psY2lBeUNnbGxlSFJ5WVdOMFgzVnBiblF4TmdvSlpIVndJQzh2SUdSMWNHeHBZMkYwWlNCemRHRnlkQ0J2WmlCbGJHVnRaVzUwQ2dsc2IyRmtJREkxTlNBdkx5Qm1kV3hzSUdGeWNtRjVDZ2x6ZDJGd0NnbGxlSFJ5WVdOMFgzVnBiblF4TmlBdkx5Qm5aWFFnYm5WdFltVnlJRzltSUdWc1pXMWxiblJ6Q2dscGJuUmpJREVnTHk4Z0lHZGxkQ0IwZVhCbElHeGxibWQwYUFvSktpQXZMeUJ0ZFd4MGFYQnNlU0JpZVNCMGVYQmxJR3hsYm1kMGFBb0phVzUwWXlBeklDOHZJRElLQ1NzZ0x5OGdZV1JrSUhSM2J5Qm1iM0lnYkdWdVozUm9DZ2xsZUhSeVlXTjBNd29KWlhoMGNtRmpkQ0F5SURBS0NXSjVkR1ZqSURjZ0x5OGdJQ0l3TURBd01EQXdNQzB3TURBd0xUQXdNREF0TURBd01DMHdNREF3TURBd01EQXdNREFpQ2drOVBRb0tDUzh2SUd4bFoyRnNSVzUwYVhSNVZWVkpSQ0J0ZFhOMElHVnhkV0ZzSUhSdklEQXdNREF3TURBd0xUQXdNREF0TURBd01DMHdNREF3TFRBd01EQXdNREF3TURBd01Bb0pZWE56WlhKMENnb0pMeThnWTI5dWRISmhZM1J6WEVKcFlYUmxZMGxrWlc1MGFYUjVVSEp2ZG1sa1pYSXVZV3huYnk1MGN6b3lOakVLQ1M4dklHRnpjMlZ5ZENocGJtWnZMbUpwWVhSbFkwVnVaMkZuWlcxbGJuUlFiMmx1ZEhNZ1BUMDlJREFzSUNkaWFXRjBaV05GYm1kaFoyVnRaVzUwVUc5cGJuUnpJRzExYzNRZ1pYRjFZV3dnZEc4Z01DY3BDZ2xtY21GdFpWOWthV2NnTFRJZ0x5OGdhVzVtYnpvZ1NXUmxiblJwZEhsSmJtWnZDZ2x6ZEc5eVpTQXlOVFVnTHk4Z1puVnNiQ0JoY25KaGVRb0piRzloWkNBeU5UVWdMeThnWm5Wc2JDQmhjbkpoZVFvSlpYaDBjbUZqZENBMU5DQTRDZ2xpZEc5cENnbHBiblJqSURBZ0x5OGdNQW9KUFQwS0Nna3ZMeUJpYVdGMFpXTkZibWRoWjJWdFpXNTBVRzlwYm5SeklHMTFjM1FnWlhGMVlXd2dkRzhnTUFvSllYTnpaWEowQ2dvSkx5OGdZMjl1ZEhKaFkzUnpYRUpwWVhSbFkwbGtaVzUwYVhSNVVISnZkbWxrWlhJdVlXeG5ieTUwY3pveU5qTUtDUzh2SUdGemMyVnlkQ2hwYm1adkxtSnBZWFJsWTBWdVoyRm5aVzFsYm5SU1lXNXJJRDA5UFNBd0xDQW5ZbWxoZEdWalJXNW5ZV2RsYldWdWRGSmhibXNnYlhWemRDQmxjWFZoYkNCMGJ5QXdKeWtLQ1daeVlXMWxYMlJwWnlBdE1pQXZMeUJwYm1adk9pQkpaR1Z1ZEdsMGVVbHVabThLQ1hOMGIzSmxJREkxTlNBdkx5Qm1kV3hzSUdGeWNtRjVDZ2xzYjJGa0lESTFOU0F2THlCbWRXeHNJR0Z5Y21GNUNnbGxlSFJ5WVdOMElEWXlJRGdLQ1dKMGIya0tDV2x1ZEdNZ01DQXZMeUF3Q2drOVBRb0tDUzh2SUdKcFlYUmxZMFZ1WjJGblpXMWxiblJTWVc1cklHMTFjM1FnWlhGMVlXd2dkRzhnTUFvSllYTnpaWEowQ2dvSkx5OGdZMjl1ZEhKaFkzUnpYRUpwWVhSbFkwbGtaVzUwYVhSNVVISnZkbWxrWlhJdVlXeG5ieTUwY3pveU5qVUtDUzh2SUdGemMyVnlkQ2hwYm1adkxtRjJiVVZ1WjJGblpXMWxiblJRYjJsdWRITWdQVDA5SURBc0lDZGhkbTFGYm1kaFoyVnRaVzUwVUc5cGJuUnpJRzExYzNRZ1pYRjFZV3dnZEc4Z01DY3BDZ2xtY21GdFpWOWthV2NnTFRJZ0x5OGdhVzVtYnpvZ1NXUmxiblJwZEhsSmJtWnZDZ2x6ZEc5eVpTQXlOVFVnTHk4Z1puVnNiQ0JoY25KaGVRb0piRzloWkNBeU5UVWdMeThnWm5Wc2JDQmhjbkpoZVFvSlpYaDBjbUZqZENBM01DQTRDZ2xpZEc5cENnbHBiblJqSURBZ0x5OGdNQW9KUFQwS0Nna3ZMeUJoZG0xRmJtZGhaMlZ0Wlc1MFVHOXBiblJ6SUcxMWMzUWdaWEYxWVd3Z2RHOGdNQW9KWVhOelpYSjBDZ29KTHk4Z1kyOXVkSEpoWTNSelhFSnBZWFJsWTBsa1pXNTBhWFI1VUhKdmRtbGtaWEl1WVd4bmJ5NTBjem95TmpjS0NTOHZJR0Z6YzJWeWRDaHBibVp2TG1GMmJVVnVaMkZuWlcxbGJuUlNZVzVySUQwOVBTQXdMQ0FuWVhadFJXNW5ZV2RsYldWdWRGSmhibXNnYlhWemRDQmxjWFZoYkNCMGJ5QXdKeWtLQ1daeVlXMWxYMlJwWnlBdE1pQXZMeUJwYm1adk9pQkpaR1Z1ZEdsMGVVbHVabThLQ1hOMGIzSmxJREkxTlNBdkx5Qm1kV3hzSUdGeWNtRjVDZ2xzYjJGa0lESTFOU0F2THlCbWRXeHNJR0Z5Y21GNUNnbGxlSFJ5WVdOMElEYzRJRGdLQ1dKMGIya0tDV2x1ZEdNZ01DQXZMeUF3Q2drOVBRb0tDUzh2SUdGMmJVVnVaMkZuWlcxbGJuUlNZVzVySUcxMWMzUWdaWEYxWVd3Z2RHOGdNQW9KWVhOelpYSjBDZ29KTHk4Z1kyOXVkSEpoWTNSelhFSnBZWFJsWTBsa1pXNTBhWFI1VUhKdmRtbGtaWEl1WVd4bmJ5NTBjem95TmprS0NTOHZJR0Z6YzJWeWRDaHBibVp2TG5SeVlXUnBibWRGYm1kaFoyVnRaVzUwVUc5cGJuUnpJRDA5UFNBd0xDQW5kSEpoWkdsdVowVnVaMkZuWlcxbGJuUlFiMmx1ZEhNZ2JYVnpkQ0JsY1hWaGJDQjBieUF3SnlrS0NXWnlZVzFsWDJScFp5QXRNaUF2THlCcGJtWnZPaUJKWkdWdWRHbDBlVWx1Wm04S0NYTjBiM0psSURJMU5TQXZMeUJtZFd4c0lHRnljbUY1Q2dsc2IyRmtJREkxTlNBdkx5Qm1kV3hzSUdGeWNtRjVDZ2xsZUhSeVlXTjBJRGcySURnS0NXSjBiMmtLQ1dsdWRHTWdNQ0F2THlBd0NnazlQUW9LQ1M4dklIUnlZV1JwYm1kRmJtZGhaMlZ0Wlc1MFVHOXBiblJ6SUcxMWMzUWdaWEYxWVd3Z2RHOGdNQW9KWVhOelpYSjBDZ29KTHk4Z1kyOXVkSEpoWTNSelhFSnBZWFJsWTBsa1pXNTBhWFI1VUhKdmRtbGtaWEl1WVd4bmJ5NTBjem95TnpFS0NTOHZJR0Z6YzJWeWRDaHBibVp2TG5SeVlXUnBibWRGYm1kaFoyVnRaVzUwVW1GdWF5QTlQVDBnTUN3Z0ozUnlZV1JwYm1kRmJtZGhaMlZ0Wlc1MFVtRnVheUJ0ZFhOMElHVnhkV0ZzSUhSdklEQW5LUW9KWm5KaGJXVmZaR2xuSUMweUlDOHZJR2x1Wm04NklFbGtaVzUwYVhSNVNXNW1id29KYzNSdmNtVWdNalUxSUM4dklHWjFiR3dnWVhKeVlYa0tDV3h2WVdRZ01qVTFJQzh2SUdaMWJHd2dZWEp5WVhrS0NXVjRkSEpoWTNRZ09UUWdPQW9KWW5SdmFRb0phVzUwWXlBd0lDOHZJREFLQ1QwOUNnb0pMeThnZEhKaFpHbHVaMFZ1WjJGblpXMWxiblJTWVc1cklHMTFjM1FnWlhGMVlXd2dkRzhnTUFvSllYTnpaWEowQ2dvSkx5OGdZMjl1ZEhKaFkzUnpYRUpwWVhSbFkwbGtaVzUwYVhSNVVISnZkbWxrWlhJdVlXeG5ieTUwY3pveU56TUtDUzh2SUdGemMyVnlkQ2hwYm1adkxtbHpURzlqYTJWa0lEMDlQU0JtWVd4elpTd2dKMmx6VEc5amEyVmtJRzExYzNRZ1pYRjFZV3dnZEc4Z1ptRnNjMlVuS1FvSlpuSmhiV1ZmWkdsbklDMHlJQzh2SUdsdVptODZJRWxrWlc1MGFYUjVTVzVtYndvSmMzUnZjbVVnTWpVMUlDOHZJR1oxYkd3Z1lYSnlZWGtLQ1d4dllXUWdNalUxSUM4dklHWjFiR3dnWVhKeVlYa0tDV2x1ZEdNZ05DQXZMeUEyTkFvSloyVjBZbWwwQ2dscGJuUmpJREFnTHk4Z01Bb0pQVDBLQ2drdkx5QnBjMHh2WTJ0bFpDQnRkWE4wSUdWeGRXRnNJSFJ2SUdaaGJITmxDZ2xoYzNObGNuUUtDZ2t2THlCamIyNTBjbUZqZEhOY1FtbGhkR1ZqU1dSbGJuUnBkSGxRY205MmFXUmxjaTVoYkdkdkxuUnpPakkzTlFvSkx5OGdZWE56WlhKMEtHbHVabTh1YTNsalJYaHdhWEpoZEdsdmJpQTlQVDBnTUN3Z0oydDVZMFY0Y0dseVlYUnBiMjRnYlhWemRDQmxjWFZoYkNCMGJ5QXdKeWtLQ1daeVlXMWxYMlJwWnlBdE1pQXZMeUJwYm1adk9pQkpaR1Z1ZEdsMGVVbHVabThLQ1hOMGIzSmxJREkxTlNBdkx5Qm1kV3hzSUdGeWNtRjVDZ2xzYjJGa0lESTFOU0F2THlCbWRXeHNJR0Z5Y21GNUNnbGxlSFJ5WVdOMElESTFJRGdLQ1dKMGIya0tDV2x1ZEdNZ01DQXZMeUF3Q2drOVBRb0tDUzh2SUd0NVkwVjRjR2x5WVhScGIyNGdiWFZ6ZENCbGNYVmhiQ0IwYnlBd0NnbGhjM05sY25RS0Nna3ZMeUJqYjI1MGNtRmpkSE5jUW1saGRHVmpTV1JsYm5ScGRIbFFjbTkyYVdSbGNpNWhiR2R2TG5Sek9qSTNOd29KTHk4Z1lYTnpaWEowS0dsdVptOHVhVzUyWlhOMGIzSkdiM0pGZUhCcGNtRjBhVzl1SUQwOVBTQXdMQ0FuYVc1MlpYTjBiM0pHYjNKRmVIQnBjbUYwYVc5dUlHMTFjM1FnWlhGMVlXd2dkRzhnTUNjcENnbG1jbUZ0WlY5a2FXY2dMVElnTHk4Z2FXNW1iem9nU1dSbGJuUnBkSGxKYm1adkNnbHpkRzl5WlNBeU5UVWdMeThnWm5Wc2JDQmhjbkpoZVFvSmJHOWhaQ0F5TlRVZ0x5OGdablZzYkNCaGNuSmhlUW9KWlhoMGNtRmpkQ0F6TXlBNENnbGlkRzlwQ2dscGJuUmpJREFnTHk4Z01Bb0pQVDBLQ2drdkx5QnBiblpsYzNSdmNrWnZja1Y0Y0dseVlYUnBiMjRnYlhWemRDQmxjWFZoYkNCMGJ5QXdDZ2xoYzNObGNuUUtDZ2t2THlCamIyNTBjbUZqZEhOY1FtbGhkR1ZqU1dSbGJuUnBkSGxRY205MmFXUmxjaTVoYkdkdkxuUnpPakkzT1FvSkx5OGdZWE56WlhKMEtHbHVabTh1YVhOUWNtOW1aWE56YVc5dVlXeEpiblpsYzNSdmNpQTlQVDBnWm1Gc2MyVXNJQ2RwYzFCeWIyWmxjM05wYjI1aGJFbHVkbVZ6ZEc5eUlHMTFjM1FnWlhGMVlXd2dkRzhnWm1Gc2MyVW5LUW9KWm5KaGJXVmZaR2xuSUMweUlDOHZJR2x1Wm04NklFbGtaVzUwYVhSNVNXNW1id29KYzNSdmNtVWdNalUxSUM4dklHWjFiR3dnWVhKeVlYa0tDV3h2WVdRZ01qVTFJQzh2SUdaMWJHd2dZWEp5WVhrS0NXbHVkR01nTmlBdkx5QTRNVFlLQ1dkbGRHSnBkQW9KYVc1MFl5QXdJQzh2SURBS0NUMDlDZ29KTHk4Z2FYTlFjbTltWlhOemFXOXVZV3hKYm5abGMzUnZjaUJ0ZFhOMElHVnhkV0ZzSUhSdklHWmhiSE5sQ2dsaGMzTmxjblFLQ2drdkx5QmpiMjUwY21GamRITmNRbWxoZEdWalNXUmxiblJwZEhsUWNtOTJhV1JsY2k1aGJHZHZMblJ6T2pJNE1Rb0pMeThnWVhOelpYSjBLR2x1Wm04dVptVmxUWFZzZEdsd2JHbGxja0poYzJVZ1BUMDlJRk5EUVV4RkxDQW5SbVZsVFhWc2RHbHdiR2xsY2tKaGMyVWdiWFZ6ZENCaVpTQnpaWFFnY0hKdmNHVnliSGtuS1FvSlpuSmhiV1ZmWkdsbklDMHlJQzh2SUdsdVptODZJRWxrWlc1MGFYUjVTVzVtYndvSmMzUnZjbVVnTWpVMUlDOHZJR1oxYkd3Z1lYSnlZWGtLQ1d4dllXUWdNalUxSUM4dklHWjFiR3dnWVhKeVlYa0tDV1Y0ZEhKaFkzUWdNVGNnT0FvSlluUnZhUW9KYVc1MFl5QTFJQzh2SURFd01EQXdNREF3TURBS0NUMDlDZ29KTHk4Z1JtVmxUWFZzZEdsd2JHbGxja0poYzJVZ2JYVnpkQ0JpWlNCelpYUWdjSEp2Y0dWeWJIa0tDV0Z6YzJWeWRBb0tDUzh2SUdOdmJuUnlZV04wYzF4Q2FXRjBaV05KWkdWdWRHbDBlVkJ5YjNacFpHVnlMbUZzWjI4dWRITTZNamd5Q2drdkx5QmhjM05sY25Rb2FXNW1ieTVtWldWTmRXeDBhWEJzYVdWeUlEMDlQU0FvS0RJZ0tpQlRRMEZNUlNrZ1lYTWdkV2x1ZERZMEtTd2dKMGx1YVhScFlXd2dabVZsSUcxMWJIUnBjR3hwWlhJZ2JYVnpkQ0JpWlNCelpYUWdkRzhnTWlBcUlGTkRRVXhGSnlrS0NXWnlZVzFsWDJScFp5QXRNaUF2THlCcGJtWnZPaUJKWkdWdWRHbDBlVWx1Wm04S0NYTjBiM0psSURJMU5TQXZMeUJtZFd4c0lHRnljbUY1Q2dsc2IyRmtJREkxTlNBdkx5Qm1kV3hzSUdGeWNtRjVDZ2xsZUhSeVlXTjBJRGtnT0FvSlluUnZhUW9KY0hWemFHbHVkQ0F5TURBd01EQXdNREF3Q2drOVBRb0tDUzh2SUVsdWFYUnBZV3dnWm1WbElHMTFiSFJwY0d4cFpYSWdiWFZ6ZENCaVpTQnpaWFFnZEc4Z01pQXFJRk5EUVV4RkNnbGhjM05sY25RS0Nna3ZMeUJqYjI1MGNtRmpkSE5jUW1saGRHVmpTV1JsYm5ScGRIbFFjbTkyYVdSbGNpNWhiR2R2TG5Sek9qSTRNd29KTHk4Z2RHaHBjeTVwWkdWdWRHbDBhV1Z6S0hWelpYSXBMblpoYkhWbElEMGdhVzVtYndvSllubDBaV01nTXlBdkx5QWdJbWtpQ2dsbWNtRnRaVjlrYVdjZ0xURWdMeThnZFhObGNqb2dRV1JrY21WemN3b0pZMjl1WTJGMENnbGtkWEFLQ1dKdmVGOWtaV3dLQ1hCdmNBb0pabkpoYldWZlpHbG5JQzB5SUM4dklHbHVabTg2SUVsa1pXNTBhWFI1U1c1bWJ3b0pZbTk0WDNCMWRBb0pjbVYwYzNWaUNnb3ZMeUJ6WlhSSmJtWnZLR0ZrWkhKbGMzTXNLSFZwYm5RMk5DeGliMjlzTEhWcGJuUTJOQ3gxYVc1ME5qUXNkV2x1ZERZMExIVnBiblEyTkN4MWFXNTBOalFzWW05dmJDeHpkSEpwYm1jc2MzUnlhVzVuTEhWcGJuUTJOQ3gxYVc1ME5qUXNkV2x1ZERZMExIVnBiblEyTkN4MWFXNTBOalFzZFdsdWREWTBMR0p2YjJ3cEtYWnZhV1FLS21GaWFWOXliM1YwWlY5elpYUkpibVp2T2dvSkx5OGdhVzVtYnpvZ0tIVnBiblEyTkN4aWIyOXNMSFZwYm5RMk5DeDFhVzUwTmpRc2RXbHVkRFkwTEhWcGJuUTJOQ3gxYVc1ME5qUXNZbTl2YkN4emRISnBibWNzYzNSeWFXNW5MSFZwYm5RMk5DeDFhVzUwTmpRc2RXbHVkRFkwTEhWcGJuUTJOQ3gxYVc1ME5qUXNkV2x1ZERZMExHSnZiMndwQ2dsMGVHNWhJRUZ3Y0d4cFkyRjBhVzl1UVhKbmN5QXlDZ29KTHk4Z2RYTmxjam9nWVdSa2NtVnpjd29KZEhodVlTQkJjSEJzYVdOaGRHbHZia0Z5WjNNZ01Rb0paSFZ3Q2dsc1pXNEtDV2x1ZEdNZ01pQXZMeUF6TWdvSlBUMEtDZ2t2THlCaGNtZDFiV1Z1ZENBeElDaDFjMlZ5S1NCbWIzSWdjMlYwU1c1bWJ5QnRkWE4wSUdKbElHRWdZV1JrY21WemN3b0pZWE56WlhKMENnb0pMeThnWlhobFkzVjBaU0J6WlhSSmJtWnZLR0ZrWkhKbGMzTXNLSFZwYm5RMk5DeGliMjlzTEhWcGJuUTJOQ3gxYVc1ME5qUXNkV2x1ZERZMExIVnBiblEyTkN4MWFXNTBOalFzWW05dmJDeHpkSEpwYm1jc2MzUnlhVzVuTEhWcGJuUTJOQ3gxYVc1ME5qUXNkV2x1ZERZMExIVnBiblEyTkN4MWFXNTBOalFzZFdsdWREWTBMR0p2YjJ3cEtYWnZhV1FLQ1dOaGJHeHpkV0lnYzJWMFNXNW1id29KYVc1MFl5QXhJQzh2SURFS0NYSmxkSFZ5YmdvS0x5OGdjMlYwU1c1bWJ5aDFjMlZ5T2lCQlpHUnlaWE56TENCcGJtWnZPaUJKWkdWdWRHbDBlVWx1Wm04cE9pQjJiMmxrQ25ObGRFbHVabTg2Q2dsd2NtOTBieUF5SURBS0Nna3ZMeUJqYjI1MGNtRmpkSE5jUW1saGRHVmpTV1JsYm5ScGRIbFFjbTkyYVdSbGNpNWhiR2R2TG5Sek9qSTROd29KTHk4Z1lYTnpaWEowS0hSb2FYTXVkSGh1TG5ObGJtUmxjaUE5UFQwZ2RHaHBjeTVsYm1kaFoyVnRaVzUwVTJWMGRHVnlMblpoYkhWbEtRb0pkSGh1SUZObGJtUmxjZ29KWW5sMFpXTWdNVFFnTHk4Z0lDSmxJZ29KWVhCd1gyZHNiMkpoYkY5blpYUUtDVDA5Q2dsaGMzTmxjblFLQ2drdkx5QmpiMjUwY21GamRITmNRbWxoZEdWalNXUmxiblJwZEhsUWNtOTJhV1JsY2k1aGJHZHZMblJ6T2pJNE9Bb0pMeThnWVhOelpYSjBLR2x1Wm04dVptVmxUWFZzZEdsd2JHbGxja0poYzJVZ1BUMDlJRk5EUVV4RkxDQW5SbVZsVFhWc2RHbHdiR2xsY2tKaGMyVWdiWFZ6ZENCaVpTQnpaWFFnY0hKdmNHVnliSGtuS1FvSlpuSmhiV1ZmWkdsbklDMHlJQzh2SUdsdVptODZJRWxrWlc1MGFYUjVTVzVtYndvSmMzUnZjbVVnTWpVMUlDOHZJR1oxYkd3Z1lYSnlZWGtLQ1d4dllXUWdNalUxSUM4dklHWjFiR3dnWVhKeVlYa0tDV1Y0ZEhKaFkzUWdNVGNnT0FvSlluUnZhUW9KYVc1MFl5QTFJQzh2SURFd01EQXdNREF3TURBS0NUMDlDZ29KTHk4Z1JtVmxUWFZzZEdsd2JHbGxja0poYzJVZ2JYVnpkQ0JpWlNCelpYUWdjSEp2Y0dWeWJIa0tDV0Z6YzJWeWRBb0tDUzh2SUdOdmJuUnlZV04wYzF4Q2FXRjBaV05KWkdWdWRHbDBlVkJ5YjNacFpHVnlMbUZzWjI4dWRITTZNamc1Q2drdkx5QjBhR2x6TG1sa1pXNTBhWFJwWlhNb2RYTmxjaWt1ZG1Gc2RXVWdQU0JwYm1adkNnbGllWFJsWXlBeklDOHZJQ0FpYVNJS0NXWnlZVzFsWDJScFp5QXRNU0F2THlCMWMyVnlPaUJCWkdSeVpYTnpDZ2xqYjI1allYUUtDV1IxY0FvSlltOTRYMlJsYkFvSmNHOXdDZ2xtY21GdFpWOWthV2NnTFRJZ0x5OGdhVzVtYnpvZ1NXUmxiblJwZEhsSmJtWnZDZ2xpYjNoZmNIVjBDZ2x5WlhSemRXSUtDaTh2SUhObGJtUlBibXhwYm1WTFpYbFNaV2RwYzNSeVlYUnBiMjRvZFdsdWREWTBMR0o1ZEdWYlhTeGllWFJsVzEwc1lubDBaVnRkTEhWcGJuUTJOQ3gxYVc1ME5qUXNkV2x1ZERZMEtYWnZhV1FLS21GaWFWOXliM1YwWlY5elpXNWtUMjVzYVc1bFMyVjVVbVZuYVhOMGNtRjBhVzl1T2dvSkx5OGdkbTkwWlV0bGVVUnBiSFYwYVc5dU9pQjFhVzUwTmpRS0NYUjRibUVnUVhCd2JHbGpZWFJwYjI1QmNtZHpJRGNLQ1dKMGIya0tDZ2t2THlCMmIzUmxUR0Z6ZERvZ2RXbHVkRFkwQ2dsMGVHNWhJRUZ3Y0d4cFkyRjBhVzl1UVhKbmN5QTJDZ2xpZEc5cENnb0pMeThnZG05MFpVWnBjbk4wT2lCMWFXNTBOalFLQ1hSNGJtRWdRWEJ3YkdsallYUnBiMjVCY21keklEVUtDV0owYjJrS0Nna3ZMeUJ6ZEdGMFpWQnliMjltVUVzNklHSjVkR1ZiWFFvSmRIaHVZU0JCY0hCc2FXTmhkR2x2YmtGeVozTWdOQW9KWlhoMGNtRmpkQ0F5SURBS0Nna3ZMeUJ6Wld4bFkzUnBiMjVRU3pvZ1lubDBaVnRkQ2dsMGVHNWhJRUZ3Y0d4cFkyRjBhVzl1UVhKbmN5QXpDZ2xsZUhSeVlXTjBJRElnTUFvS0NTOHZJSFp2ZEdWUVN6b2dZbmwwWlZ0ZENnbDBlRzVoSUVGd2NHeHBZMkYwYVc5dVFYSm5jeUF5Q2dsbGVIUnlZV04wSURJZ01Bb0tDUzh2SUdGd2NFSnBZWFJsWTBOdmJtWnBaMUJ5YjNacFpHVnlPaUIxYVc1ME5qUUtDWFI0Ym1FZ1FYQndiR2xqWVhScGIyNUJjbWR6SURFS0NXSjBiMmtLQ2drdkx5QmxlR1ZqZFhSbElITmxibVJQYm14cGJtVkxaWGxTWldkcGMzUnlZWFJwYjI0b2RXbHVkRFkwTEdKNWRHVmJYU3hpZVhSbFcxMHNZbmwwWlZ0ZExIVnBiblEyTkN4MWFXNTBOalFzZFdsdWREWTBLWFp2YVdRS0NXTmhiR3h6ZFdJZ2MyVnVaRTl1YkdsdVpVdGxlVkpsWjJsemRISmhkR2x2YmdvSmFXNTBZeUF4SUM4dklERUtDWEpsZEhWeWJnb0tMeThnYzJWdVpFOXViR2x1WlV0bGVWSmxaMmx6ZEhKaGRHbHZiaWhoY0hCQ2FXRjBaV05EYjI1bWFXZFFjbTkyYVdSbGNqb2dRWEJ3U1VRc0lIWnZkR1ZRU3pvZ1lubDBaWE1zSUhObGJHVmpkR2x2YmxCTE9pQmllWFJsY3l3Z2MzUmhkR1ZRY205dlpsQkxPaUJpZVhSbGN5d2dkbTkwWlVacGNuTjBPaUIxYVc1ME5qUXNJSFp2ZEdWTVlYTjBPaUIxYVc1ME5qUXNJSFp2ZEdWTFpYbEVhV3gxZEdsdmJqb2dkV2x1ZERZMEtUb2dkbTlwWkFvdkx3b3ZMeUJoWkdSeVpYTnpSWGhsWTNWMGFYWmxSbVZsSUdOaGJpQndaWEptYjIwZ2EyVjVJSEpsWjJsemRISmhkR2x2YmlCbWIzSWdkR2hwY3lCTVVDQndiMjlzQ2k4dkNpOHZJRTl1YkhrZ1lXUmtjbVZ6YzBWNFpXTjFkR2wyWlVabFpTQnBjeUJoYkd4dmQyVmtJSFJ2SUdWNFpXTjFkR1VnZEdocGN5QnRaWFJvYjJRdUNuTmxibVJQYm14cGJtVkxaWGxTWldkcGMzUnlZWFJwYjI0NkNnbHdjbTkwYnlBM0lEQUtDZ2t2THlCUWRYTm9JR1Z0Y0hSNUlHSjVkR1Z6SUdGbWRHVnlJSFJvWlNCbWNtRnRaU0J3YjJsdWRHVnlJSFJ2SUhKbGMyVnlkbVVnYzNCaFkyVWdabTl5SUd4dlkyRnNJSFpoY21saFlteGxjd29KWW5sMFpXTWdNQ0F2THlBd2VBb0paSFZ3Q2dvSkx5OGdZMjl1ZEhKaFkzUnpYRUpwWVhSbFkwbGtaVzUwYVhSNVVISnZkbWxrWlhJdVlXeG5ieTUwY3pvek1EWUtDUzh2SUdGemMyVnlkQ2hoY0hCQ2FXRjBaV05EYjI1bWFXZFFjbTkyYVdSbGNpQTlQVDBnZEdocGN5NWhjSEJDYVdGMFpXTkRiMjVtYVdkUWNtOTJhV1JsY2k1MllXeDFaU3dnSjBOdmJtWnBaM1Z5WVhScGIyNGdZWEJ3SUdSdlpYTWdibTkwSUcxaGRHTm9KeWtLQ1daeVlXMWxYMlJwWnlBdE1TQXZMeUJoY0hCQ2FXRjBaV05EYjI1bWFXZFFjbTkyYVdSbGNqb2dRWEJ3U1VRS0NXSjVkR1ZqSURRZ0x5OGdJQ0pDSWdvSllYQndYMmRzYjJKaGJGOW5aWFFLQ1QwOUNnb0pMeThnUTI5dVptbG5kWEpoZEdsdmJpQmhjSEFnWkc5bGN5QnViM1FnYldGMFkyZ0tDV0Z6YzJWeWRBb0tDUzh2SUdOdmJuUnlZV04wYzF4Q2FXRjBaV05KWkdWdWRHbDBlVkJ5YjNacFpHVnlMbUZzWjI4dWRITTZNekEzQ2drdkx5QmhaR1J5WlhOelJYaGxZM1YwYVhabFJtVmxJRDBnWVhCd1FtbGhkR1ZqUTI5dVptbG5VSEp2ZG1sa1pYSXVaMnh2WW1Gc1UzUmhkR1VvSjJWbUp5a2dZWE1nUVdSa2NtVnpjd29KWm5KaGJXVmZaR2xuSUMweElDOHZJR0Z3Y0VKcFlYUmxZME52Ym1acFoxQnliM1pwWkdWeU9pQkJjSEJKUkFvSllubDBaV01nTVRFZ0x5OGdJQ0psWmlJS0NXRndjRjluYkc5aVlXeGZaMlYwWDJWNENnb0pMeThnWjJ4dlltRnNJSE4wWVhSbElIWmhiSFZsSUdSdlpYTWdibTkwSUdWNGFYTjBPaUJoY0hCQ2FXRjBaV05EYjI1bWFXZFFjbTkyYVdSbGNpNW5iRzlpWVd4VGRHRjBaU2duWldZbktRb0pZWE56WlhKMENnbG1jbUZ0WlY5aWRYSjVJREFnTHk4Z1lXUmtjbVZ6YzBWNFpXTjFkR2wyWlVabFpUb2dZV1JrY21WemN3b0tDUzh2SUdOdmJuUnlZV04wYzF4Q2FXRjBaV05KWkdWdWRHbDBlVkJ5YjNacFpHVnlMbUZzWjI4dWRITTZNekE0Q2drdkx5QmhjM05sY25Rb0Nna3ZMeUFnSUNBZ0lDQjBhR2x6TG5SNGJpNXpaVzVrWlhJZ1BUMDlJR0ZrWkhKbGMzTkZlR1ZqZFhScGRtVkdaV1VzQ2drdkx5QWdJQ0FnSUNBblQyNXNlU0JtWldVZ1pYaGxZM1YwYjNJZ2MyVjBkWEFnYVc0Z2RHaGxJR052Ym1acFp5QmpZVzRnZEdGclpTQjBhR1VnWTI5c2JHVmpkR1ZrSUdabFpYTW5DZ2t2THlBZ0lDQWdLUW9KZEhodUlGTmxibVJsY2dvSlpuSmhiV1ZmWkdsbklEQWdMeThnWVdSa2NtVnpjMFY0WldOMWRHbDJaVVpsWlRvZ1lXUmtjbVZ6Y3dvSlBUMEtDZ2t2THlCUGJteDVJR1psWlNCbGVHVmpkWFJ2Y2lCelpYUjFjQ0JwYmlCMGFHVWdZMjl1Wm1sbklHTmhiaUIwWVd0bElIUm9aU0JqYjJ4c1pXTjBaV1FnWm1WbGN3b0pZWE56WlhKMENnb0pMeThnWTI5dWRISmhZM1J6WEVKcFlYUmxZMGxrWlc1MGFYUjVVSEp2ZG1sa1pYSXVZV3huYnk1MGN6b3pNVElLQ1M4dklIQmhkWE5sWkNBOUlHRndjRUpwWVhSbFkwTnZibVpwWjFCeWIzWnBaR1Z5TG1kc2IySmhiRk4wWVhSbEtDZHpKeWtnWVhNZ2RXbHVkRFkwQ2dsbWNtRnRaVjlrYVdjZ0xURWdMeThnWVhCd1FtbGhkR1ZqUTI5dVptbG5VSEp2ZG1sa1pYSTZJRUZ3Y0VsRUNnbGllWFJsWXlBMUlDOHZJQ0FpY3lJS0NXRndjRjluYkc5aVlXeGZaMlYwWDJWNENnb0pMeThnWjJ4dlltRnNJSE4wWVhSbElIWmhiSFZsSUdSdlpYTWdibTkwSUdWNGFYTjBPaUJoY0hCQ2FXRjBaV05EYjI1bWFXZFFjbTkyYVdSbGNpNW5iRzlpWVd4VGRHRjBaU2duY3ljcENnbGhjM05sY25RS0NXWnlZVzFsWDJKMWNua2dNU0F2THlCd1lYVnpaV1E2SUhWcGJuUTJOQW9LQ1M4dklHTnZiblJ5WVdOMGMxeENhV0YwWldOSlpHVnVkR2wwZVZCeWIzWnBaR1Z5TG1Gc1oyOHVkSE02TXpFekNna3ZMeUJoYzNObGNuUW9jR0YxYzJWa0lEMDlQU0F3TENBblJWSlNYMUJCVlZORlJDY3BDZ2xtY21GdFpWOWthV2NnTVNBdkx5QndZWFZ6WldRNklIVnBiblEyTkFvSmFXNTBZeUF3SUM4dklEQUtDVDA5Q2dvSkx5OGdSVkpTWDFCQlZWTkZSQW9KWVhOelpYSjBDZ29KTHk4Z1kyOXVkSEpoWTNSelhFSnBZWFJsWTBsa1pXNTBhWFI1VUhKdmRtbGtaWEl1WVd4bmJ5NTBjem96TVRRS0NTOHZJSE5sYm1SUGJteHBibVZMWlhsU1pXZHBjM1J5WVhScGIyNG9ld29KTHk4Z0lDQWdJQ0FnYzJWc1pXTjBhVzl1VUVzNklITmxiR1ZqZEdsdmJsQkxMQW9KTHk4Z0lDQWdJQ0FnYzNSaGRHVlFjbTl2WmxCTE9pQnpkR0YwWlZCeWIyOW1VRXNzQ2drdkx5QWdJQ0FnSUNCMmIzUmxSbWx5YzNRNklIWnZkR1ZHYVhKemRDd0tDUzh2SUNBZ0lDQWdJSFp2ZEdWTFpYbEVhV3gxZEdsdmJqb2dkbTkwWlV0bGVVUnBiSFYwYVc5dUxBb0pMeThnSUNBZ0lDQWdkbTkwWlV4aGMzUTZJSFp2ZEdWTVlYTjBMQW9KTHk4Z0lDQWdJQ0FnZG05MFpWQkxPaUIyYjNSbFVFc3NDZ2t2THlBZ0lDQWdJQ0JtWldVNklEQXNDZ2t2THlBZ0lDQWdmU2tLQ1dsMGVHNWZZbVZuYVc0S0NXbHVkR01nTXlBdkx5QWdhMlY1Y21WbkNnbHBkSGh1WDJacFpXeGtJRlI1Y0dWRmJuVnRDZ29KTHk4Z1kyOXVkSEpoWTNSelhFSnBZWFJsWTBsa1pXNTBhWFI1VUhKdmRtbGtaWEl1WVd4bmJ5NTBjem96TVRVS0NTOHZJSE5sYkdWamRHbHZibEJMT2lCelpXeGxZM1JwYjI1UVN3b0pabkpoYldWZlpHbG5JQzB6SUM4dklITmxiR1ZqZEdsdmJsQkxPaUJpZVhSbGN3b0phWFI0Ymw5bWFXVnNaQ0JUWld4bFkzUnBiMjVRU3dvS0NTOHZJR052Ym5SeVlXTjBjMXhDYVdGMFpXTkpaR1Z1ZEdsMGVWQnliM1pwWkdWeUxtRnNaMjh1ZEhNNk16RTJDZ2t2THlCemRHRjBaVkJ5YjI5bVVFczZJSE4wWVhSbFVISnZiMlpRU3dvSlpuSmhiV1ZmWkdsbklDMDBJQzh2SUhOMFlYUmxVSEp2YjJaUVN6b2dZbmwwWlhNS0NXbDBlRzVmWm1sbGJHUWdVM1JoZEdWUWNtOXZabEJMQ2dvSkx5OGdZMjl1ZEhKaFkzUnpYRUpwWVhSbFkwbGtaVzUwYVhSNVVISnZkbWxrWlhJdVlXeG5ieTUwY3pvek1UY0tDUzh2SUhadmRHVkdhWEp6ZERvZ2RtOTBaVVpwY25OMENnbG1jbUZ0WlY5a2FXY2dMVFVnTHk4Z2RtOTBaVVpwY25OME9pQjFhVzUwTmpRS0NXbDBlRzVmWm1sbGJHUWdWbTkwWlVacGNuTjBDZ29KTHk4Z1kyOXVkSEpoWTNSelhFSnBZWFJsWTBsa1pXNTBhWFI1VUhKdmRtbGtaWEl1WVd4bmJ5NTBjem96TVRnS0NTOHZJSFp2ZEdWTFpYbEVhV3gxZEdsdmJqb2dkbTkwWlV0bGVVUnBiSFYwYVc5dUNnbG1jbUZ0WlY5a2FXY2dMVGNnTHk4Z2RtOTBaVXRsZVVScGJIVjBhVzl1T2lCMWFXNTBOalFLQ1dsMGVHNWZabWxsYkdRZ1ZtOTBaVXRsZVVScGJIVjBhVzl1Q2dvSkx5OGdZMjl1ZEhKaFkzUnpYRUpwWVhSbFkwbGtaVzUwYVhSNVVISnZkbWxrWlhJdVlXeG5ieTUwY3pvek1Ua0tDUzh2SUhadmRHVk1ZWE4wT2lCMmIzUmxUR0Z6ZEFvSlpuSmhiV1ZmWkdsbklDMDJJQzh2SUhadmRHVk1ZWE4wT2lCMWFXNTBOalFLQ1dsMGVHNWZabWxsYkdRZ1ZtOTBaVXhoYzNRS0Nna3ZMeUJqYjI1MGNtRmpkSE5jUW1saGRHVmpTV1JsYm5ScGRIbFFjbTkyYVdSbGNpNWhiR2R2TG5Sek9qTXlNQW9KTHk4Z2RtOTBaVkJMT2lCMmIzUmxVRXNLQ1daeVlXMWxYMlJwWnlBdE1pQXZMeUIyYjNSbFVFczZJR0o1ZEdWekNnbHBkSGh1WDJacFpXeGtJRlp2ZEdWUVN3b0tDUzh2SUdOdmJuUnlZV04wYzF4Q2FXRjBaV05KWkdWdWRHbDBlVkJ5YjNacFpHVnlMbUZzWjI4dWRITTZNekl4Q2drdkx5Qm1aV1U2SURBS0NXbHVkR01nTUNBdkx5QXdDZ2xwZEhodVgyWnBaV3hrSUVabFpRb0tDUzh2SUZOMVltMXBkQ0JwYm01bGNpQjBjbUZ1YzJGamRHbHZiZ29KYVhSNGJsOXpkV0p0YVhRS0NYSmxkSE4xWWdvS0x5OGdaMlYwVlhObGNpaGhaR1J5WlhOekxIVnBiblE0S1NoMWFXNTBPQ3gxYVc1ME5qUXNkV2x1ZERZMExHSnZiMndzYzNSeWFXNW5MSE4wY21sdVp5eDFhVzUwTmpRc2RXbHVkRFkwTEhWcGJuUTJOQ3gxYVc1ME5qUXNkV2x1ZERZMExIVnBiblEyTkN4MWFXNTBOalFzZFdsdWREWTBMR0p2YjJ3c2RXbHVkRFkwTEhWcGJuUTJOQ3hpYjI5c0tRb3FZV0pwWDNKdmRYUmxYMmRsZEZWelpYSTZDZ2t2THlCVWFHVWdRVUpKSUhKbGRIVnliaUJ3Y21WbWFYZ0tDV0o1ZEdWaklEWWdMeThnTUhneE5URm1OMk0zTlFvS0NTOHZJSFk2SUhWcGJuUTRDZ2wwZUc1aElFRndjR3hwWTJGMGFXOXVRWEpuY3lBeUNnbGtkWEFLQ1d4bGJnb0phVzUwWXlBeElDOHZJREVLQ1QwOUNnb0pMeThnWVhKbmRXMWxiblFnTUNBb2Rpa2dabTl5SUdkbGRGVnpaWElnYlhWemRDQmlaU0JoSUhWcGJuUTRDZ2xoYzNObGNuUUtDV0owYjJrS0Nna3ZMeUIxYzJWeU9pQmhaR1J5WlhOekNnbDBlRzVoSUVGd2NHeHBZMkYwYVc5dVFYSm5jeUF4Q2dsa2RYQUtDV3hsYmdvSmFXNTBZeUF5SUM4dklETXlDZ2s5UFFvS0NTOHZJR0Z5WjNWdFpXNTBJREVnS0hWelpYSXBJR1p2Y2lCblpYUlZjMlZ5SUcxMWMzUWdZbVVnWVNCaFpHUnlaWE56Q2dsaGMzTmxjblFLQ2drdkx5QmxlR1ZqZFhSbElHZGxkRlZ6WlhJb1lXUmtjbVZ6Y3l4MWFXNTBPQ2tvZFdsdWREZ3NkV2x1ZERZMExIVnBiblEyTkN4aWIyOXNMSE4wY21sdVp5eHpkSEpwYm1jc2RXbHVkRFkwTEhWcGJuUTJOQ3gxYVc1ME5qUXNkV2x1ZERZMExIVnBiblEyTkN4MWFXNTBOalFzZFdsdWREWTBMSFZwYm5RMk5DeGliMjlzTEhWcGJuUTJOQ3gxYVc1ME5qUXNZbTl2YkNrS0NXTmhiR3h6ZFdJZ1oyVjBWWE5sY2dvSlkyOXVZMkYwQ2dsc2IyY0tDV2x1ZEdNZ01TQXZMeUF4Q2dseVpYUjFjbTRLQ2k4dklHZGxkRlZ6WlhJb2RYTmxjam9nUVdSa2NtVnpjeXdnZGpvZ2RXbHVkRGdwT2lCVmMyVnlTVzVtYjFZeENpOHZDaTh2SUZKbGRIVnlibk1nZFhObGNpQnBibVp2Y20xaGRHbHZiaUF0SUdabFpTQnRkV3gwYVhCc2FXVnlMQ0IyWlhKcFptbGpZWFJwYjI0Z1kyeGhjM01zSUdWdVoyRm5aVzFsYm5RZ1kyeGhjM01nTGk0S0x5OEtMeThnUUhCaGNtRnRJSFZ6WlhJZ1IyVjBJR2x1Wm04Z1ptOXlJSE53WldOcFptbGpJSFZ6WlhJZ1lXUmtjbVZ6Y3dvdkx5QkFjR0Z5WVcwZ2RpQldaWEp6YVc5dUlHOW1JSFJvWlNCa1lYUmhJSE4wY25WamRIVnlaU0IwYnlCeVpYUjFjbTRLWjJWMFZYTmxjam9LQ1hCeWIzUnZJRElnTVFvS0NTOHZJRkIxYzJnZ1pXMXdkSGtnWW5sMFpYTWdZV1owWlhJZ2RHaGxJR1p5WVcxbElIQnZhVzUwWlhJZ2RHOGdjbVZ6WlhKMlpTQnpjR0ZqWlNCbWIzSWdiRzlqWVd3Z2RtRnlhV0ZpYkdWekNnbGllWFJsWXlBd0lDOHZJREI0Q2dsa2RYQnVJRElLQ2drdkx5QmpiMjUwY21GamRITmNRbWxoZEdWalNXUmxiblJwZEhsUWNtOTJhV1JsY2k1aGJHZHZMblJ6T2pNek13b0pMeThnWVhOelpYSjBLSFlnUFQwOUlERXNJQ0pEZFhKeVpXNTBiSGtnYzNWd2NHOXlkR1ZrSUhabGNuTnBiMjRnYjJZZ2RHaGxJR1JoZEdFZ2MzUnlkV04wZFhKbElHbHpJQ2N4SnlJcENnbG1jbUZ0WlY5a2FXY2dMVElnTHk4Z2Rqb2dkV2x1ZERnS0NXbHVkR01nTVNBdkx5QXhDZ2s5UFFvS0NTOHZJRU4xY25KbGJuUnNlU0J6ZFhCd2IzSjBaV1FnZG1WeWMybHZiaUJ2WmlCMGFHVWdaR0YwWVNCemRISjFZM1IxY21VZ2FYTWdKekVuQ2dsaGMzTmxjblFLQ2drdkx5QXFhV1l3WDJOdmJtUnBkR2x2YmdvSkx5OGdZMjl1ZEhKaFkzUnpYRUpwWVhSbFkwbGtaVzUwYVhSNVVISnZkbWxrWlhJdVlXeG5ieTUwY3pvek16UUtDUzh2SUNGMGFHbHpMbWxrWlc1MGFYUnBaWE1vZFhObGNpa3VaWGhwYzNSekNnbGllWFJsWXlBeklDOHZJQ0FpYVNJS0NXWnlZVzFsWDJScFp5QXRNU0F2THlCMWMyVnlPaUJCWkdSeVpYTnpDZ2xqYjI1allYUUtDV0p2ZUY5c1pXNEtDWE4zWVhBS0NYQnZjQW9KSVFvSllub2dLbWxtTUY5bGJtUUtDZ2t2THlBcWFXWXdYMk52Ym5ObGNYVmxiblFLQ1M4dklHTnZiblJ5WVdOMGMxeENhV0YwWldOSlpHVnVkR2wwZVZCeWIzWnBaR1Z5TG1Gc1oyOHVkSE02TXpNMUNna3ZMeUJ5WlhST2IwbGtaVzUwYVhSNU9pQlZjMlZ5U1c1bWIxWXhJRDBnZXdvSkx5OGdJQ0FnSUNBZ0lDQjJaWEp6YVc5dU9pQjJMQW9KTHk4Z0lDQWdJQ0FnSUNCaVlYTmxPaUJUUTBGTVJTQmhjeUIxYVc1ME5qUXNDZ2t2THlBZ0lDQWdJQ0FnSUdabFpVMTFiSFJwY0d4cFpYSTZJQ2d5SUNvZ1UwTkJURVVwSUdGeklIVnBiblEyTkN3S0NTOHZJQ0FnSUNBZ0lDQWdhWE5NYjJOclpXUTZJR1poYkhObExBb0pMeThnSUNBZ0lDQWdJQ0IyWlhKcFptbGpZWFJwYjI1RGJHRnpjem9nTUN3S0NTOHZJQ0FnSUNBZ0lDQWdkbVZ5YVdacFkyRjBhVzl1VTNSaGRIVnpPaUF3TEFvSkx5OGdJQ0FnSUNBZ0lDQmlhV0YwWldORmJtZGhaMlZ0Wlc1MFVHOXBiblJ6T2lBd0xBb0pMeThnSUNBZ0lDQWdJQ0JpYVdGMFpXTkZibWRoWjJWdFpXNTBVbUZ1YXpvZ01Dd0tDUzh2SUNBZ0lDQWdJQ0FnWVhadFJXNW5ZV2RsYldWdWRGQnZhVzUwY3pvZ01Dd0tDUzh2SUNBZ0lDQWdJQ0FnWVhadFJXNW5ZV2RsYldWdWRGSmhibXM2SURBc0Nna3ZMeUFnSUNBZ0lDQWdJSFJ5WVdScGJtZEZibWRoWjJWdFpXNTBVRzlwYm5Sek9pQXdMQW9KTHk4Z0lDQWdJQ0FnSUNCMGNtRmthVzVuUlc1bllXZGxiV1Z1ZEZKaGJtczZJREFzQ2drdkx5QWdJQ0FnSUNBZ0lHdDVZMFY0Y0dseVlYUnBiMjQ2SURBc0Nna3ZMeUFnSUNBZ0lDQWdJR2x1ZG1WemRHOXlSbTl5Ulhod2FYSmhkR2x2YmpvZ01Dd0tDUzh2SUNBZ0lDQWdJQ0FnYVhOUWNtOW1aWE56YVc5dVlXeEpiblpsYzNSdmNqb2dabUZzYzJVc0Nna3ZMeUFnSUNBZ0lDQWdJR2x6UTI5dGNHRnVlVG9nWm1Gc2MyVXNDZ2t2THlBZ0lDQWdJQ0FnSUhCbGNuTnZibFZWU1VRNklDY25MQW9KTHk4Z0lDQWdJQ0FnSUNCc1pXZGhiRVZ1ZEdsMGVWVlZTVVE2SUNjbkxBb0pMeThnSUNBZ0lDQWdmUW9KWW5sMFpXTWdNQ0F2THlBZ2FXNXBkR2xoYkNCb1pXRmtDZ2xpZVhSbFl5QXdJQzh2SUNCcGJtbDBhV0ZzSUhSaGFXd0tDV0o1ZEdWaklERXlJQzh2SUNCcGJtbDBhV0ZzSUdobFlXUWdiMlptYzJWMENnbG1jbUZ0WlY5a2FXY2dMVElnTHk4Z2Rqb2dkV2x1ZERnS0NXbDBiMklLQ1dWNGRISmhZM1FnTnlBeENnbGpZV3hzYzNWaUlDcHdjbTlqWlhOelgzTjBZWFJwWTE5MGRYQnNaVjlsYkdWdFpXNTBDZ2xpZVhSbFl5QXhJQzh2SURCNE1EQXdNREF3TURBd01EQXdNREF3TUFvSlkyRnNiSE4xWWlBcWNISnZZMlZ6YzE5emRHRjBhV05mZEhWd2JHVmZaV3hsYldWdWRBb0pZbmwwWldNZ01TQXZMeUF3ZURBd01EQXdNREF3TURBd01EQXdNREFLQ1dOaGJHeHpkV0lnS25CeWIyTmxjM05mYzNSaGRHbGpYM1IxY0d4bFgyVnNaVzFsYm5RS0NXSjVkR1ZqSURJZ0x5OGdNSGd3TUFvSmFXNTBZeUF3SUM4dklEQUtDV1IxY0FvSmMyVjBZbWwwQ2dsallXeHNjM1ZpSUNwd2NtOWpaWE56WDNOMFlYUnBZMTkwZFhCc1pWOWxiR1Z0Wlc1MENnbGllWFJsWXlBeE15QXZMeUF3ZURBd01EQUtDV05oYkd4emRXSWdLbkJ5YjJObGMzTmZaSGx1WVcxcFkxOTBkWEJzWlY5bGJHVnRaVzUwQ2dsaWVYUmxZeUF4TXlBdkx5QXdlREF3TURBS0NXTmhiR3h6ZFdJZ0tuQnliMk5sYzNOZlpIbHVZVzFwWTE5MGRYQnNaVjlsYkdWdFpXNTBDZ2xpZVhSbFl5QXhJQzh2SURCNE1EQXdNREF3TURBd01EQXdNREF3TUFvSlkyRnNiSE4xWWlBcWNISnZZMlZ6YzE5emRHRjBhV05mZEhWd2JHVmZaV3hsYldWdWRBb0pZbmwwWldNZ01TQXZMeUF3ZURBd01EQXdNREF3TURBd01EQXdNREFLQ1dOaGJHeHpkV0lnS25CeWIyTmxjM05mYzNSaGRHbGpYM1IxY0d4bFgyVnNaVzFsYm5RS0NXSjVkR1ZqSURFZ0x5OGdNSGd3TURBd01EQXdNREF3TURBd01EQXdDZ2xqWVd4c2MzVmlJQ3B3Y205alpYTnpYM04wWVhScFkxOTBkWEJzWlY5bGJHVnRaVzUwQ2dsaWVYUmxZeUF4SUM4dklEQjRNREF3TURBd01EQXdNREF3TURBd01Bb0pZMkZzYkhOMVlpQXFjSEp2WTJWemMxOXpkR0YwYVdOZmRIVndiR1ZmWld4bGJXVnVkQW9KWW5sMFpXTWdNU0F2THlBd2VEQXdNREF3TURBd01EQXdNREF3TURBS0NXTmhiR3h6ZFdJZ0tuQnliMk5sYzNOZmMzUmhkR2xqWDNSMWNHeGxYMlZzWlcxbGJuUUtDV0o1ZEdWaklERWdMeThnTUhnd01EQXdNREF3TURBd01EQXdNREF3Q2dsallXeHNjM1ZpSUNwd2NtOWpaWE56WDNOMFlYUnBZMTkwZFhCc1pWOWxiR1Z0Wlc1MENnbGllWFJsWXlBNElDOHZJREI0TURBd01EQXdNREEzTnpNMU9UUXdNQW9KWTJGc2JITjFZaUFxY0hKdlkyVnpjMTl6ZEdGMGFXTmZkSFZ3YkdWZlpXeGxiV1Z1ZEFvSllubDBaV01nT1NBdkx5QXdlREF3TURBd01EQXdNMkk1WVdOaE1EQUtDV05oYkd4emRXSWdLbkJ5YjJObGMzTmZjM1JoZEdsalgzUjFjR3hsWDJWc1pXMWxiblFLQ1dKNWRHVmpJRElnTHk4Z01IZ3dNQW9KYVc1MFl5QXdJQzh2SURBS0NXUjFjQW9KYzJWMFltbDBDZ2xqWVd4c2MzVmlJQ3B3Y205alpYTnpYM04wWVhScFkxOTBkWEJzWlY5bGJHVnRaVzUwQ2dsaWVYUmxZeUF4SUM4dklEQjRNREF3TURBd01EQXdNREF3TURBd01Bb0pZMkZzYkhOMVlpQXFjSEp2WTJWemMxOXpkR0YwYVdOZmRIVndiR1ZmWld4bGJXVnVkQW9KWW5sMFpXTWdNU0F2THlBd2VEQXdNREF3TURBd01EQXdNREF3TURBS0NXTmhiR3h6ZFdJZ0tuQnliMk5sYzNOZmMzUmhkR2xqWDNSMWNHeGxYMlZzWlcxbGJuUUtDV0o1ZEdWaklESWdMeThnTUhnd01Bb0phVzUwWXlBd0lDOHZJREFLQ1dSMWNBb0pjMlYwWW1sMENnbGpZV3hzYzNWaUlDcHdjbTlqWlhOelgzTjBZWFJwWTE5MGRYQnNaVjlsYkdWdFpXNTBDZ2x3YjNBZ0x5OGdjRzl3SUdobFlXUWdiMlptYzJWMENnbGpiMjVqWVhRZ0x5OGdZMjl1WTJGMElHaGxZV1FnWVc1a0lIUmhhV3dLQ1daeVlXMWxYMkoxY25rZ01DQXZMeUJ5WlhST2IwbGtaVzUwYVhSNU9pQlZjMlZ5U1c1bWIxWXhDZ29KTHk4Z1kyOXVkSEpoWTNSelhFSnBZWFJsWTBsa1pXNTBhWFI1VUhKdmRtbGtaWEl1WVd4bmJ5NTBjem96TlRVS0NTOHZJSEpsZEhWeWJpQnlaWFJPYjBsa1pXNTBhWFI1T3dvSlpuSmhiV1ZmWkdsbklEQWdMeThnY21WMFRtOUpaR1Z1ZEdsMGVUb2dWWE5sY2tsdVptOVdNUW9KWWlBcVoyVjBWWE5sY2lweVpYUjFjbTRLQ2lwcFpqQmZaVzVrT2dvSkx5OGdZMjl1ZEhKaFkzUnpYRUpwWVhSbFkwbGtaVzUwYVhSNVVISnZkbWxrWlhJdVlXeG5ieTUwY3pvek5UY0tDUzh2SUdsa1pXNTBhWFI1SUQwZ2RHaHBjeTVwWkdWdWRHbDBhV1Z6S0hWelpYSXBMblpoYkhWbENnbGllWFJsWXlBeklDOHZJQ0FpYVNJS0NXWnlZVzFsWDJScFp5QXRNU0F2THlCMWMyVnlPaUJCWkdSeVpYTnpDZ2xqYjI1allYUUtDV1p5WVcxbFgySjFjbmtnTVNBdkx5QnpkRzl5WVdkbElHdGxlUzh2YVdSbGJuUnBkSGtLQ2drdkx5QmpiMjUwY21GamRITmNRbWxoZEdWalNXUmxiblJwZEhsUWNtOTJhV1JsY2k1aGJHZHZMblJ6T2pNMU9Rb0pMeThnY21WME9pQlZjMlZ5U1c1bWIxWXhJRDBnZXdvSkx5OGdJQ0FnSUNBZ2RtVnljMmx2YmpvZ2Rpd0tDUzh2SUNBZ0lDQWdJR0poYzJVNklHbGtaVzUwYVhSNUxtWmxaVTExYkhScGNHeHBaWEpDWVhObExBb0pMeThnSUNBZ0lDQWdabVZsVFhWc2RHbHdiR2xsY2pvZ2FXUmxiblJwZEhrdVptVmxUWFZzZEdsd2JHbGxjaXdLQ1M4dklDQWdJQ0FnSUdselRHOWphMlZrT2lCcFpHVnVkR2wwZVM1cGMweHZZMnRsWkN3S0NTOHZJQ0FnSUNBZ0lIWmxjbWxtYVdOaGRHbHZia05zWVhOek9pQnBaR1Z1ZEdsMGVTNTJaWEpwWm1sallYUnBiMjVEYkdGemN5d0tDUzh2SUNBZ0lDQWdJSFpsY21sbWFXTmhkR2x2YmxOMFlYUjFjem9nYVdSbGJuUnBkSGt1ZG1WeWFXWnBZMkYwYVc5dVUzUmhkSFZ6TEFvSkx5OGdJQ0FnSUNBZ1ltbGhkR1ZqUlc1bllXZGxiV1Z1ZEZCdmFXNTBjem9nYVdSbGJuUnBkSGt1WW1saGRHVmpSVzVuWVdkbGJXVnVkRkJ2YVc1MGN5d0tDUzh2SUNBZ0lDQWdJR0pwWVhSbFkwVnVaMkZuWlcxbGJuUlNZVzVyT2lCcFpHVnVkR2wwZVM1aWFXRjBaV05GYm1kaFoyVnRaVzUwVW1GdWF5d0tDUzh2SUNBZ0lDQWdJR0YyYlVWdVoyRm5aVzFsYm5SUWIybHVkSE02SUdsa1pXNTBhWFI1TG1GMmJVVnVaMkZuWlcxbGJuUlFiMmx1ZEhNc0Nna3ZMeUFnSUNBZ0lDQmhkbTFGYm1kaFoyVnRaVzUwVW1GdWF6b2dhV1JsYm5ScGRIa3VZWFp0Ulc1bllXZGxiV1Z1ZEZKaGJtc3NDZ2t2THlBZ0lDQWdJQ0IwY21Ga2FXNW5SVzVuWVdkbGJXVnVkRkJ2YVc1MGN6b2dhV1JsYm5ScGRIa3VkSEpoWkdsdVowVnVaMkZuWlcxbGJuUlFiMmx1ZEhNc0Nna3ZMeUFnSUNBZ0lDQjBjbUZrYVc1blJXNW5ZV2RsYldWdWRGSmhibXM2SUdsa1pXNTBhWFI1TG5SeVlXUnBibWRGYm1kaFoyVnRaVzUwVW1GdWF5d0tDUzh2SUNBZ0lDQWdJR3Q1WTBWNGNHbHlZWFJwYjI0NklHbGtaVzUwYVhSNUxtdDVZMFY0Y0dseVlYUnBiMjRzQ2drdkx5QWdJQ0FnSUNCcGJuWmxjM1J2Y2tadmNrVjRjR2x5WVhScGIyNDZJR2xrWlc1MGFYUjVMbWx1ZG1WemRHOXlSbTl5Ulhod2FYSmhkR2x2Yml3S0NTOHZJQ0FnSUNBZ0lHbHpVSEp2Wm1WemMybHZibUZzU1c1MlpYTjBiM0k2SUdsa1pXNTBhWFI1TG1selVISnZabVZ6YzJsdmJtRnNTVzUyWlhOMGIzSXNDZ2t2THlBZ0lDQWdJQ0JwYzBOdmJYQmhibms2SUdsa1pXNTBhWFI1TG1selEyOXRjR0Z1ZVN3S0NTOHZJQ0FnSUNBZ0lIQmxjbk52YmxWVlNVUTZJR2xrWlc1MGFYUjVMbkJsY25OdmJsVlZTVVFzQ2drdkx5QWdJQ0FnSUNCc1pXZGhiRVZ1ZEdsMGVWVlZTVVE2SUdsa1pXNTBhWFI1TG14bFoyRnNSVzUwYVhSNVZWVkpSQ3dLQ1M4dklDQWdJQ0I5Q2dsaWVYUmxZeUF3SUM4dklDQnBibWwwYVdGc0lHaGxZV1FLQ1dKNWRHVmpJREFnTHk4Z0lHbHVhWFJwWVd3Z2RHRnBiQW9KWW5sMFpXTWdNVElnTHk4Z0lHbHVhWFJwWVd3Z2FHVmhaQ0J2Wm1aelpYUUtDV1p5WVcxbFgyUnBaeUF0TWlBdkx5QjJPaUIxYVc1ME9Bb0phWFJ2WWdvSlpYaDBjbUZqZENBM0lERUtDV05oYkd4emRXSWdLbkJ5YjJObGMzTmZjM1JoZEdsalgzUjFjR3hsWDJWc1pXMWxiblFLQ1daeVlXMWxYMlJwWnlBeElDOHZJSE4wYjNKaFoyVWdhMlY1THk5cFpHVnVkR2wwZVFvSlltOTRYMmRsZEFvS0NTOHZJR0p2ZUNCMllXeDFaU0JrYjJWeklHNXZkQ0JsZUdsemREb2dkR2hwY3k1cFpHVnVkR2wwYVdWektIVnpaWElwTG5aaGJIVmxDZ2xoYzNObGNuUUtDWE4wYjNKbElESTFOU0F2THlCbWRXeHNJR0Z5Y21GNUNnbHNiMkZrSURJMU5TQXZMeUJtZFd4c0lHRnljbUY1Q2dsbGVIUnlZV04wSURReElEZ0tDV0owYjJrS0NXbDBiMklLQ1dOaGJHeHpkV0lnS25CeWIyTmxjM05mYzNSaGRHbGpYM1IxY0d4bFgyVnNaVzFsYm5RS0NXWnlZVzFsWDJScFp5QXhJQzh2SUhOMGIzSmhaMlVnYTJWNUx5OXBaR1Z1ZEdsMGVRb0pZbTk0WDJkbGRBb0tDUzh2SUdKdmVDQjJZV3gxWlNCa2IyVnpJRzV2ZENCbGVHbHpkRG9nZEdocGN5NXBaR1Z1ZEdsMGFXVnpLSFZ6WlhJcExuWmhiSFZsQ2dsaGMzTmxjblFLQ1hOMGIzSmxJREkxTlNBdkx5Qm1kV3hzSUdGeWNtRjVDZ2xzYjJGa0lESTFOU0F2THlCbWRXeHNJR0Z5Y21GNUNnbGxlSFJ5WVdOMElEQWdPQW9KWW5SdmFRb0phWFJ2WWdvSlkyRnNiSE4xWWlBcWNISnZZMlZ6YzE5emRHRjBhV05mZEhWd2JHVmZaV3hsYldWdWRBb0pZbmwwWldNZ01pQXZMeUF3ZURBd0NnbHBiblJqSURBZ0x5OGdNQW9KWm5KaGJXVmZaR2xuSURFZ0x5OGdjM1J2Y21GblpTQnJaWGt2TDJsa1pXNTBhWFI1Q2dsaWIzaGZaMlYwQ2dvSkx5OGdZbTk0SUhaaGJIVmxJR1J2WlhNZ2JtOTBJR1Y0YVhOME9pQjBhR2x6TG1sa1pXNTBhWFJwWlhNb2RYTmxjaWt1ZG1Gc2RXVUtDV0Z6YzJWeWRBb0pjM1J2Y21VZ01qVTFJQzh2SUdaMWJHd2dZWEp5WVhrS0NXeHZZV1FnTWpVMUlDOHZJR1oxYkd3Z1lYSnlZWGtLQ1hCMWMyaHBiblFnTXpreUNnbG5aWFJpYVhRS0NYTmxkR0pwZEFvSlkyRnNiSE4xWWlBcWNISnZZMlZ6YzE5emRHRjBhV05mZEhWd2JHVmZaV3hsYldWdWRBb0pabkpoYldWZlpHbG5JREVnTHk4Z2MzUnZjbUZuWlNCclpYa3ZMMmxrWlc1MGFYUjVDZ2xpYjNoZloyVjBDZ29KTHk4Z1ltOTRJSFpoYkhWbElHUnZaWE1nYm05MElHVjRhWE4wT2lCMGFHbHpMbWxrWlc1MGFYUnBaWE1vZFhObGNpa3VkbUZzZFdVS0NXRnpjMlZ5ZEFvSmMzUnZjbVVnTWpVMUlDOHZJR1oxYkd3Z1lYSnlZWGtLQ1dsdWRHTWdOeUF2THlBMU1Bb0piRzloWkNBeU5UVWdMeThnWm5Wc2JDQmhjbkpoZVFvSmJHOWhaQ0F5TlRVZ0x5OGdablZzYkNCaGNuSmhlUW9KZFc1amIzWmxjaUF5Q2dsbGVIUnlZV04wWDNWcGJuUXhOZ29KWkhWd0lDOHZJR1IxY0d4cFkyRjBaU0J6ZEdGeWRDQnZaaUJsYkdWdFpXNTBDZ2xzYjJGa0lESTFOU0F2THlCbWRXeHNJR0Z5Y21GNUNnbHpkMkZ3Q2dsbGVIUnlZV04wWDNWcGJuUXhOaUF2THlCblpYUWdiblZ0WW1WeUlHOW1JR1ZzWlcxbGJuUnpDZ2xwYm5SaklERWdMeThnSUdkbGRDQjBlWEJsSUd4bGJtZDBhQW9KS2lBdkx5QnRkV3gwYVhCc2VTQmllU0IwZVhCbElHeGxibWQwYUFvSmFXNTBZeUF6SUM4dklESUtDU3NnTHk4Z1lXUmtJSFIzYnlCbWIzSWdiR1Z1WjNSb0NnbGxlSFJ5WVdOME13b0paWGgwY21GamRDQXlJREFLQ1dSMWNBb0piR1Z1Q2dscGRHOWlDZ2xsZUhSeVlXTjBJRFlnTWdvSmMzZGhjQW9KWTI5dVkyRjBDZ2xqWVd4c2MzVmlJQ3B3Y205alpYTnpYMlI1Ym1GdGFXTmZkSFZ3YkdWZlpXeGxiV1Z1ZEFvSlpuSmhiV1ZmWkdsbklERWdMeThnYzNSdmNtRm5aU0JyWlhrdkwybGtaVzUwYVhSNUNnbGliM2hmWjJWMENnb0pMeThnWW05NElIWmhiSFZsSUdSdlpYTWdibTkwSUdWNGFYTjBPaUIwYUdsekxtbGtaVzUwYVhScFpYTW9kWE5sY2lrdWRtRnNkV1VLQ1dGemMyVnlkQW9KYzNSdmNtVWdNalUxSUM4dklHWjFiR3dnWVhKeVlYa0tDV2x1ZEdNZ09DQXZMeUExTWdvSmJHOWhaQ0F5TlRVZ0x5OGdablZzYkNCaGNuSmhlUW9KYkc5aFpDQXlOVFVnTHk4Z1puVnNiQ0JoY25KaGVRb0pkVzVqYjNabGNpQXlDZ2xsZUhSeVlXTjBYM1ZwYm5ReE5nb0paSFZ3SUM4dklHUjFjR3hwWTJGMFpTQnpkR0Z5ZENCdlppQmxiR1Z0Wlc1MENnbHNiMkZrSURJMU5TQXZMeUJtZFd4c0lHRnljbUY1Q2dsemQyRndDZ2xsZUhSeVlXTjBYM1ZwYm5ReE5pQXZMeUJuWlhRZ2JuVnRZbVZ5SUc5bUlHVnNaVzFsYm5SekNnbHBiblJqSURFZ0x5OGdJR2RsZENCMGVYQmxJR3hsYm1kMGFBb0pLaUF2THlCdGRXeDBhWEJzZVNCaWVTQjBlWEJsSUd4bGJtZDBhQW9KYVc1MFl5QXpJQzh2SURJS0NTc2dMeThnWVdSa0lIUjNieUJtYjNJZ2JHVnVaM1JvQ2dsbGVIUnlZV04wTXdvSlpYaDBjbUZqZENBeUlEQUtDV1IxY0FvSmJHVnVDZ2xwZEc5aUNnbGxlSFJ5WVdOMElEWWdNZ29KYzNkaGNBb0pZMjl1WTJGMENnbGpZV3hzYzNWaUlDcHdjbTlqWlhOelgyUjVibUZ0YVdOZmRIVndiR1ZmWld4bGJXVnVkQW9KWm5KaGJXVmZaR2xuSURFZ0x5OGdjM1J2Y21GblpTQnJaWGt2TDJsa1pXNTBhWFI1Q2dsaWIzaGZaMlYwQ2dvSkx5OGdZbTk0SUhaaGJIVmxJR1J2WlhNZ2JtOTBJR1Y0YVhOME9pQjBhR2x6TG1sa1pXNTBhWFJwWlhNb2RYTmxjaWt1ZG1Gc2RXVUtDV0Z6YzJWeWRBb0pjM1J2Y21VZ01qVTFJQzh2SUdaMWJHd2dZWEp5WVhrS0NXeHZZV1FnTWpVMUlDOHZJR1oxYkd3Z1lYSnlZWGtLQ1dWNGRISmhZM1FnTlRRZ09Bb0pZblJ2YVFvSmFYUnZZZ29KWTJGc2JITjFZaUFxY0hKdlkyVnpjMTl6ZEdGMGFXTmZkSFZ3YkdWZlpXeGxiV1Z1ZEFvSlpuSmhiV1ZmWkdsbklERWdMeThnYzNSdmNtRm5aU0JyWlhrdkwybGtaVzUwYVhSNUNnbGliM2hmWjJWMENnb0pMeThnWW05NElIWmhiSFZsSUdSdlpYTWdibTkwSUdWNGFYTjBPaUIwYUdsekxtbGtaVzUwYVhScFpYTW9kWE5sY2lrdWRtRnNkV1VLQ1dGemMyVnlkQW9KYzNSdmNtVWdNalUxSUM4dklHWjFiR3dnWVhKeVlYa0tDV3h2WVdRZ01qVTFJQzh2SUdaMWJHd2dZWEp5WVhrS0NXVjRkSEpoWTNRZ05qSWdPQW9KWW5SdmFRb0phWFJ2WWdvSlkyRnNiSE4xWWlBcWNISnZZMlZ6YzE5emRHRjBhV05mZEhWd2JHVmZaV3hsYldWdWRBb0pabkpoYldWZlpHbG5JREVnTHk4Z2MzUnZjbUZuWlNCclpYa3ZMMmxrWlc1MGFYUjVDZ2xpYjNoZloyVjBDZ29KTHk4Z1ltOTRJSFpoYkhWbElHUnZaWE1nYm05MElHVjRhWE4wT2lCMGFHbHpMbWxrWlc1MGFYUnBaWE1vZFhObGNpa3VkbUZzZFdVS0NXRnpjMlZ5ZEFvSmMzUnZjbVVnTWpVMUlDOHZJR1oxYkd3Z1lYSnlZWGtLQ1d4dllXUWdNalUxSUM4dklHWjFiR3dnWVhKeVlYa0tDV1Y0ZEhKaFkzUWdOekFnT0FvSlluUnZhUW9KYVhSdllnb0pZMkZzYkhOMVlpQXFjSEp2WTJWemMxOXpkR0YwYVdOZmRIVndiR1ZmWld4bGJXVnVkQW9KWm5KaGJXVmZaR2xuSURFZ0x5OGdjM1J2Y21GblpTQnJaWGt2TDJsa1pXNTBhWFI1Q2dsaWIzaGZaMlYwQ2dvSkx5OGdZbTk0SUhaaGJIVmxJR1J2WlhNZ2JtOTBJR1Y0YVhOME9pQjBhR2x6TG1sa1pXNTBhWFJwWlhNb2RYTmxjaWt1ZG1Gc2RXVUtDV0Z6YzJWeWRBb0pjM1J2Y21VZ01qVTFJQzh2SUdaMWJHd2dZWEp5WVhrS0NXeHZZV1FnTWpVMUlDOHZJR1oxYkd3Z1lYSnlZWGtLQ1dWNGRISmhZM1FnTnpnZ09Bb0pZblJ2YVFvSmFYUnZZZ29KWTJGc2JITjFZaUFxY0hKdlkyVnpjMTl6ZEdGMGFXTmZkSFZ3YkdWZlpXeGxiV1Z1ZEFvSlpuSmhiV1ZmWkdsbklERWdMeThnYzNSdmNtRm5aU0JyWlhrdkwybGtaVzUwYVhSNUNnbGliM2hmWjJWMENnb0pMeThnWW05NElIWmhiSFZsSUdSdlpYTWdibTkwSUdWNGFYTjBPaUIwYUdsekxtbGtaVzUwYVhScFpYTW9kWE5sY2lrdWRtRnNkV1VLQ1dGemMyVnlkQW9KYzNSdmNtVWdNalUxSUM4dklHWjFiR3dnWVhKeVlYa0tDV3h2WVdRZ01qVTFJQzh2SUdaMWJHd2dZWEp5WVhrS0NXVjRkSEpoWTNRZ09EWWdPQW9KWW5SdmFRb0phWFJ2WWdvSlkyRnNiSE4xWWlBcWNISnZZMlZ6YzE5emRHRjBhV05mZEhWd2JHVmZaV3hsYldWdWRBb0pabkpoYldWZlpHbG5JREVnTHk4Z2MzUnZjbUZuWlNCclpYa3ZMMmxrWlc1MGFYUjVDZ2xpYjNoZloyVjBDZ29KTHk4Z1ltOTRJSFpoYkhWbElHUnZaWE1nYm05MElHVjRhWE4wT2lCMGFHbHpMbWxrWlc1MGFYUnBaWE1vZFhObGNpa3VkbUZzZFdVS0NXRnpjMlZ5ZEFvSmMzUnZjbVVnTWpVMUlDOHZJR1oxYkd3Z1lYSnlZWGtLQ1d4dllXUWdNalUxSUM4dklHWjFiR3dnWVhKeVlYa0tDV1Y0ZEhKaFkzUWdPVFFnT0FvSlluUnZhUW9KYVhSdllnb0pZMkZzYkhOMVlpQXFjSEp2WTJWemMxOXpkR0YwYVdOZmRIVndiR1ZmWld4bGJXVnVkQW9KWm5KaGJXVmZaR2xuSURFZ0x5OGdjM1J2Y21GblpTQnJaWGt2TDJsa1pXNTBhWFI1Q2dsaWIzaGZaMlYwQ2dvSkx5OGdZbTk0SUhaaGJIVmxJR1J2WlhNZ2JtOTBJR1Y0YVhOME9pQjBhR2x6TG1sa1pXNTBhWFJwWlhNb2RYTmxjaWt1ZG1Gc2RXVUtDV0Z6YzJWeWRBb0pjM1J2Y21VZ01qVTFJQzh2SUdaMWJHd2dZWEp5WVhrS0NXeHZZV1FnTWpVMUlDOHZJR1oxYkd3Z1lYSnlZWGtLQ1dWNGRISmhZM1FnT1NBNENnbGlkRzlwQ2dscGRHOWlDZ2xqWVd4c2MzVmlJQ3B3Y205alpYTnpYM04wWVhScFkxOTBkWEJzWlY5bGJHVnRaVzUwQ2dsbWNtRnRaVjlrYVdjZ01TQXZMeUJ6ZEc5eVlXZGxJR3RsZVM4dmFXUmxiblJwZEhrS0NXSnZlRjluWlhRS0Nna3ZMeUJpYjNnZ2RtRnNkV1VnWkc5bGN5QnViM1FnWlhocGMzUTZJSFJvYVhNdWFXUmxiblJwZEdsbGN5aDFjMlZ5S1M1MllXeDFaUW9KWVhOelpYSjBDZ2x6ZEc5eVpTQXlOVFVnTHk4Z1puVnNiQ0JoY25KaGVRb0piRzloWkNBeU5UVWdMeThnWm5Wc2JDQmhjbkpoZVFvSlpYaDBjbUZqZENBeE55QTRDZ2xpZEc5cENnbHBkRzlpQ2dsallXeHNjM1ZpSUNwd2NtOWpaWE56WDNOMFlYUnBZMTkwZFhCc1pWOWxiR1Z0Wlc1MENnbGllWFJsWXlBeUlDOHZJREI0TURBS0NXbHVkR01nTUNBdkx5QXdDZ2xtY21GdFpWOWthV2NnTVNBdkx5QnpkRzl5WVdkbElHdGxlUzh2YVdSbGJuUnBkSGtLQ1dKdmVGOW5aWFFLQ2drdkx5QmliM2dnZG1Gc2RXVWdaRzlsY3lCdWIzUWdaWGhwYzNRNklIUm9hWE11YVdSbGJuUnBkR2xsY3loMWMyVnlLUzUyWVd4MVpRb0pZWE56WlhKMENnbHpkRzl5WlNBeU5UVWdMeThnWm5Wc2JDQmhjbkpoZVFvSmJHOWhaQ0F5TlRVZ0x5OGdablZzYkNCaGNuSmhlUW9KYVc1MFl5QTBJQzh2SURZMENnbG5aWFJpYVhRS0NYTmxkR0pwZEFvSlkyRnNiSE4xWWlBcWNISnZZMlZ6YzE5emRHRjBhV05mZEhWd2JHVmZaV3hsYldWdWRBb0pabkpoYldWZlpHbG5JREVnTHk4Z2MzUnZjbUZuWlNCclpYa3ZMMmxrWlc1MGFYUjVDZ2xpYjNoZloyVjBDZ29KTHk4Z1ltOTRJSFpoYkhWbElHUnZaWE1nYm05MElHVjRhWE4wT2lCMGFHbHpMbWxrWlc1MGFYUnBaWE1vZFhObGNpa3VkbUZzZFdVS0NXRnpjMlZ5ZEFvSmMzUnZjbVVnTWpVMUlDOHZJR1oxYkd3Z1lYSnlZWGtLQ1d4dllXUWdNalUxSUM4dklHWjFiR3dnWVhKeVlYa0tDV1Y0ZEhKaFkzUWdNalVnT0FvSlluUnZhUW9KYVhSdllnb0pZMkZzYkhOMVlpQXFjSEp2WTJWemMxOXpkR0YwYVdOZmRIVndiR1ZmWld4bGJXVnVkQW9KWm5KaGJXVmZaR2xuSURFZ0x5OGdjM1J2Y21GblpTQnJaWGt2TDJsa1pXNTBhWFI1Q2dsaWIzaGZaMlYwQ2dvSkx5OGdZbTk0SUhaaGJIVmxJR1J2WlhNZ2JtOTBJR1Y0YVhOME9pQjBhR2x6TG1sa1pXNTBhWFJwWlhNb2RYTmxjaWt1ZG1Gc2RXVUtDV0Z6YzJWeWRBb0pjM1J2Y21VZ01qVTFJQzh2SUdaMWJHd2dZWEp5WVhrS0NXeHZZV1FnTWpVMUlDOHZJR1oxYkd3Z1lYSnlZWGtLQ1dWNGRISmhZM1FnTXpNZ09Bb0pZblJ2YVFvSmFYUnZZZ29KWTJGc2JITjFZaUFxY0hKdlkyVnpjMTl6ZEdGMGFXTmZkSFZ3YkdWZlpXeGxiV1Z1ZEFvSllubDBaV01nTWlBdkx5QXdlREF3Q2dscGJuUmpJREFnTHk4Z01Bb0pabkpoYldWZlpHbG5JREVnTHk4Z2MzUnZjbUZuWlNCclpYa3ZMMmxrWlc1MGFYUjVDZ2xpYjNoZloyVjBDZ29KTHk4Z1ltOTRJSFpoYkhWbElHUnZaWE1nYm05MElHVjRhWE4wT2lCMGFHbHpMbWxrWlc1MGFYUnBaWE1vZFhObGNpa3VkbUZzZFdVS0NXRnpjMlZ5ZEFvSmMzUnZjbVVnTWpVMUlDOHZJR1oxYkd3Z1lYSnlZWGtLQ1d4dllXUWdNalUxSUM4dklHWjFiR3dnWVhKeVlYa0tDV2x1ZEdNZ05pQXZMeUE0TVRZS0NXZGxkR0pwZEFvSmMyVjBZbWwwQ2dsallXeHNjM1ZpSUNwd2NtOWpaWE56WDNOMFlYUnBZMTkwZFhCc1pWOWxiR1Z0Wlc1MENnbHdiM0FnTHk4Z2NHOXdJR2hsWVdRZ2IyWm1jMlYwQ2dsamIyNWpZWFFnTHk4Z1kyOXVZMkYwSUdobFlXUWdZVzVrSUhSaGFXd0tDV1p5WVcxbFgySjFjbmtnTWlBdkx5QnlaWFE2SUZWelpYSkpibVp2VmpFS0Nna3ZMeUJqYjI1MGNtRmpkSE5jUW1saGRHVmpTV1JsYm5ScGRIbFFjbTkyYVdSbGNpNWhiR2R2TG5Sek9qTTNPUW9KTHk4Z2NtVjBkWEp1SUhKbGREc0tDV1p5WVcxbFgyUnBaeUF5SUM4dklISmxkRG9nVlhObGNrbHVabTlXTVFvS0ttZGxkRlZ6WlhJcWNtVjBkWEp1T2dvSkx5OGdjMlYwSUhSb1pTQnpkV0p5YjNWMGFXNWxJSEpsZEhWeWJpQjJZV3gxWlFvSlpuSmhiV1ZmWW5WeWVTQXdDZ29KTHk4Z2NHOXdJR0ZzYkNCc2IyTmhiQ0IyWVhKcFlXSnNaWE1nWm5KdmJTQjBhR1VnYzNSaFkyc0tDWEJ2Y0c0Z01nb0pjbVYwYzNWaUNnb3ZMeUJuWlhSVmMyVnlVMmh2Y25Rb1lXUmtjbVZ6Y3l4MWFXNTBPQ2tvZFdsdWREZ3NkV2x1ZERZMExIVnBiblEyTkN4MWFXNTBOalFzWW05dmJDa0tLbUZpYVY5eWIzVjBaVjluWlhSVmMyVnlVMmh2Y25RNkNna3ZMeUJVYUdVZ1FVSkpJSEpsZEhWeWJpQndjbVZtYVhnS0NXSjVkR1ZqSURZZ0x5OGdNSGd4TlRGbU4yTTNOUW9LQ1M4dklIWTZJSFZwYm5RNENnbDBlRzVoSUVGd2NHeHBZMkYwYVc5dVFYSm5jeUF5Q2dsa2RYQUtDV3hsYmdvSmFXNTBZeUF4SUM4dklERUtDVDA5Q2dvSkx5OGdZWEpuZFcxbGJuUWdNQ0FvZGlrZ1ptOXlJR2RsZEZWelpYSlRhRzl5ZENCdGRYTjBJR0psSUdFZ2RXbHVkRGdLQ1dGemMyVnlkQW9KWW5SdmFRb0tDUzh2SUhWelpYSTZJR0ZrWkhKbGMzTUtDWFI0Ym1FZ1FYQndiR2xqWVhScGIyNUJjbWR6SURFS0NXUjFjQW9KYkdWdUNnbHBiblJqSURJZ0x5OGdNeklLQ1QwOUNnb0pMeThnWVhKbmRXMWxiblFnTVNBb2RYTmxjaWtnWm05eUlHZGxkRlZ6WlhKVGFHOXlkQ0J0ZFhOMElHSmxJR0VnWVdSa2NtVnpjd29KWVhOelpYSjBDZ29KTHk4Z1pYaGxZM1YwWlNCblpYUlZjMlZ5VTJodmNuUW9ZV1JrY21WemN5eDFhVzUwT0Nrb2RXbHVkRGdzZFdsdWREWTBMSFZwYm5RMk5DeDFhVzUwTmpRc1ltOXZiQ2tLQ1dOaGJHeHpkV0lnWjJWMFZYTmxjbE5vYjNKMENnbGpiMjVqWVhRS0NXeHZad29KYVc1MFl5QXhJQzh2SURFS0NYSmxkSFZ5YmdvS0x5OGdaMlYwVlhObGNsTm9iM0owS0hWelpYSTZJRUZrWkhKbGMzTXNJSFk2SUhWcGJuUTRLVG9nVlhObGNrbHVabTlUYUc5eWRGWXhDaTh2Q2k4dklGSmxkSFZ5Ym5NZ2MyaHZjblFnZFhObGNpQnBibVp2Y20xaGRHbHZiaUF0SUdabFpTQnRkV3gwYVhCc2FXVnlMQ0IyWlhKcFptbGpZWFJwYjI0Z1kyeGhjM01zSUdWdVoyRm5aVzFsYm5RZ1kyeGhjM01nTGk0S0x5OEtMeThnUUhCaGNtRnRJSFZ6WlhJZ1IyVjBJR2x1Wm04Z1ptOXlJSE53WldOcFptbGpJSFZ6WlhJZ1lXUmtjbVZ6Y3dvdkx5QkFjR0Z5WVcwZ2RpQldaWEp6YVc5dUlHOW1JSFJvWlNCa1lYUmhJSE4wY25WamRIVnlaU0IwYnlCeVpYUjFjbTRLWjJWMFZYTmxjbE5vYjNKME9nb0pjSEp2ZEc4Z01pQXhDZ29KTHk4Z1VIVnphQ0JsYlhCMGVTQmllWFJsY3lCaFpuUmxjaUIwYUdVZ1puSmhiV1VnY0c5cGJuUmxjaUIwYnlCeVpYTmxjblpsSUhOd1lXTmxJR1p2Y2lCc2IyTmhiQ0IyWVhKcFlXSnNaWE1LQ1dKNWRHVmpJREFnTHk4Z01IZ0tDV1IxY0c0Z01nb0tDUzh2SUdOdmJuUnlZV04wYzF4Q2FXRjBaV05KWkdWdWRHbDBlVkJ5YjNacFpHVnlMbUZzWjI4dWRITTZNemt3Q2drdkx5QmhjM05sY25Rb2RpQTlQVDBnTVN3Z0lrTjFjbkpsYm5Sc2VTQnpkWEJ3YjNKMFpXUWdkbVZ5YzJsdmJpQnZaaUIwYUdVZ1pHRjBZU0J6ZEhKMVkzUjFjbVVnYVhNZ0p6RW5JaWtLQ1daeVlXMWxYMlJwWnlBdE1pQXZMeUIyT2lCMWFXNTBPQW9KYVc1MFl5QXhJQzh2SURFS0NUMDlDZ29KTHk4Z1EzVnljbVZ1ZEd4NUlITjFjSEJ2Y25SbFpDQjJaWEp6YVc5dUlHOW1JSFJvWlNCa1lYUmhJSE4wY25WamRIVnlaU0JwY3lBbk1TY0tDV0Z6YzJWeWRBb0tDUzh2SUNwcFpqRmZZMjl1WkdsMGFXOXVDZ2t2THlCamIyNTBjbUZqZEhOY1FtbGhkR1ZqU1dSbGJuUnBkSGxRY205MmFXUmxjaTVoYkdkdkxuUnpPak01TVFvSkx5OGdJWFJvYVhNdWFXUmxiblJwZEdsbGN5aDFjMlZ5S1M1bGVHbHpkSE1LQ1dKNWRHVmpJRE1nTHk4Z0lDSnBJZ29KWm5KaGJXVmZaR2xuSUMweElDOHZJSFZ6WlhJNklFRmtaSEpsYzNNS0NXTnZibU5oZEFvSlltOTRYMnhsYmdvSmMzZGhjQW9KY0c5d0Nna2hDZ2xpZWlBcWFXWXhYMlZ1WkFvS0NTOHZJQ3BwWmpGZlkyOXVjMlZ4ZFdWdWRBb0pMeThnWTI5dWRISmhZM1J6WEVKcFlYUmxZMGxrWlc1MGFYUjVVSEp2ZG1sa1pYSXVZV3huYnk1MGN6b3pPVElLQ1M4dklISmxkRTV2U1dSbGJuUnBkSGs2SUZWelpYSkpibVp2VTJodmNuUldNU0E5SUhzS0NTOHZJQ0FnSUNBZ0lDQWdkbVZ5YzJsdmJqb2dkaXdLQ1M4dklDQWdJQ0FnSUNBZ1ltRnpaVG9nVTBOQlRFVWdZWE1nZFdsdWREWTBMQW9KTHk4Z0lDQWdJQ0FnSUNCbVpXVk5kV3gwYVhCc2FXVnlPaUFvTWlBcUlGTkRRVXhGS1NCaGN5QjFhVzUwTmpRc0Nna3ZMeUFnSUNBZ0lDQWdJR2x6VEc5amEyVmtPaUJtWVd4elpTd0tDUzh2SUNBZ0lDQWdJQ0FnZG1WeWFXWnBZMkYwYVc5dVEyeGhjM002SURBc0Nna3ZMeUFnSUNBZ0lDQjlDZ2xtY21GdFpWOWthV2NnTFRJZ0x5OGdkam9nZFdsdWREZ0tDV2wwYjJJS0NXVjRkSEpoWTNRZ055QXhDZ2xpZVhSbFl5QXhJQzh2SURCNE1EQXdNREF3TURBd01EQXdNREF3TUFvSlkyOXVZMkYwQ2dsaWVYUmxZeUE0SUM4dklEQjRNREF3TURBd01EQTNOek0xT1RRd01Bb0pZMjl1WTJGMENnbGllWFJsWXlBNUlDOHZJREI0TURBd01EQXdNREF6WWpsaFkyRXdNQW9KWTI5dVkyRjBDZ2xpZVhSbFl5QXlJQzh2SURCNE1EQUtDV2x1ZEdNZ01DQXZMeUF3Q2dsa2RYQUtDWE5sZEdKcGRBb0pZMjl1WTJGMENnbG1jbUZ0WlY5aWRYSjVJREFnTHk4Z2NtVjBUbTlKWkdWdWRHbDBlVG9nVlhObGNrbHVabTlUYUc5eWRGWXhDZ29KTHk4Z1kyOXVkSEpoWTNSelhFSnBZWFJsWTBsa1pXNTBhWFI1VUhKdmRtbGtaWEl1WVd4bmJ5NTBjem96T1RrS0NTOHZJSEpsZEhWeWJpQnlaWFJPYjBsa1pXNTBhWFI1T3dvSlpuSmhiV1ZmWkdsbklEQWdMeThnY21WMFRtOUpaR1Z1ZEdsMGVUb2dWWE5sY2tsdVptOVRhRzl5ZEZZeENnbGlJQ3BuWlhSVmMyVnlVMmh2Y25RcWNtVjBkWEp1Q2dvcWFXWXhYMlZ1WkRvS0NTOHZJR052Ym5SeVlXTjBjMXhDYVdGMFpXTkpaR1Z1ZEdsMGVWQnliM1pwWkdWeUxtRnNaMjh1ZEhNNk5EQXhDZ2t2THlCcFpHVnVkR2wwZVNBOUlIUm9hWE11YVdSbGJuUnBkR2xsY3loMWMyVnlLUzUyWVd4MVpRb0pZbmwwWldNZ015QXZMeUFnSW1raUNnbG1jbUZ0WlY5a2FXY2dMVEVnTHk4Z2RYTmxjam9nUVdSa2NtVnpjd29KWTI5dVkyRjBDZ2xtY21GdFpWOWlkWEo1SURFZ0x5OGdjM1J2Y21GblpTQnJaWGt2TDJsa1pXNTBhWFI1Q2dvSkx5OGdZMjl1ZEhKaFkzUnpYRUpwWVhSbFkwbGtaVzUwYVhSNVVISnZkbWxrWlhJdVlXeG5ieTUwY3pvME1ETUtDUzh2SUhKbGREb2dWWE5sY2tsdVptOVRhRzl5ZEZZeElEMGdld29KTHk4Z0lDQWdJQ0FnZG1WeWMybHZiam9nZGl3S0NTOHZJQ0FnSUNBZ0lHSmhjMlU2SUdsa1pXNTBhWFI1TG1abFpVMTFiSFJwY0d4cFpYSkNZWE5sTEFvSkx5OGdJQ0FnSUNBZ1ptVmxUWFZzZEdsd2JHbGxjam9nYVdSbGJuUnBkSGt1Wm1WbFRYVnNkR2x3YkdsbGNpd0tDUzh2SUNBZ0lDQWdJR2x6VEc5amEyVmtPaUJwWkdWdWRHbDBlUzVwYzB4dlkydGxaQ3dLQ1M4dklDQWdJQ0FnSUhabGNtbG1hV05oZEdsdmJrTnNZWE56T2lCcFpHVnVkR2wwZVM1MlpYSnBabWxqWVhScGIyNURiR0Z6Y3l3S0NTOHZJQ0FnSUNCOUNnbG1jbUZ0WlY5a2FXY2dMVElnTHk4Z2Rqb2dkV2x1ZERnS0NXbDBiMklLQ1dWNGRISmhZM1FnTnlBeENnbG1jbUZ0WlY5a2FXY2dNU0F2THlCemRHOXlZV2RsSUd0bGVTOHZhV1JsYm5ScGRIa0tDV0p2ZUY5blpYUUtDZ2t2THlCaWIzZ2dkbUZzZFdVZ1pHOWxjeUJ1YjNRZ1pYaHBjM1E2SUhSb2FYTXVhV1JsYm5ScGRHbGxjeWgxYzJWeUtTNTJZV3gxWlFvSllYTnpaWEowQ2dsemRHOXlaU0F5TlRVZ0x5OGdablZzYkNCaGNuSmhlUW9KYkc5aFpDQXlOVFVnTHk4Z1puVnNiQ0JoY25KaGVRb0paWGgwY21GamRDQXdJRGdLQ1dKMGIya0tDV2wwYjJJS0NXTnZibU5oZEFvSlpuSmhiV1ZmWkdsbklERWdMeThnYzNSdmNtRm5aU0JyWlhrdkwybGtaVzUwYVhSNUNnbGliM2hmWjJWMENnb0pMeThnWW05NElIWmhiSFZsSUdSdlpYTWdibTkwSUdWNGFYTjBPaUIwYUdsekxtbGtaVzUwYVhScFpYTW9kWE5sY2lrdWRtRnNkV1VLQ1dGemMyVnlkQW9KYzNSdmNtVWdNalUxSUM4dklHWjFiR3dnWVhKeVlYa0tDV3h2WVdRZ01qVTFJQzh2SUdaMWJHd2dZWEp5WVhrS0NXVjRkSEpoWTNRZ09TQTRDZ2xpZEc5cENnbHBkRzlpQ2dsamIyNWpZWFFLQ1daeVlXMWxYMlJwWnlBeElDOHZJSE4wYjNKaFoyVWdhMlY1THk5cFpHVnVkR2wwZVFvSlltOTRYMmRsZEFvS0NTOHZJR0p2ZUNCMllXeDFaU0JrYjJWeklHNXZkQ0JsZUdsemREb2dkR2hwY3k1cFpHVnVkR2wwYVdWektIVnpaWElwTG5aaGJIVmxDZ2xoYzNObGNuUUtDWE4wYjNKbElESTFOU0F2THlCbWRXeHNJR0Z5Y21GNUNnbHNiMkZrSURJMU5TQXZMeUJtZFd4c0lHRnljbUY1Q2dsbGVIUnlZV04wSURFM0lEZ0tDV0owYjJrS0NXbDBiMklLQ1dOdmJtTmhkQW9KWW5sMFpXTWdNaUF2THlBd2VEQXdDZ2xwYm5SaklEQWdMeThnTUFvSlpuSmhiV1ZmWkdsbklERWdMeThnYzNSdmNtRm5aU0JyWlhrdkwybGtaVzUwYVhSNUNnbGliM2hmWjJWMENnb0pMeThnWW05NElIWmhiSFZsSUdSdlpYTWdibTkwSUdWNGFYTjBPaUIwYUdsekxtbGtaVzUwYVhScFpYTW9kWE5sY2lrdWRtRnNkV1VLQ1dGemMyVnlkQW9KYzNSdmNtVWdNalUxSUM4dklHWjFiR3dnWVhKeVlYa0tDV3h2WVdRZ01qVTFJQzh2SUdaMWJHd2dZWEp5WVhrS0NXbHVkR01nTkNBdkx5QTJOQW9KWjJWMFltbDBDZ2x6WlhSaWFYUUtDV052Ym1OaGRBb0pabkpoYldWZlluVnllU0F5SUM4dklISmxkRG9nVlhObGNrbHVabTlUYUc5eWRGWXhDZ29KTHk4Z1kyOXVkSEpoWTNSelhFSnBZWFJsWTBsa1pXNTBhWFI1VUhKdmRtbGtaWEl1WVd4bmJ5NTBjem8wTVRBS0NTOHZJSEpsZEhWeWJpQnlaWFE3Q2dsbWNtRnRaVjlrYVdjZ01pQXZMeUJ5WlhRNklGVnpaWEpKYm1adlUyaHZjblJXTVFvS0ttZGxkRlZ6WlhKVGFHOXlkQ3B5WlhSMWNtNDZDZ2t2THlCelpYUWdkR2hsSUhOMVluSnZkWFJwYm1VZ2NtVjBkWEp1SUhaaGJIVmxDZ2xtY21GdFpWOWlkWEo1SURBS0Nna3ZMeUJ3YjNBZ1lXeHNJR3h2WTJGc0lIWmhjbWxoWW14bGN5Qm1jbTl0SUhSb1pTQnpkR0ZqYXdvSmNHOXdiaUF5Q2dseVpYUnpkV0lLQ2k4dklIZHBkR2hrY21GM1JYaGpaWE56UVhOelpYUnpLSFZwYm5RMk5DeDFhVzUwTmpRc2RXbHVkRFkwS1hWcGJuUTJOQW9xWVdKcFgzSnZkWFJsWDNkcGRHaGtjbUYzUlhoalpYTnpRWE56WlhSek9nb0pMeThnVkdobElFRkNTU0J5WlhSMWNtNGdjSEpsWm1sNENnbGllWFJsWXlBMklDOHZJREI0TVRVeFpqZGpOelVLQ2drdkx5QmhiVzkxYm5RNklIVnBiblEyTkFvSmRIaHVZU0JCY0hCc2FXTmhkR2x2YmtGeVozTWdNd29KWW5SdmFRb0tDUzh2SUdGemMyVjBPaUIxYVc1ME5qUUtDWFI0Ym1FZ1FYQndiR2xqWVhScGIyNUJjbWR6SURJS0NXSjBiMmtLQ2drdkx5QmhjSEJDYVdGMFpXTkRiMjVtYVdkUWNtOTJhV1JsY2pvZ2RXbHVkRFkwQ2dsMGVHNWhJRUZ3Y0d4cFkyRjBhVzl1UVhKbmN5QXhDZ2xpZEc5cENnb0pMeThnWlhobFkzVjBaU0IzYVhSb1pISmhkMFY0WTJWemMwRnpjMlYwY3loMWFXNTBOalFzZFdsdWREWTBMSFZwYm5RMk5DbDFhVzUwTmpRS0NXTmhiR3h6ZFdJZ2QybDBhR1J5WVhkRmVHTmxjM05CYzNObGRITUtDV2wwYjJJS0NXTnZibU5oZEFvSmJHOW5DZ2xwYm5SaklERWdMeThnTVFvSmNtVjBkWEp1Q2dvdkx5QjNhWFJvWkhKaGQwVjRZMlZ6YzBGemMyVjBjeWhoY0hCQ2FXRjBaV05EYjI1bWFXZFFjbTkyYVdSbGNqb2dRWEJ3U1VRc0lHRnpjMlYwT2lCQmMzTmxkRWxFTENCaGJXOTFiblE2SUhWcGJuUTJOQ2s2SUhWcGJuUTJOQW92THdvdkx5QkpaaUJ6YjIxbGIyNWxJR1JsY0c5emFYUnpJR1Y0WTJWemN5QmhjM05sZEhNZ2RHOGdkR2hwY3lCemJXRnlkQ0JqYjI1MGNtRmpkQ0JpYVdGMFpXTWdZMkZ1SUhWelpTQjBhR1Z0TGdvdkx3b3ZMeUJQYm14NUlHRmtaSEpsYzNORmVHVmpkWFJwZG1WR1pXVWdhWE1nWVd4c2IzZGxaQ0IwYnlCbGVHVmpkWFJsSUhSb2FYTWdiV1YwYUc5a0xnb3ZMd292THlCQWNHRnlZVzBnWVhCd1FtbGhkR1ZqUTI5dVptbG5VSEp2ZG1sa1pYSWdRbWxoZEdWaklHTnZibVpwWnlCaGNIQXVJRTl1YkhrZ1lXUmtjbVZ6YzBWNFpXTjFkR2wyWlVabFpTQnBjeUJoYkd4dmQyVmtJSFJ2SUdWNFpXTjFkR1VnZEdocGN5QnRaWFJvYjJRdUNpOHZJRUJ3WVhKaGJTQmhjM05sZENCQmMzTmxkQ0IwYnlCM2FYUm9aSEpoZHk0Z1NXWWdibUYwYVhabElIUnZhMlZ1TENCMGFHVnVJSHBsY204S0x5OGdRSEJoY21GdElHRnRiM1Z1ZENCQmJXOTFiblFnYjJZZ2RHaGxJR0Z6YzJWMElIUnZJR0psSUhkcGRHaGtjbUYzYmdwM2FYUm9aSEpoZDBWNFkyVnpjMEZ6YzJWMGN6b0tDWEJ5YjNSdklETWdNUW9LQ1M4dklGQjFjMmdnWlcxd2RIa2dZbmwwWlhNZ1lXWjBaWElnZEdobElHWnlZVzFsSUhCdmFXNTBaWElnZEc4Z2NtVnpaWEoyWlNCemNHRmpaU0JtYjNJZ2JHOWpZV3dnZG1GeWFXRmliR1Z6Q2dsaWVYUmxZeUF3SUM4dklEQjRDZ2xrZFhBS0Nna3ZMeUJqYjI1MGNtRmpkSE5jUW1saGRHVmpTV1JsYm5ScGRIbFFjbTkyYVdSbGNpNWhiR2R2TG5Sek9qUXlNZ29KTHk4Z1lYTnpaWEowS0dGd2NFSnBZWFJsWTBOdmJtWnBaMUJ5YjNacFpHVnlJRDA5UFNCMGFHbHpMbUZ3Y0VKcFlYUmxZME52Ym1acFoxQnliM1pwWkdWeUxuWmhiSFZsTENBblEyOXVabWxuZFhKaGRHbHZiaUJoY0hBZ1pHOWxjeUJ1YjNRZ2JXRjBZMmduS1FvSlpuSmhiV1ZmWkdsbklDMHhJQzh2SUdGd2NFSnBZWFJsWTBOdmJtWnBaMUJ5YjNacFpHVnlPaUJCY0hCSlJBb0pZbmwwWldNZ05DQXZMeUFnSWtJaUNnbGhjSEJmWjJ4dlltRnNYMmRsZEFvSlBUMEtDZ2t2THlCRGIyNW1hV2QxY21GMGFXOXVJR0Z3Y0NCa2IyVnpJRzV2ZENCdFlYUmphQW9KWVhOelpYSjBDZ29KTHk4Z1kyOXVkSEpoWTNSelhFSnBZWFJsWTBsa1pXNTBhWFI1VUhKdmRtbGtaWEl1WVd4bmJ5NTBjem8wTWpNS0NTOHZJR0ZrWkhKbGMzTkZlR1ZqZFhScGRtVkdaV1VnUFNCaGNIQkNhV0YwWldORGIyNW1hV2RRY205MmFXUmxjaTVuYkc5aVlXeFRkR0YwWlNnblpXWW5LU0JoY3lCQlpHUnlaWE56Q2dsbWNtRnRaVjlrYVdjZ0xURWdMeThnWVhCd1FtbGhkR1ZqUTI5dVptbG5VSEp2ZG1sa1pYSTZJRUZ3Y0VsRUNnbGllWFJsWXlBeE1TQXZMeUFnSW1WbUlnb0pZWEJ3WDJkc2IySmhiRjluWlhSZlpYZ0tDZ2t2THlCbmJHOWlZV3dnYzNSaGRHVWdkbUZzZFdVZ1pHOWxjeUJ1YjNRZ1pYaHBjM1E2SUdGd2NFSnBZWFJsWTBOdmJtWnBaMUJ5YjNacFpHVnlMbWRzYjJKaGJGTjBZWFJsS0NkbFppY3BDZ2xoYzNObGNuUUtDV1p5WVcxbFgySjFjbmtnTUNBdkx5QmhaR1J5WlhOelJYaGxZM1YwYVhabFJtVmxPaUJoWkdSeVpYTnpDZ29KTHk4Z1kyOXVkSEpoWTNSelhFSnBZWFJsWTBsa1pXNTBhWFI1VUhKdmRtbGtaWEl1WVd4bmJ5NTBjem8wTWpRS0NTOHZJSEJoZFhObFpDQTlJR0Z3Y0VKcFlYUmxZME52Ym1acFoxQnliM1pwWkdWeUxtZHNiMkpoYkZOMFlYUmxLQ2R6SnlrZ1lYTWdkV2x1ZERZMENnbG1jbUZ0WlY5a2FXY2dMVEVnTHk4Z1lYQndRbWxoZEdWalEyOXVabWxuVUhKdmRtbGtaWEk2SUVGd2NFbEVDZ2xpZVhSbFl5QTFJQzh2SUNBaWN5SUtDV0Z3Y0Y5bmJHOWlZV3hmWjJWMFgyVjRDZ29KTHk4Z1oyeHZZbUZzSUhOMFlYUmxJSFpoYkhWbElHUnZaWE1nYm05MElHVjRhWE4wT2lCaGNIQkNhV0YwWldORGIyNW1hV2RRY205MmFXUmxjaTVuYkc5aVlXeFRkR0YwWlNnbmN5Y3BDZ2xoYzNObGNuUUtDV1p5WVcxbFgySjFjbmtnTVNBdkx5QndZWFZ6WldRNklIVnBiblEyTkFvS0NTOHZJR052Ym5SeVlXTjBjMXhDYVdGMFpXTkpaR1Z1ZEdsMGVWQnliM1pwWkdWeUxtRnNaMjh1ZEhNNk5ESTFDZ2t2THlCaGMzTmxjblFvY0dGMWMyVmtJRDA5UFNBd0xDQW5SVkpTWDFCQlZWTkZSQ2NwQ2dsbWNtRnRaVjlrYVdjZ01TQXZMeUJ3WVhWelpXUTZJSFZwYm5RMk5Bb0phVzUwWXlBd0lDOHZJREFLQ1QwOUNnb0pMeThnUlZKU1gxQkJWVk5GUkFvSllYTnpaWEowQ2dvSkx5OGdZMjl1ZEhKaFkzUnpYRUpwWVhSbFkwbGtaVzUwYVhSNVVISnZkbWxrWlhJdVlXeG5ieTUwY3pvME1qWUtDUzh2SUdGemMyVnlkQ2dLQ1M4dklDQWdJQ0FnSUhSb2FYTXVkSGh1TG5ObGJtUmxjaUE5UFQwZ1lXUmtjbVZ6YzBWNFpXTjFkR2wyWlVabFpTd0tDUzh2SUNBZ0lDQWdJQ2RQYm14NUlHWmxaU0JsZUdWamRYUnZjaUJ6WlhSMWNDQnBiaUIwYUdVZ1kyOXVabWxuSUdOaGJpQjBZV3RsSUhSb1pTQmpiMnhzWldOMFpXUWdabVZsY3ljS0NTOHZJQ0FnSUNBcENnbDBlRzRnVTJWdVpHVnlDZ2xtY21GdFpWOWthV2NnTUNBdkx5QmhaR1J5WlhOelJYaGxZM1YwYVhabFJtVmxPaUJoWkdSeVpYTnpDZ2s5UFFvS0NTOHZJRTl1YkhrZ1ptVmxJR1Y0WldOMWRHOXlJSE5sZEhWd0lHbHVJSFJvWlNCamIyNW1hV2NnWTJGdUlIUmhhMlVnZEdobElHTnZiR3hsWTNSbFpDQm1aV1Z6Q2dsaGMzTmxjblFLQ2drdkx5QmpiMjUwY21GamRITmNRbWxoZEdWalNXUmxiblJwZEhsUWNtOTJhV1JsY2k1aGJHZHZMblJ6T2pRek1Rb0pMeThnZEdocGN5NWtiMEY0Wm1WeUtIUm9hWE11ZEhodUxuTmxibVJsY2l3Z1lYTnpaWFFzSUdGdGIzVnVkQ2tLQ1daeVlXMWxYMlJwWnlBdE15QXZMeUJoYlc5MWJuUTZJSFZwYm5RMk5Bb0pabkpoYldWZlpHbG5JQzB5SUM4dklHRnpjMlYwT2lCQmMzTmxkRWxFQ2dsMGVHNGdVMlZ1WkdWeUNnbGpZV3hzYzNWaUlHUnZRWGhtWlhJS0Nna3ZMeUJqYjI1MGNtRmpkSE5jUW1saGRHVmpTV1JsYm5ScGRIbFFjbTkyYVdSbGNpNWhiR2R2TG5Sek9qUXpNd29KTHk4Z2NtVjBkWEp1SUdGdGIzVnVkRHNLQ1daeVlXMWxYMlJwWnlBdE15QXZMeUJoYlc5MWJuUTZJSFZwYm5RMk5Bb0tDUzh2SUhObGRDQjBhR1VnYzNWaWNtOTFkR2x1WlNCeVpYUjFjbTRnZG1Gc2RXVUtDV1p5WVcxbFgySjFjbmtnTUFvS0NTOHZJSEJ2Y0NCaGJHd2diRzlqWVd3Z2RtRnlhV0ZpYkdWeklHWnliMjBnZEdobElITjBZV05yQ2dsd2IzQnVJREVLQ1hKbGRITjFZZ29LTHk4Z1pHOUJlR1psY2loeVpXTmxhWFpsY2pvZ1FXUmtjbVZ6Y3l3Z1lYTnpaWFE2SUVGemMyVjBTVVFzSUdGdGIzVnVkRG9nZFdsdWREWTBLVG9nZG05cFpBb3ZMd292THlCRmVHVmpkWFJsY3lCNFptVnlJRzltSUhCaGVTQndZWGx0Wlc1MElHMWxkR2h2WkhNZ2RHOGdjM0JsWTJsbWFXVmtJSEpsWTJWcGRtVnlJR1p5YjIwZ2MyMWhjblFnWTI5dWRISmhZM1FnWVdkbmNtVm5ZWFJsWkNCaFkyTnZkVzUwSUhkcGRHZ2djM0JsWTJsbWFXVmtJR0Z6YzJWMElHRnVaQ0JoYlc5MWJuUWdhVzRnZEc5clpXNXpJR1JsWTJsdFlXeHpDaTh2SUVCd1lYSmhiU0J5WldObGFYWmxjaUJTWldObGFYWmxjZ292THlCQWNHRnlZVzBnWVhOelpYUWdRWE56WlhRdUlGcGxjbThnWm05eUlHRnNaMjhLTHk4Z1FIQmhjbUZ0SUdGdGIzVnVkQ0JCYlc5MWJuUWdkRzhnZEhKaGJuTm1aWElLWkc5QmVHWmxjam9LQ1hCeWIzUnZJRE1nTUFvS0NTOHZJQ3BwWmpKZlkyOXVaR2wwYVc5dUNna3ZMeUJqYjI1MGNtRmpkSE5jUW1saGRHVmpTV1JsYm5ScGRIbFFjbTkyYVdSbGNpNWhiR2R2TG5Sek9qUTBNd29KTHk4Z1lYTnpaWFF1YVdRZ1BUMDlJREFLQ1daeVlXMWxYMlJwWnlBdE1pQXZMeUJoYzNObGREb2dRWE56WlhSSlJBb0phVzUwWXlBd0lDOHZJREFLQ1QwOUNnbGllaUFxYVdZeVgyVnNjMlVLQ2drdkx5QXFhV1l5WDJOdmJuTmxjWFZsYm5RS0NTOHZJR052Ym5SeVlXTjBjMXhDYVdGMFpXTkpaR1Z1ZEdsMGVWQnliM1pwWkdWeUxtRnNaMjh1ZEhNNk5EUTBDZ2t2THlCelpXNWtVR0Y1YldWdWRDaDdDZ2t2THlBZ0lDQWdJQ0FnSUhKbFkyVnBkbVZ5T2lCeVpXTmxhWFpsY2l3S0NTOHZJQ0FnSUNBZ0lDQWdZVzF2ZFc1ME9pQmhiVzkxYm5Rc0Nna3ZMeUFnSUNBZ0lDQWdJR1psWlRvZ01Dd0tDUzh2SUNBZ0lDQWdJSDBwQ2dscGRIaHVYMkpsWjJsdUNnbHBiblJqSURFZ0x5OGdJSEJoZVFvSmFYUjRibDltYVdWc1pDQlVlWEJsUlc1MWJRb0tDUzh2SUdOdmJuUnlZV04wYzF4Q2FXRjBaV05KWkdWdWRHbDBlVkJ5YjNacFpHVnlMbUZzWjI4dWRITTZORFExQ2drdkx5QnlaV05sYVhabGNqb2djbVZqWldsMlpYSUtDV1p5WVcxbFgyUnBaeUF0TVNBdkx5QnlaV05sYVhabGNqb2dRV1JrY21WemN3b0phWFI0Ymw5bWFXVnNaQ0JTWldObGFYWmxjZ29LQ1M4dklHTnZiblJ5WVdOMGMxeENhV0YwWldOSlpHVnVkR2wwZVZCeWIzWnBaR1Z5TG1Gc1oyOHVkSE02TkRRMkNna3ZMeUJoYlc5MWJuUTZJR0Z0YjNWdWRBb0pabkpoYldWZlpHbG5JQzB6SUM4dklHRnRiM1Z1ZERvZ2RXbHVkRFkwQ2dscGRIaHVYMlpwWld4a0lFRnRiM1Z1ZEFvS0NTOHZJR052Ym5SeVlXTjBjMXhDYVdGMFpXTkpaR1Z1ZEdsMGVWQnliM1pwWkdWeUxtRnNaMjh1ZEhNNk5EUTNDZ2t2THlCbVpXVTZJREFLQ1dsdWRHTWdNQ0F2THlBd0NnbHBkSGh1WDJacFpXeGtJRVpsWlFvS0NTOHZJRk4xWW0xcGRDQnBibTVsY2lCMGNtRnVjMkZqZEdsdmJnb0phWFI0Ymw5emRXSnRhWFFLQ1dJZ0ttbG1NbDlsYm1RS0NpcHBaakpmWld4elpUb0tDUzh2SUdOdmJuUnlZV04wYzF4Q2FXRjBaV05KWkdWdWRHbDBlVkJ5YjNacFpHVnlMbUZzWjI4dWRITTZORFV3Q2drdkx5QnpaVzVrUVhOelpYUlVjbUZ1YzJabGNpaDdDZ2t2THlBZ0lDQWdJQ0FnSUdGemMyVjBVbVZqWldsMlpYSTZJSEpsWTJWcGRtVnlMQW9KTHk4Z0lDQWdJQ0FnSUNCNFptVnlRWE56WlhRNklHRnpjMlYwTEFvSkx5OGdJQ0FnSUNBZ0lDQmhjM05sZEVGdGIzVnVkRG9nWVcxdmRXNTBMQW9KTHk4Z0lDQWdJQ0FnSUNCbVpXVTZJREFzQ2drdkx5QWdJQ0FnSUNCOUtRb0phWFI0Ymw5aVpXZHBiZ29KY0hWemFHbHVkQ0EwSUM4dklHRjRabVZ5Q2dscGRIaHVYMlpwWld4a0lGUjVjR1ZGYm5WdENnb0pMeThnWTI5dWRISmhZM1J6WEVKcFlYUmxZMGxrWlc1MGFYUjVVSEp2ZG1sa1pYSXVZV3huYnk1MGN6bzBOVEVLQ1M4dklHRnpjMlYwVW1WalpXbDJaWEk2SUhKbFkyVnBkbVZ5Q2dsbWNtRnRaVjlrYVdjZ0xURWdMeThnY21WalpXbDJaWEk2SUVGa1pISmxjM01LQ1dsMGVHNWZabWxsYkdRZ1FYTnpaWFJTWldObGFYWmxjZ29LQ1M4dklHTnZiblJ5WVdOMGMxeENhV0YwWldOSlpHVnVkR2wwZVZCeWIzWnBaR1Z5TG1Gc1oyOHVkSE02TkRVeUNna3ZMeUI0Wm1WeVFYTnpaWFE2SUdGemMyVjBDZ2xtY21GdFpWOWthV2NnTFRJZ0x5OGdZWE56WlhRNklFRnpjMlYwU1VRS0NXbDBlRzVmWm1sbGJHUWdXR1psY2tGemMyVjBDZ29KTHk4Z1kyOXVkSEpoWTNSelhFSnBZWFJsWTBsa1pXNTBhWFI1VUhKdmRtbGtaWEl1WVd4bmJ5NTBjem8wTlRNS0NTOHZJR0Z6YzJWMFFXMXZkVzUwT2lCaGJXOTFiblFLQ1daeVlXMWxYMlJwWnlBdE15QXZMeUJoYlc5MWJuUTZJSFZwYm5RMk5Bb0phWFI0Ymw5bWFXVnNaQ0JCYzNObGRFRnRiM1Z1ZEFvS0NTOHZJR052Ym5SeVlXTjBjMXhDYVdGMFpXTkpaR1Z1ZEdsMGVWQnliM1pwWkdWeUxtRnNaMjh1ZEhNNk5EVTBDZ2t2THlCbVpXVTZJREFLQ1dsdWRHTWdNQ0F2THlBd0NnbHBkSGh1WDJacFpXeGtJRVpsWlFvS0NTOHZJRk4xWW0xcGRDQnBibTVsY2lCMGNtRnVjMkZqZEdsdmJnb0phWFI0Ymw5emRXSnRhWFFLQ2lwcFpqSmZaVzVrT2dvSmNtVjBjM1ZpQ2dvcVkzSmxZWFJsWDA1dlQzQTZDZ2x3ZFhOb1lubDBaWE1nTUhoaU9EUTBOMkl6TmlBdkx5QnRaWFJvYjJRZ0ltTnlaV0YwWlVGd2NHeHBZMkYwYVc5dUtDbDJiMmxrSWdvSmRIaHVZU0JCY0hCc2FXTmhkR2x2YmtGeVozTWdNQW9KYldGMFkyZ2dLbUZpYVY5eWIzVjBaVjlqY21WaGRHVkJjSEJzYVdOaGRHbHZiZ29LQ1M4dklIUm9hWE1nWTI5dWRISmhZM1FnWkc5bGN5QnViM1FnYVcxd2JHVnRaVzUwSUhSb1pTQm5hWFpsYmlCQlFra2diV1YwYUc5a0lHWnZjaUJqY21WaGRHVWdUbTlQY0FvSlpYSnlDZ29xWTJGc2JGOU9iMDl3T2dvSmNIVnphR0o1ZEdWeklEQjRaVE5pWmpWak1XWWdMeThnYldWMGFHOWtJQ0ppYjI5MGMzUnlZWEFvZFdsdWREWTBMR0ZrWkhKbGMzTXNZV1JrY21WemN5eGhaR1J5WlhOektYWnZhV1FpQ2dsd2RYTm9ZbmwwWlhNZ01IaGhaVFkwWXpFMk55QXZMeUJ0WlhSb2IyUWdJbk5sYkdaU1pXZHBjM1J5WVhScGIyNG9ZV1JrY21WemN5d29kV2x1ZERZMExHSnZiMndzZFdsdWREWTBMSFZwYm5RMk5DeDFhVzUwTmpRc2RXbHVkRFkwTEhWcGJuUTJOQ3hpYjI5c0xITjBjbWx1Wnl4emRISnBibWNzZFdsdWREWTBMSFZwYm5RMk5DeDFhVzUwTmpRc2RXbHVkRFkwTEhWcGJuUTJOQ3gxYVc1ME5qUXNZbTl2YkNrcGRtOXBaQ0lLQ1hCMWMyaGllWFJsY3lBd2VHRTBPR05tWW1KaklDOHZJRzFsZEdodlpDQWljMlYwU1c1bWJ5aGhaR1J5WlhOekxDaDFhVzUwTmpRc1ltOXZiQ3gxYVc1ME5qUXNkV2x1ZERZMExIVnBiblEyTkN4MWFXNTBOalFzZFdsdWREWTBMR0p2YjJ3c2MzUnlhVzVuTEhOMGNtbHVaeXgxYVc1ME5qUXNkV2x1ZERZMExIVnBiblEyTkN4MWFXNTBOalFzZFdsdWREWTBMSFZwYm5RMk5DeGliMjlzS1NsMmIybGtJZ29KY0hWemFHSjVkR1Z6SURCNE9ETTVNalZqTVRjZ0x5OGdiV1YwYUc5a0lDSnpaVzVrVDI1c2FXNWxTMlY1VW1WbmFYTjBjbUYwYVc5dUtIVnBiblEyTkN4aWVYUmxXMTBzWW5sMFpWdGRMR0o1ZEdWYlhTeDFhVzUwTmpRc2RXbHVkRFkwTEhWcGJuUTJOQ2wyYjJsa0lnb0pjSFZ6YUdKNWRHVnpJREI0WlRoaFpERTRPVElnTHk4Z2JXVjBhRzlrSUNKblpYUlZjMlZ5S0dGa1pISmxjM01zZFdsdWREZ3BLSFZwYm5RNExIVnBiblEyTkN4MWFXNTBOalFzWW05dmJDeHpkSEpwYm1jc2MzUnlhVzVuTEhWcGJuUTJOQ3gxYVc1ME5qUXNkV2x1ZERZMExIVnBiblEyTkN4MWFXNTBOalFzZFdsdWREWTBMSFZwYm5RMk5DeDFhVzUwTmpRc1ltOXZiQ3gxYVc1ME5qUXNkV2x1ZERZMExHSnZiMndwSWdvSmNIVnphR0o1ZEdWeklEQjRNVEkzWm1aaU4ySWdMeThnYldWMGFHOWtJQ0puWlhSVmMyVnlVMmh2Y25Rb1lXUmtjbVZ6Y3l4MWFXNTBPQ2tvZFdsdWREZ3NkV2x1ZERZMExIVnBiblEyTkN4MWFXNTBOalFzWW05dmJDa2lDZ2x3ZFhOb1lubDBaWE1nTUhoalltRXlaVGsxWkNBdkx5QnRaWFJvYjJRZ0luZHBkR2hrY21GM1JYaGpaWE56UVhOelpYUnpLSFZwYm5RMk5DeDFhVzUwTmpRc2RXbHVkRFkwS1hWcGJuUTJOQ0lLQ1hSNGJtRWdRWEJ3YkdsallYUnBiMjVCY21keklEQUtDVzFoZEdOb0lDcGhZbWxmY205MWRHVmZZbTl2ZEhOMGNtRndJQ3BoWW1sZmNtOTFkR1ZmYzJWc1psSmxaMmx6ZEhKaGRHbHZiaUFxWVdKcFgzSnZkWFJsWDNObGRFbHVabThnS21GaWFWOXliM1YwWlY5elpXNWtUMjVzYVc1bFMyVjVVbVZuYVhOMGNtRjBhVzl1SUNwaFltbGZjbTkxZEdWZloyVjBWWE5sY2lBcVlXSnBYM0p2ZFhSbFgyZGxkRlZ6WlhKVGFHOXlkQ0FxWVdKcFgzSnZkWFJsWDNkcGRHaGtjbUYzUlhoalpYTnpRWE56WlhSekNnb0pMeThnZEdocGN5QmpiMjUwY21GamRDQmtiMlZ6SUc1dmRDQnBiWEJzWlcxbGJuUWdkR2hsSUdkcGRtVnVJRUZDU1NCdFpYUm9iMlFnWm05eUlHTmhiR3dnVG05UGNBb0paWEp5Q2dvcVkyRnNiRjlWY0dSaGRHVkJjSEJzYVdOaGRHbHZiam9LQ1hCMWMyaGllWFJsY3lBd2VEVm1Zemc0TldFd0lDOHZJRzFsZEdodlpDQWlkWEJrWVhSbFFYQndiR2xqWVhScGIyNG9kV2x1ZERZMExHSjVkR1ZiWFNsMmIybGtJZ29KZEhodVlTQkJjSEJzYVdOaGRHbHZia0Z5WjNNZ01Bb0piV0YwWTJnZ0ttRmlhVjl5YjNWMFpWOTFjR1JoZEdWQmNIQnNhV05oZEdsdmJnb0tDUzh2SUhSb2FYTWdZMjl1ZEhKaFkzUWdaRzlsY3lCdWIzUWdhVzF3YkdWdFpXNTBJSFJvWlNCbmFYWmxiaUJCUWtrZ2JXVjBhRzlrSUdadmNpQmpZV3hzSUZWd1pHRjBaVUZ3Y0d4cFkyRjBhVzl1Q2dsbGNuSUtDaXB3Y205alpYTnpYM04wWVhScFkxOTBkWEJzWlY5bGJHVnRaVzUwT2dvSmNISnZkRzhnTkNBekNnbG1jbUZ0WlY5a2FXY2dMVFFnTHk4Z2RIVndiR1VnYUdWaFpBb0pabkpoYldWZlpHbG5JQzB4SUM4dklHVnNaVzFsYm5RS0NXTnZibU5oZEFvSlpuSmhiV1ZmWkdsbklDMHpJQzh2SUhSMWNHeGxJSFJoYVd3S0NXWnlZVzFsWDJScFp5QXRNaUF2THlCb1pXRmtJRzltWm5ObGRBb0pjbVYwYzNWaUNnb3FjSEp2WTJWemMxOWtlVzVoYldsalgzUjFjR3hsWDJWc1pXMWxiblE2Q2dsd2NtOTBieUEwSURNS0NXWnlZVzFsWDJScFp5QXROQ0F2THlCMGRYQnNaU0JvWldGa0NnbG1jbUZ0WlY5a2FXY2dMVElnTHk4Z2FHVmhaQ0J2Wm1aelpYUUtDV052Ym1OaGRBb0pabkpoYldWZlluVnllU0F0TkNBdkx5QjBkWEJzWlNCb1pXRmtDZ2xtY21GdFpWOWthV2NnTFRFZ0x5OGdaV3hsYldWdWRBb0paSFZ3Q2dsc1pXNEtDV1p5WVcxbFgyUnBaeUF0TWlBdkx5Qm9aV0ZrSUc5bVpuTmxkQW9KWW5SdmFRb0pLd29KYVhSdllnb0paWGgwY21GamRDQTJJRElLQ1daeVlXMWxYMkoxY25rZ0xUSWdMeThnYUdWaFpDQnZabVp6WlhRS0NXWnlZVzFsWDJScFp5QXRNeUF2THlCMGRYQnNaU0IwWVdsc0NnbHpkMkZ3Q2dsamIyNWpZWFFLQ1daeVlXMWxYMkoxY25rZ0xUTWdMeThnZEhWd2JHVWdkR0ZwYkFvSlpuSmhiV1ZmWkdsbklDMDBJQzh2SUhSMWNHeGxJR2hsWVdRS0NXWnlZVzFsWDJScFp5QXRNeUF2THlCMGRYQnNaU0IwWVdsc0NnbG1jbUZ0WlY5a2FXY2dMVElnTHk4Z2FHVmhaQ0J2Wm1aelpYUUtDWEpsZEhOMVlnPT0iLCJjbGVhciI6IkkzQnlZV2R0WVNCMlpYSnphVzl1SURFdyJ9LCJieXRlQ29kZSI6eyJhcHByb3ZhbCI6IkNpQUpBQUVnQWtDQWxPdmNBN0FHTWpRbUR3QUlBQUFBQUFBQUFBQUJBQUZwQVVJQmN3UVZIM3gxSkRBd01EQXdNREF3TFRBd01EQXRNREF3TUMwd01EQXdMVEF3TURBd01EQXdNREF3TUFnQUFBQUFkeldVQUFnQUFBQUFPNXJLQUFWelkzWmxjZ0psWmdJQWFBSUFBQUZsTVJnVWdRWUxNUmtJalF3RmtBQUFBQUFBQUFYT0FBQUZnZ0FBQUFBQUFBQUFBQUFBaUFBQ0kwT0tBQUFuQ29BVlFrbEJWRVZETFVsRVJVNVVMVEF4TFRBekxUQXhaNGsyR2dSSkZTUVNSRFlhQTBrVkpCSkVOaG9DU1JVa0VrUTJHZ0VYaUFBQ0kwT0tCQUFvTVFBMk1nQnlCMGdTUkNjRWkvOW5nQUZuaS81bmdBRjJpLzFuSnc2TC9HZUwveWNGWlVTTUFJc0FJaEpFaVRZYUFsY0NBRFlhQVJlSUFBSWpRNG9DQUNoSmkvOG5CR1FTUkl2L2dBRjFaVVNNQURFQWl3QVNSSXYvSndWbFJJd0Jpd0VpRWtRbkNvditaNGsyR2dJMkdnRkpGU1FTUklnQUFpTkRpZ0lBSzR2L1VMMU1TQlJFaS80MS96VC9WeWtJRnlNU1JJditOZjgwLzFjQUNCY2lFa1NML2pYL0lRYzAvelQvVHdKWlNUVC9URmtqQ3lVSVdGY0NBQ2NIRWtTTC9qWC9JUWcwL3pUL1R3SlpTVFQvVEZrakN5VUlXRmNDQUNjSEVrU0wvalgvTlA5WE5nZ1hJaEpFaS80MS96VC9WejRJRnlJU1JJditOZjgwLzFkR0NCY2lFa1NML2pYL05QOVhUZ2dYSWhKRWkvNDEvelQvVjFZSUZ5SVNSSXYrTmY4MC8xZGVDQmNpRWtTTC9qWC9OUDhoQkZNaUVrU0wvalgvTlA5WEdRZ1hJaEpFaS80MS96VC9WeUVJRnlJU1JJditOZjgwL3lFR1V5SVNSSXYrTmY4MC8xY1JDQmNoQlJKRWkvNDEvelQvVndrSUY0R0FxTmE1QnhKRUs0di9VRW04U0l2K3Y0azJHZ0kyR2dGSkZTUVNSSWdBQWlORGlnSUFNUUFuRG1RU1JJditOZjgwLzFjUkNCY2hCUkpFSzR2L1VFbThTSXYrdjRrMkdnY1hOaG9HRnpZYUJSYzJHZ1JYQWdBMkdnTlhBZ0EyR2dKWEFnQTJHZ0VYaUFBQ0kwT0tCd0FvU1l2L0p3UmtFa1NML3ljTFpVU01BREVBaXdBU1JJdi9Kd1ZsUkl3Qml3RWlFa1N4SmJJUWkvMnlDNHY4c2orTCs3SU1pL215RG92NnNnMkwvcklLSXJJQnM0a25CallhQWtrVkl4SkVGellhQVVrVkpCSkVpQUFFVUxBalE0b0NBU2hIQW92K0l4SkVLNHYvVUwxTVNCUkJBR2NvS0NjTWkvNFdWd2NCaUFNc0tZZ0RLQ21JQXlRcUlrbFVpQU1kSncySUF5VW5EWWdESUNtSUF3OHBpQU1MS1lnREJ5bUlBd01waUFML0tZZ0MreWNJaUFMMkp3bUlBdkVxSWtsVWlBTHFLWWdDNWltSUF1SXFJa2xVaUFMYlNGQ01BSXNBUWdGYks0di9VSXdCS0NnbkRJditGbGNIQVlnQ3Y0c0J2a1ExL3pUL1Z5a0lGeGFJQXErTEFiNUVOZjgwLzFjQUNCY1dpQUtmS2lLTEFiNUVOZjgwLzRHSUExTlVpQUtOaXdHK1JEWC9JUWMwL3pUL1R3SlpTVFQvVEZrakN5VUlXRmNDQUVrVkZsY0dBa3hRaUFKeml3RytSRFgvSVFnMC96VC9Ud0paU1RUL1RGa2pDeVVJV0ZjQ0FFa1ZGbGNHQWt4UWlBSk1pd0crUkRYL05QOVhOZ2dYRm9nQ0w0c0J2a1ExL3pUL1Z6NElGeGFJQWgrTEFiNUVOZjgwLzFkR0NCY1dpQUlQaXdHK1JEWC9OUDlYVGdnWEZvZ0IvNHNCdmtRMS96VC9WMVlJRnhhSUFlK0xBYjVFTmY4MC8xZGVDQmNXaUFIZml3RytSRFgvTlA5WENRZ1hGb2dCejRzQnZrUTEvelQvVnhFSUZ4YUlBYjhxSW9zQnZrUTEvelQvSVFSVFZJZ0Jyb3NCdmtRMS96VC9WeGtJRnhhSUFaNkxBYjVFTmY4MC8xY2hDQmNXaUFHT0tpS0xBYjVFTmY4MC95RUdVMVNJQVgxSVVJd0Npd0tNQUVZQ2lTY0dOaG9DU1JVakVrUVhOaG9CU1JVa0VrU0lBQVJRc0NORGlnSUJLRWNDaS80akVrUXJpLzlRdlV4SUZFRUFHb3YrRmxjSEFTbFFKd2hRSndsUUtpSkpWRkNNQUlzQVFnQkpLNHYvVUl3QmkvNFdWd2NCaXdHK1JEWC9OUDlYQUFnWEZsQ0xBYjVFTmY4MC8xY0pDQmNXVUlzQnZrUTEvelQvVnhFSUZ4WlFLaUtMQWI1RU5mODAveUVFVTFSUWpBS0xBb3dBUmdLSkp3WTJHZ01YTmhvQ0Z6WWFBUmVJQUFVV1VMQWpRNG9EQVNoSmkvOG5CR1FTUkl2L0p3dGxSSXdBaS84bkJXVkVqQUdMQVNJU1JERUFpd0FTUkl2OWkvNHhBSWdBQjR2OWpBQkdBWW1LQXdDTC9pSVNRUUFUc1NPeUVJdi9zZ2VML2JJSUlySUJzMElBRmJHQkJMSVFpLyt5Rkl2K3NoR0wvYklTSXJJQnM0bUFCTGhFZXpZMkdnQ09BZnB5QUlBRTQ3OWNINEFFcm1UQlo0QUVwSXo3dklBRWc1SmNGNEFFNkswWWtvQUVFbi83ZTRBRXk2THBYVFlhQUk0SCtsZjY1L3dFL0RmOHB2NmQvelVBZ0FSZnlJV2dOaG9BamdINm5BQ0tCQU9ML0l2L1VJdjlpLzZKaWdRRGkveUwvbENNL0l2L1NSV0wvaGNJRmxjR0FveitpLzFNVUl6OWkveUwvWXYraVE9PSIsImNsZWFyIjoiQ2c9PSJ9LCJjb21waWxlckluZm8iOnsiY29tcGlsZXIiOiJhbGdvZCIsImNvbXBpbGVyVmVyc2lvbiI6eyJtYWpvciI6NCwibWlub3IiOjEsInBhdGNoIjoyLCJjb21taXRIYXNoIjoiMDg4Zjg5ZGQifX0sImV2ZW50cyI6bnVsbCwidGVtcGxhdGVWYXJpYWJsZXMiOnt9LCJzY3JhdGNoVmFyaWFibGVzIjp7fX0=";
    }

}
