{
  "name": "GasStation",
  "structs": {
    "UserStruct": [
      {
        "name": "balance",
        "type": "uint64"
      },
      {
        "name": "configuration",
        "type": "string"
      }
    ]
  },
  "methods": [
    {
      "name": "updateApplication",
      "args": [
        {
          "type": "string",
          "name": "newVersion"
        }
      ],
      "returns": {
        "type": "bool"
      },
      "actions": {
        "create": [],
        "call": [
          "UpdateApplication"
        ]
      },
      "readonly": false,
      "desc": "addressUdpater from global biatec configuration is allowed to update application",
      "events": [],
      "recommendations": {}
    },
    {
      "name": "setAddressExecutive",
      "args": [
        {
          "type": "address",
          "name": "a",
          "desc": "Address"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      },
      "readonly": false,
      "desc": "Execution address with which it is possible to fund other addresses",
      "events": [],
      "recommendations": {}
    },
    {
      "name": "depositWithConfiguration",
      "args": [
        {
          "type": "pay",
          "name": "txnDeposit",
          "desc": "Deposit transaction"
        },
        {
          "type": "string",
          "name": "configuration",
          "desc": "Configration to be stored into the box"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      },
      "readonly": false,
      "desc": "Gas Funder can set configuration with the deposit tx\n\nService fee is 5% and is deducted on deposit, on deposit of 100 Algo, user receives 95 Algo credit for his users to use for gas",
      "events": [],
      "recommendations": {}
    },
    {
      "name": "deposit",
      "args": [
        {
          "type": "pay",
          "name": "txnDeposit",
          "desc": "Deposit transaction"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      },
      "readonly": false,
      "desc": "Gas Funder can deposit more algos to his funder account deposit\n\nService fee is 5% and is deducted on deposit, on deposit of 100 Algo, user receives 95 Algo credit for his users to use for gas",
      "events": [],
      "recommendations": {}
    },
    {
      "name": "fundAccount",
      "args": [
        {
          "type": "uint64",
          "name": "amount",
          "desc": "Amout to send"
        },
        {
          "type": "account",
          "name": "receiver",
          "desc": "Receiver"
        },
        {
          "type": "string",
          "name": "note",
          "desc": "Note"
        },
        {
          "type": "address",
          "name": "funder"
        }
      ],
      "returns": {
        "type": "byte[]"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      },
      "readonly": false,
      "desc": "Executor can fund the account which needs gas to execute the transaction",
      "events": [],
      "recommendations": {}
    },
    {
      "name": "withdraw",
      "args": [
        {
          "type": "account",
          "name": "receiver",
          "desc": "Receiver"
        }
      ],
      "returns": {
        "type": "byte[]"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      },
      "readonly": false,
      "desc": "Biatec can withdraw service fees. The current balance",
      "events": [],
      "recommendations": {}
    },
    {
      "name": "sendOnlineKeyRegistration",
      "args": [
        {
          "type": "byte[]",
          "name": "voteKey"
        },
        {
          "type": "byte[]",
          "name": "selectionKey"
        },
        {
          "type": "byte[]",
          "name": "stateProofKey"
        },
        {
          "type": "uint64",
          "name": "voteFirst"
        },
        {
          "type": "uint64",
          "name": "voteLast"
        },
        {
          "type": "uint64",
          "name": "voteKeyDilution"
        },
        {
          "type": "uint64",
          "name": "fee"
        }
      ],
      "returns": {
        "type": "byte[]"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      },
      "readonly": false,
      "desc": "Updater can perfom key registration for this LP pool",
      "events": [],
      "recommendations": {}
    }
  ],
  "arcs": [
    22,
    28
  ],
  "networks": {},
  "state": {
    "schema": {
      "global": {
        "ints": 2,
        "bytes": 3
      },
      "local": {
        "ints": 0,
        "bytes": 0
      }
    },
    "keys": {
      "global": {
        "allDeposits": {
          "keyType": "AVMString",
          "valueType": "AVMUint64",
          "key": "YWxsRGVwb3NpdHM="
        },
        "addressUdpater": {
          "keyType": "AVMString",
          "valueType": "address",
          "key": "dQ==",
          "desc": "Top secret multisig account with which it is possible update user contracts or biatec contracts."
        },
        "addressExecutive": {
          "keyType": "AVMString",
          "valueType": "address",
          "key": "ZQ==",
          "desc": "Address which can execute the gas distribution. In possession of the Biatec."
        },
        "version": {
          "keyType": "AVMString",
          "valueType": "AVMString",
          "key": "c2N2ZXI=",
          "desc": "Version of the smart contract"
        },
        "suspended": {
          "keyType": "AVMString",
          "valueType": "AVMUint64",
          "key": "cw==",
          "desc": "Kill switch. In the extreme case all services (deposit, trading, withdrawal, identity modifications and more) can be suspended.\nOnly addressUdpater multisig can modify this setting."
        }
      },
      "local": {},
      "box": {
        "configuration": {
          "keyType": "AVMString",
          "valueType": "UserStruct",
          "key": "Yw=="
        }
      }
    },
    "maps": {
      "global": {},
      "local": {},
      "box": {}
    }
  },
  "bareActions": {
    "create": [
      "NoOp"
    ],
    "call": []
  },
  "sourceInfo": {
    "approval": {
      "sourceInfo": [
        {
          "pc": [
            467,
            477,
            491,
            577,
            587,
            627,
            665,
            680
          ],
          "errorMessage": "Box must have value"
        },
        {
          "pc": [
            624
          ],
          "errorMessage": "Funder box does not exists"
        },
        {
          "pc": [
            637
          ],
          "errorMessage": "Funder is out of the deposit"
        },
        {
          "pc": [
            574
          ],
          "errorMessage": "Funder must set configuration first"
        },
        {
          "pc": [
            147,
            205,
            235,
            278,
            300,
            325
          ],
          "errorMessage": "OnCompletion is not NoOp"
        },
        {
          "pc": [
            342
          ],
          "errorMessage": "OnCompletion is not UpdateApplication"
        },
        {
          "pc": [
            389
          ],
          "errorMessage": "Only addressUdpater setup in the config can update application"
        },
        {
          "pc": [
            614
          ],
          "errorMessage": "Only executor can use this method"
        },
        {
          "pc": [
            407
          ],
          "errorMessage": "Only updater can change addressExecutive"
        },
        {
          "pc": [
            709,
            773
          ],
          "errorMessage": "Only updater can use this method"
        },
        {
          "pc": [
            453,
            564
          ],
          "errorMessage": "Receiver must be the gas station app"
        },
        {
          "pc": [
            422,
            534,
            605,
            701
          ],
          "errorMessage": "The smart contract is suspended at the moment"
        },
        {
          "pc": [
            714
          ],
          "errorMessage": "account funded"
        },
        {
          "pc": [
            376
          ],
          "errorMessage": "can only call when creating"
        },
        {
          "pc": [
            150,
            208,
            238,
            281,
            303,
            328,
            345
          ],
          "errorMessage": "can only call when not creating"
        },
        {
          "pc": [
            385,
            403,
            420,
            441,
            532,
            550,
            603,
            610,
            699,
            705,
            718,
            769
          ],
          "errorMessage": "check GlobalState exists"
        },
        {
          "pc": [
            291,
            313
          ],
          "errorMessage": "transaction type is pay"
        }
      ],
      "pcOffsetMethod": "none"
    },
    "clear": {
      "sourceInfo": [],
      "pcOffsetMethod": "none"
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
  },
  "byteCode": {
    "approval": "CiAEAAEUAiYHAXUBcwthbGxEZXBvc2l0cwQVH3x1AWUBYwVzY3ZlcjEYQAAkKDEAZycGgBNCSUFURUMtR0FTLTAxLTAxLTAxZycEMQBnKSJnMRtBARqCBwRwpl6JBIsYez0EZ5LdJQQ2JeTrBF0V9jcEfJkHOgTGHVb1NhoAjgcAwwC0AJsAhQBaADwAAiJDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCADYaBBc2GgUXNhoGFzYaBxeIAj9JFRZXBgJMUCtMULAjQzEZFEQxGEQ2GgEXwByIAdtJFRZXBgJMUCtMULAjQzEZFEQxGEQ2GgEXNhoCF8AcNhoDVwIANhoEiAFQSRUWVwYCTFArTFCwI0MxGRREMRhEMRYjCUk4ECMSRIgA5yNDMRkURDEYRDEWIwlJOBAjEkQ2GgGIAF4jQzEZFEQxGEQ2GgGIAD4jQzEZgQQSRDEYRDYaAVcCAIgAGIABACJPAlQrTFCwI0MxGUD/GTEYFEQjQ4oBASIoZUQxABJEJwaL/2cjiYoBACIoZUQxABJEJwSL/2eJigIAIillRBREi/44AIv+OAhJJAoJSU4CIiplRAgqTGeL/jgHMgoSRCcFTFBJvUUBQQArSb5EIluLAAgWSwG+RExcAEsBvEhLAUy/Sb5ESYEIWSJMWIv/UEsBvEi/iYsAFoACAApQi/9QTEm8SEy/iYoBACIpZUQURIv/OACL/zgISSQKCSIqZURLAQgqTGeL/zgHMgoSRCcFTwJQSb1FAURJvkQiW08CCBZLAb5ETFwASwG8SL+JigQBIillRBREIicEZUQxABJEJwWL/1BJvUUBREm+RCJbi/yB0A8IDESxi/6yBYv9sgeL/LIII7IQIrIBs7QBtBdLAr5EIluL/AlPAiULCRZLAr5ETFwASwK8SE8CTL+JigEBIillRBREIihlRDEAEkQyCnMARCIqZUQJsYAWc2VydmljZSBmZWUgd2l0aGRyYXdhbLIFi/+yB7III7IQIrIBs7QXiYoHASIoZUQxABJEsYv5sgqL/bINi/6yDov8sgyL+7I/i/qyCyWyEIv/sgGztBeJ",
    "clear": "CoEBQw=="
  },
  "compilerInfo": {
    "compiler": "puya",
    "compilerVersion": {
      "major": 4,
      "minor": 5,
      "patch": 3
    }
  },
  "events": [],
  "templateVariables": {}
}