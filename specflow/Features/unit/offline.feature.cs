// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace algorand_tests.Features.Unit
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class OfflineFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = new string[] {
                "unit",
                "unit.offline"};
        
#line 1 "offline.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/unit", "Offline", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Offline")))
            {
                global::algorand_tests.Features.Unit.OfflineFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Encode and decode addresses")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.offline")]
        public void EncodeAndDecodeAddresses()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Encode and decode addresses", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
    testRunner.When("I generate a key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 6
    testRunner.And("I decode the address", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 7
    testRunner.And("I encode the address", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 8
    testRunner.Then("the address should still be the same", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        public virtual void MnemonicToAndFromPrivateKey(string mn, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("mn", mn);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mnemonic to and from private key", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
    testRunner.Given(string.Format("mnemonic for private key \"{0}\"", mn), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
    testRunner.When("I convert the private key back to a mnemonic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
    testRunner.Then(string.Format("the mnemonic should still be the same as \"{0}\"", mn), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Mnemonic to and from private key: advice pudding treat near rule blouse same whis" +
            "per inner electric quit surface sunny dismiss leader blood seat clown cost exist" +
            " hospital century reform able sponsor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "advice pudding treat near rule blouse same whisper inner electric quit surface su" +
            "nny dismiss leader blood seat clown cost exist hospital century reform able spon" +
            "sor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:mn", "advice pudding treat near rule blouse same whisper inner electric quit surface su" +
            "nny dismiss leader blood seat clown cost exist hospital century reform able spon" +
            "sor")]
        public void MnemonicToAndFromPrivateKey_AdvicePuddingTreatNearRuleBlouseSameWhisperInnerElectricQuitSurfaceSunnyDismissLeaderBloodSeatClownCostExistHospitalCenturyReformAbleSponsor()
        {
#line 10
  this.MnemonicToAndFromPrivateKey("advice pudding treat near rule blouse same whisper inner electric quit surface su" +
                    "nny dismiss leader blood seat clown cost exist hospital century reform able spon" +
                    "sor", ((string[])(null)));
#line hidden
        }
        
        public virtual void MnemonicToAndFromMasterDerivationKey(string mn, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("mn", mn);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mnemonic to and from master derivation key", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 20
    testRunner.Given(string.Format("mnemonic for master derivation key \"{0}\"", mn), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 21
    testRunner.When("I convert the master derivation key back to a mnemonic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 22
    testRunner.Then(string.Format("the mnemonic should still be the same as \"{0}\"", mn), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Mnemonic to and from master derivation key: advice pudding treat near rule blouse" +
            " same whisper inner electric quit surface sunny dismiss leader blood seat clown " +
            "cost exist hospital century reform able sponsor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "advice pudding treat near rule blouse same whisper inner electric quit surface su" +
            "nny dismiss leader blood seat clown cost exist hospital century reform able spon" +
            "sor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:mn", "advice pudding treat near rule blouse same whisper inner electric quit surface su" +
            "nny dismiss leader blood seat clown cost exist hospital century reform able spon" +
            "sor")]
        public void MnemonicToAndFromMasterDerivationKey_AdvicePuddingTreatNearRuleBlouseSameWhisperInnerElectricQuitSurfaceSunnyDismissLeaderBloodSeatClownCostExistHospitalCenturyReformAbleSponsor()
        {
#line 19
  this.MnemonicToAndFromMasterDerivationKey("advice pudding treat near rule blouse same whisper inner electric quit surface su" +
                    "nny dismiss leader blood seat clown cost exist hospital century reform able spon" +
                    "sor", ((string[])(null)));
#line hidden
        }
        
        public virtual void SignTransactionWithFlatFee(string fee, string fv, string lv, string gh, string to, string close, string amt, string gen, string note, string mn, string golden, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("fee", fee);
            argumentsOfScenario.Add("fv", fv);
            argumentsOfScenario.Add("lv", lv);
            argumentsOfScenario.Add("gh", gh);
            argumentsOfScenario.Add("to", to);
            argumentsOfScenario.Add("close", close);
            argumentsOfScenario.Add("amt", amt);
            argumentsOfScenario.Add("gen", gen);
            argumentsOfScenario.Add("note", note);
            argumentsOfScenario.Add("mn", mn);
            argumentsOfScenario.Add("golden", golden);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sign transaction with flat fee", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 29
    testRunner.Given(string.Format("payment transaction parameters {0} {1} {2} \"{3}\" \"{4}\" \"{5}\" {6} \"{7}\" \"{8}\"", fee, fv, lv, gh, to, close, amt, gen, note), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 30
    testRunner.And(string.Format("mnemonic for private key \"{0}\"", mn), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
    testRunner.When("I create the flat fee payment transaction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
    testRunner.And("I sign the transaction with the private key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
    testRunner.Then(string.Format("the signed transaction should equal the golden \"{0}\"", golden), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sign transaction with flat fee: 1176")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1176")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:fee", "1176")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:fv", "12466")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:lv", "13466")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:gh", "JgsgCaCTqIaLeVhyL6XlRu3n7Rfk2FxMeK+wRSaQ7dI=")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:to", "PNWOET7LLOWMBMLE4KOCELCX6X3D3Q4H2Q4QJASYIEOF7YIPPQBG3YQ5YI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:close", "IDUTJEUIEVSMXTU4LGTJWZ2UE2E6TIODUKU6UW3FU3UKIQQ77RLUBBBFLA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:amt", "1000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:gen", "devnet-v33.0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:note", "6gAVR0Nsv5Y=")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:mn", "advice pudding treat near rule blouse same whisper inner electric quit surface su" +
            "nny dismiss leader blood seat clown cost exist hospital century reform able spon" +
            "sor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:golden", @"gqNzaWfEQPhUAZ3xkDDcc8FvOVo6UinzmKBCqs0woYSfodlmBMfQvGbeUx3Srxy3dyJDzv7rLm26BRv9FnL2/AuT7NYfiAWjdHhui6NhbXTNA+ilY2xvc2XEIEDpNJKIJWTLzpxZpptnVCaJ6aHDoqnqW2Wm6KRCH/xXo2ZlZc0EmKJmds0wsqNnZW6sZGV2bmV0LXYzMy4womdoxCAmCyAJoJOohot5WHIvpeVG7eftF+TYXEx4r7BFJpDt0qJsds00mqRub3RlxAjqABVHQ2y/lqNyY3bEIHts4k/rW6zAsWTinCIsV/X2PcOH1DkEglhBHF/hD3wCo3NuZMQg5/D4TQaBHfnzHI2HixFV9GcdUaGFwgCQhmf0SVhwaKGkdHlwZaNwYXk=")]
        public void SignTransactionWithFlatFee_1176()
        {
#line 28
  this.SignTransactionWithFlatFee("1176", "12466", "13466", "JgsgCaCTqIaLeVhyL6XlRu3n7Rfk2FxMeK+wRSaQ7dI=", "PNWOET7LLOWMBMLE4KOCELCX6X3D3Q4H2Q4QJASYIEOF7YIPPQBG3YQ5YI", "IDUTJEUIEVSMXTU4LGTJWZ2UE2E6TIODUKU6UW3FU3UKIQQ77RLUBBBFLA", "1000", "devnet-v33.0", "6gAVR0Nsv5Y=", "advice pudding treat near rule blouse same whisper inner electric quit surface su" +
                    "nny dismiss leader blood seat clown cost exist hospital century reform able spon" +
                    "sor", @"gqNzaWfEQPhUAZ3xkDDcc8FvOVo6UinzmKBCqs0woYSfodlmBMfQvGbeUx3Srxy3dyJDzv7rLm26BRv9FnL2/AuT7NYfiAWjdHhui6NhbXTNA+ilY2xvc2XEIEDpNJKIJWTLzpxZpptnVCaJ6aHDoqnqW2Wm6KRCH/xXo2ZlZc0EmKJmds0wsqNnZW6sZGV2bmV0LXYzMy4womdoxCAmCyAJoJOohot5WHIvpeVG7eftF+TYXEx4r7BFJpDt0qJsds00mqRub3RlxAjqABVHQ2y/lqNyY3bEIHts4k/rW6zAsWTinCIsV/X2PcOH1DkEglhBHF/hD3wCo3NuZMQg5/D4TQaBHfnzHI2HixFV9GcdUaGFwgCQhmf0SVhwaKGkdHlwZaNwYXk=", ((string[])(null)));
#line hidden
        }
        
        public virtual void MultisigAddress(string addresses, string golden, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("addresses", addresses);
            argumentsOfScenario.Add("golden", golden);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multisig address", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 40
    testRunner.Given(string.Format("multisig addresses \"{0}\"", addresses), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 41
    testRunner.Then(string.Format("the multisig address should equal the golden \"{0}\"", golden), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Multisig address: DN7MBMCL5JQ3PFUQS7TMX5AH4EEKOBJVDUF4TCV6WERATKFLQF4MQUPZTA BFRT" +
            "ECKTOOE7A5LHCF3TTEOH2A7BW46IYT2SX5VP6ANKEXHZYJY77SJTVM 47YPQTIGQEO7T4Y4RWDYWEKV6" +
            "RTR2UNBQXBABEEGM72ESWDQNCQ52OPASU")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "DN7MBMCL5JQ3PFUQS7TMX5AH4EEKOBJVDUF4TCV6WERATKFLQF4MQUPZTA BFRTECKTOOE7A5LHCF3TTE" +
            "OH2A7BW46IYT2SX5VP6ANKEXHZYJY77SJTVM 47YPQTIGQEO7T4Y4RWDYWEKV6RTR2UNBQXBABEEGM72" +
            "ESWDQNCQ52OPASU")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:addresses", "DN7MBMCL5JQ3PFUQS7TMX5AH4EEKOBJVDUF4TCV6WERATKFLQF4MQUPZTA BFRTECKTOOE7A5LHCF3TTE" +
            "OH2A7BW46IYT2SX5VP6ANKEXHZYJY77SJTVM 47YPQTIGQEO7T4Y4RWDYWEKV6RTR2UNBQXBABEEGM72" +
            "ESWDQNCQ52OPASU")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:golden", "RWJLJCMQAFZ2ATP2INM2GZTKNL6OULCCUBO5TQPXH3V2KR4AG7U5UA5JNM")]
        public void MultisigAddress_DN7MBMCL5JQ3PFUQS7TMX5AH4EEKOBJVDUF4TCV6WERATKFLQF4MQUPZTABFRTECKTOOE7A5LHCF3TTEOH2A7BW46IYT2SX5VP6ANKEXHZYJY77SJTVM47YPQTIGQEO7T4Y4RWDYWEKV6RTR2UNBQXBABEEGM72ESWDQNCQ52OPASU()
        {
#line 39
  this.MultisigAddress("DN7MBMCL5JQ3PFUQS7TMX5AH4EEKOBJVDUF4TCV6WERATKFLQF4MQUPZTA BFRTECKTOOE7A5LHCF3TTE" +
                    "OH2A7BW46IYT2SX5VP6ANKEXHZYJY77SJTVM 47YPQTIGQEO7T4Y4RWDYWEKV6RTR2UNBQXBABEEGM72" +
                    "ESWDQNCQ52OPASU", "RWJLJCMQAFZ2ATP2INM2GZTKNL6OULCCUBO5TQPXH3V2KR4AG7U5UA5JNM", ((string[])(null)));
#line hidden
        }
        
        public virtual void SignMultisig(string fee, string fv, string lv, string gh, string to, string close, string amt, string gen, string note, string mn, string addresses, string golden, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("fee", fee);
            argumentsOfScenario.Add("fv", fv);
            argumentsOfScenario.Add("lv", lv);
            argumentsOfScenario.Add("gh", gh);
            argumentsOfScenario.Add("to", to);
            argumentsOfScenario.Add("close", close);
            argumentsOfScenario.Add("amt", amt);
            argumentsOfScenario.Add("gen", gen);
            argumentsOfScenario.Add("note", note);
            argumentsOfScenario.Add("mn", mn);
            argumentsOfScenario.Add("addresses", addresses);
            argumentsOfScenario.Add("golden", golden);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sign multisig", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 47
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 48
    testRunner.Given(string.Format("payment transaction parameters {0} {1} {2} \"{3}\" \"{4}\" \"{5}\" {6} \"{7}\" \"{8}\"", fee, fv, lv, gh, to, close, amt, gen, note), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 49
    testRunner.And(string.Format("mnemonic for private key \"{0}\"", mn), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 50
    testRunner.And(string.Format("multisig addresses \"{0}\"", addresses), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
    testRunner.When("I create the multisig payment transaction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
    testRunner.And("I sign the multisig transaction with the private key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
    testRunner.Then(string.Format("the multisig transaction should equal the golden \"{0}\"", golden), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sign multisig: 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:fee", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:fv", "12466")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:lv", "13466")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:gh", "JgsgCaCTqIaLeVhyL6XlRu3n7Rfk2FxMeK+wRSaQ7dI=")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:to", "PNWOET7LLOWMBMLE4KOCELCX6X3D3Q4H2Q4QJASYIEOF7YIPPQBG3YQ5YI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:close", "IDUTJEUIEVSMXTU4LGTJWZ2UE2E6TIODUKU6UW3FU3UKIQQ77RLUBBBFLA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:amt", "1000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:gen", "devnet-v33.0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:note", "X4Bl4wQ9rCo=")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:mn", "advice pudding treat near rule blouse same whisper inner electric quit surface su" +
            "nny dismiss leader blood seat clown cost exist hospital century reform able spon" +
            "sor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:addresses", "DN7MBMCL5JQ3PFUQS7TMX5AH4EEKOBJVDUF4TCV6WERATKFLQF4MQUPZTA BFRTECKTOOE7A5LHCF3TTE" +
            "OH2A7BW46IYT2SX5VP6ANKEXHZYJY77SJTVM 47YPQTIGQEO7T4Y4RWDYWEKV6RTR2UNBQXBABEEGM72" +
            "ESWDQNCQ52OPASU")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:golden", @"gqRtc2lng6ZzdWJzaWeTgaJwa8QgG37AsEvqYbeWkJfmy/QH4QinBTUdC8mKvrEiCairgXiBonBrxCAJYzIJU3OJ8HVnEXc5kcfQPhtzyMT1K/av8BqiXPnCcYKicGvEIOfw+E0GgR358xyNh4sRVfRnHVGhhcIAkIZn9ElYcGihoXPEQF6nXZ7CgInd1h7NVspIPFZNhkPL+vGFpTNwH3Eh9gwPM8pf1EPTHfPvjf14sS7xN7mTK+wrz7Odhp4rdWBNUASjdGhyAqF2AaN0eG6Lo2FtdM0D6KVjbG9zZcQgQOk0koglZMvOnFmmm2dUJonpocOiqepbZabopEIf/FejZmVlzQSYomZ2zTCyo2dlbqxkZXZuZXQtdjMzLjCiZ2jEICYLIAmgk6iGi3lYci+l5Ubt5+0X5NhcTHivsEUmkO3Somx2zTSapG5vdGXECF+AZeMEPawqo3JjdsQge2ziT+tbrMCxZOKcIixX9fY9w4fUOQSCWEEcX+EPfAKjc25kxCCNkrSJkAFzoE36Q1mjZmpq/OosQqBd2cH3PuulR4A36aR0eXBlo3BheQ==")]
        public void SignMultisig_4()
        {
#line 47
  this.SignMultisig("4", "12466", "13466", "JgsgCaCTqIaLeVhyL6XlRu3n7Rfk2FxMeK+wRSaQ7dI=", "PNWOET7LLOWMBMLE4KOCELCX6X3D3Q4H2Q4QJASYIEOF7YIPPQBG3YQ5YI", "IDUTJEUIEVSMXTU4LGTJWZ2UE2E6TIODUKU6UW3FU3UKIQQ77RLUBBBFLA", "1000", "devnet-v33.0", "X4Bl4wQ9rCo=", "advice pudding treat near rule blouse same whisper inner electric quit surface su" +
                    "nny dismiss leader blood seat clown cost exist hospital century reform able spon" +
                    "sor", "DN7MBMCL5JQ3PFUQS7TMX5AH4EEKOBJVDUF4TCV6WERATKFLQF4MQUPZTA BFRTECKTOOE7A5LHCF3TTE" +
                    "OH2A7BW46IYT2SX5VP6ANKEXHZYJY77SJTVM 47YPQTIGQEO7T4Y4RWDYWEKV6RTR2UNBQXBABEEGM72" +
                    "ESWDQNCQ52OPASU", @"gqRtc2lng6ZzdWJzaWeTgaJwa8QgG37AsEvqYbeWkJfmy/QH4QinBTUdC8mKvrEiCairgXiBonBrxCAJYzIJU3OJ8HVnEXc5kcfQPhtzyMT1K/av8BqiXPnCcYKicGvEIOfw+E0GgR358xyNh4sRVfRnHVGhhcIAkIZn9ElYcGihoXPEQF6nXZ7CgInd1h7NVspIPFZNhkPL+vGFpTNwH3Eh9gwPM8pf1EPTHfPvjf14sS7xN7mTK+wrz7Odhp4rdWBNUASjdGhyAqF2AaN0eG6Lo2FtdM0D6KVjbG9zZcQgQOk0koglZMvOnFmmm2dUJonpocOiqepbZabopEIf/FejZmVlzQSYomZ2zTCyo2dlbqxkZXZuZXQtdjMzLjCiZ2jEICYLIAmgk6iGi3lYci+l5Ubt5+0X5NhcTHivsEUmkO3Somx2zTSapG5vdGXECF+AZeMEPawqo3JjdsQge2ziT+tbrMCxZOKcIixX9fY9w4fUOQSCWEEcX+EPfAKjc25kxCCNkrSJkAFzoE36Q1mjZmpq/OosQqBd2cH3PuulR4A36aR0eXBlo3BheQ==", ((string[])(null)));
#line hidden
        }
        
        public virtual void AppendMultisig(string mtx, string mn, string golden, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("mtx", mtx);
            argumentsOfScenario.Add("mn", mn);
            argumentsOfScenario.Add("golden", golden);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Append multisig", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 59
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 60
    testRunner.Given(string.Format("encoded multisig transaction \"{0}\"", mtx), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 61
    testRunner.And(string.Format("mnemonic for private key \"{0}\"", mn), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
    testRunner.When("I append a signature to the multisig transaction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 63
    testRunner.Then(string.Format("the multisig transaction should equal the golden \"{0}\"", golden), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"Append multisig: gqRtc2lng6ZzdWJzaWeTgqJwa8QgG37AsEvqYbeWkJfmy/QH4QinBTUdC8mKvrEiCairgXihc8RAuLAFE0oma0skOoAmOzEwfPuLYpEWl4LINtsiLrUqWQkDxh4WHb29//YCpj4MFbiSgD2jKYt0XKRD86zKCF4RDYGicGvEIAljMglTc4nwdWcRdzmRx9A+G3PIxPUr9q/wGqJc+cJxgaJwa8Qg5/D4TQaBHfnzHI2HixFV9GcdUaGFwgCQhmf0SVhwaKGjdGhyAqF2AaN0eG6Lo2FtdM0D6KVjbG9zZcQgQOk0koglZMvOnFmmm2dUJonpocOiqepbZabopEIf/FejZmVlzQPoomZ2zfMVo2dlbqxkZXZuZXQtdjM4LjCiZ2jEIP6zbDkQFDkAw9pVQsoYNrAP0vgZWRJXzSP2BC+YyDadomx2zfb9pG5vdGXECEUmIgAYUob7o3JjdsQge2ziT+tbrMCxZOKcIixX9fY9w4fUOQSCWEEcX+EPfAKjc25kxCCNkrSJkAFzoE36Q1mjZmpq/OosQqBd2cH3PuulR4A36aR0eXBlo3BheQ==")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", @"gqRtc2lng6ZzdWJzaWeTgqJwa8QgG37AsEvqYbeWkJfmy/QH4QinBTUdC8mKvrEiCairgXihc8RAuLAFE0oma0skOoAmOzEwfPuLYpEWl4LINtsiLrUqWQkDxh4WHb29//YCpj4MFbiSgD2jKYt0XKRD86zKCF4RDYGicGvEIAljMglTc4nwdWcRdzmRx9A+G3PIxPUr9q/wGqJc+cJxgaJwa8Qg5/D4TQaBHfnzHI2HixFV9GcdUaGFwgCQhmf0SVhwaKGjdGhyAqF2AaN0eG6Lo2FtdM0D6KVjbG9zZcQgQOk0koglZMvOnFmmm2dUJonpocOiqepbZabopEIf/FejZmVlzQPoomZ2zfMVo2dlbqxkZXZuZXQtdjM4LjCiZ2jEIP6zbDkQFDkAw9pVQsoYNrAP0vgZWRJXzSP2BC+YyDadomx2zfb9pG5vdGXECEUmIgAYUob7o3JjdsQge2ziT+tbrMCxZOKcIixX9fY9w4fUOQSCWEEcX+EPfAKjc25kxCCNkrSJkAFzoE36Q1mjZmpq/OosQqBd2cH3PuulR4A36aR0eXBlo3BheQ==")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:mtx", @"gqRtc2lng6ZzdWJzaWeTgqJwa8QgG37AsEvqYbeWkJfmy/QH4QinBTUdC8mKvrEiCairgXihc8RAuLAFE0oma0skOoAmOzEwfPuLYpEWl4LINtsiLrUqWQkDxh4WHb29//YCpj4MFbiSgD2jKYt0XKRD86zKCF4RDYGicGvEIAljMglTc4nwdWcRdzmRx9A+G3PIxPUr9q/wGqJc+cJxgaJwa8Qg5/D4TQaBHfnzHI2HixFV9GcdUaGFwgCQhmf0SVhwaKGjdGhyAqF2AaN0eG6Lo2FtdM0D6KVjbG9zZcQgQOk0koglZMvOnFmmm2dUJonpocOiqepbZabopEIf/FejZmVlzQPoomZ2zfMVo2dlbqxkZXZuZXQtdjM4LjCiZ2jEIP6zbDkQFDkAw9pVQsoYNrAP0vgZWRJXzSP2BC+YyDadomx2zfb9pG5vdGXECEUmIgAYUob7o3JjdsQge2ziT+tbrMCxZOKcIixX9fY9w4fUOQSCWEEcX+EPfAKjc25kxCCNkrSJkAFzoE36Q1mjZmpq/OosQqBd2cH3PuulR4A36aR0eXBlo3BheQ==")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:mn", "since during average anxiety protect cherry club long lawsuit loan expand embark " +
            "forum theory winter park twenty ball kangaroo cram burst board host ability left" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:golden", @"gqRtc2lng6ZzdWJzaWeTgqJwa8QgG37AsEvqYbeWkJfmy/QH4QinBTUdC8mKvrEiCairgXihc8RAuLAFE0oma0skOoAmOzEwfPuLYpEWl4LINtsiLrUqWQkDxh4WHb29//YCpj4MFbiSgD2jKYt0XKRD86zKCF4RDYKicGvEIAljMglTc4nwdWcRdzmRx9A+G3PIxPUr9q/wGqJc+cJxoXPEQBAhuyRjsOrnHp3s/xI+iMKiL7QPsh8iJZ22YOJJP0aFUwedMr+a6wfdBXk1OefyrAN1wqJ9rq6O+DrWV1fH0ASBonBrxCDn8PhNBoEd+fMcjYeLEVX0Zx1RoYXCAJCGZ/RJWHBooaN0aHICoXYBo3R4boujYW10zQPopWNsb3NlxCBA6TSSiCVky86cWaabZ1Qmiemhw6Kp6ltlpuikQh/8V6NmZWXNA+iiZnbN8xWjZ2VurGRldm5ldC12MzguMKJnaMQg/rNsORAUOQDD2lVCyhg2sA/S+BlZElfNI/YEL5jINp2ibHbN9v2kbm90ZcQIRSYiABhShvujcmN2xCB7bOJP61uswLFk4pwiLFf19j3Dh9Q5BIJYQRxf4Q98AqNzbmTEII2StImQAXOgTfpDWaNmamr86ixCoF3Zwfc+66VHgDfppHR5cGWjcGF5")]
        public void AppendMultisig_GqRtc2Lng6ZzdWJzaWeTgqJwa8QgG37AsEvqYbeWkJfmyQH4QinBTUdC8MKvrEiCairgXihc8RAuLAFE0Oma0SkOoAmOzEwfPuLYpEWl4LINtsiLrUqWQkDxh4WHb29YCpj4MFbiSgD2JKYt0XKRD86ZKCF4RDYGicGvEIAljMglTc4NwdWcRdzmRx9AG3PIxPUr9QWGqJcCJxgaJwa8Qg5D4TQaBHfnzHI2HixFV9GcdUaGFwgCQhmf0SVhwaKGjdGhyAqF2AaN0EG6Lo2FtdM0D6KVjbG9ZZcQgQOk0KoglZMvOnFmmm2DUJonpocOiqepbZabopEIfFejZmVlzQPoomZ2ZfMVo2DlbqxkZXZuZXQtdjM4LjCiZ2JEIP6ZbDkQFDkAw9PVQsoYNrAP0VgZWRJXzSP2BCYyDadomx2Zfb9PG5VdGXECEUmIgAYUob7O3JjdsQge2ZiTTbrMCxZOKcIixX9FY9W4FUOQSCWEEcXEPfAKjc25KxCCNkrSJkAFzoE36Q1MjZmpqOosQqBd2CH3PuulR4A36AR0EXBlo3BheQ()
        {
#line 59
  this.AppendMultisig(@"gqRtc2lng6ZzdWJzaWeTgqJwa8QgG37AsEvqYbeWkJfmy/QH4QinBTUdC8mKvrEiCairgXihc8RAuLAFE0oma0skOoAmOzEwfPuLYpEWl4LINtsiLrUqWQkDxh4WHb29//YCpj4MFbiSgD2jKYt0XKRD86zKCF4RDYGicGvEIAljMglTc4nwdWcRdzmRx9A+G3PIxPUr9q/wGqJc+cJxgaJwa8Qg5/D4TQaBHfnzHI2HixFV9GcdUaGFwgCQhmf0SVhwaKGjdGhyAqF2AaN0eG6Lo2FtdM0D6KVjbG9zZcQgQOk0koglZMvOnFmmm2dUJonpocOiqepbZabopEIf/FejZmVlzQPoomZ2zfMVo2dlbqxkZXZuZXQtdjM4LjCiZ2jEIP6zbDkQFDkAw9pVQsoYNrAP0vgZWRJXzSP2BC+YyDadomx2zfb9pG5vdGXECEUmIgAYUob7o3JjdsQge2ziT+tbrMCxZOKcIixX9fY9w4fUOQSCWEEcX+EPfAKjc25kxCCNkrSJkAFzoE36Q1mjZmpq/OosQqBd2cH3PuulR4A36aR0eXBlo3BheQ==", "since during average anxiety protect cherry club long lawsuit loan expand embark " +
                    "forum theory winter park twenty ball kangaroo cram burst board host ability left" +
                    "", @"gqRtc2lng6ZzdWJzaWeTgqJwa8QgG37AsEvqYbeWkJfmy/QH4QinBTUdC8mKvrEiCairgXihc8RAuLAFE0oma0skOoAmOzEwfPuLYpEWl4LINtsiLrUqWQkDxh4WHb29//YCpj4MFbiSgD2jKYt0XKRD86zKCF4RDYKicGvEIAljMglTc4nwdWcRdzmRx9A+G3PIxPUr9q/wGqJc+cJxoXPEQBAhuyRjsOrnHp3s/xI+iMKiL7QPsh8iJZ22YOJJP0aFUwedMr+a6wfdBXk1OefyrAN1wqJ9rq6O+DrWV1fH0ASBonBrxCDn8PhNBoEd+fMcjYeLEVX0Zx1RoYXCAJCGZ/RJWHBooaN0aHICoXYBo3R4boujYW10zQPopWNsb3NlxCBA6TSSiCVky86cWaabZ1Qmiemhw6Kp6ltlpuikQh/8V6NmZWXNA+iiZnbN8xWjZ2VurGRldm5ldC12MzguMKJnaMQg/rNsORAUOQDD2lVCyhg2sA/S+BlZElfNI/YEL5jINp2ibHbN9v2kbm90ZcQIRSYiABhShvujcmN2xCB7bOJP61uswLFk4pwiLFf19j3Dh9Q5BIJYQRxf4Q98AqNzbmTEII2StImQAXOgTfpDWaNmamr86ixCoF3Zwfc+66VHgDfppHR5cGWjcGF5", ((string[])(null)));
#line hidden
        }
        
        public virtual void MergeMultisig(string msigtxns, string golden, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("msigtxns", msigtxns);
            argumentsOfScenario.Add("golden", golden);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Merge multisig", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 69
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 70
    testRunner.Given(string.Format("encoded multisig transactions \"{0}\"", msigtxns), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 71
    testRunner.When("I merge the multisig transactions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
    testRunner.Then(string.Format("the multisig transaction should equal the golden \"{0}\"", golden), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"Merge multisig: gqRtc2lng6ZzdWJzaWeTgqJwa8QgphunEajorK/Yj00fDOcOo1TXKQMvhe6frJxwipP1yiKhc8RA+f+fqZgjzOKV1Y8RlHxk0R5InGx5jsnF1gbKXVq+pAxwqSvtSTjTM7mRY0zH7tbv0dJtcuturoLbmX3lRWZCD4GicGvEIM9tutXmHvqZsk/Hk65YFjn348EccLQrgf9Kp0bzsvnUgaJwa8QgegKRmOgvSz67ItDrNQquyDe17UTgWictMvtqYfpYGCijdGhyAqF2AaN0eG6Io2FtdM0D6KNmZWXNA+iiZnYBomdoxCD+s2w5EBQ5AMPaVULKGDawD9L4GVkSV80j9gQvmMg2naJsds0D6KNyY3bEII4yNZs+IAqmxwEyX1cl45jSec8y0gubN5/lTYQPr95eo3NuZMQgkC7TLOEydGApKJoTita0Z+7jHVqj74oYHwVgXX1YjSKkdHlwZaNwYXk= gqRtc2lng6ZzdWJzaWeTgaJwa8QgphunEajorK/Yj00fDOcOo1TXKQMvhe6frJxwipP1yiKConBrxCDPbbrV5h76mbJPx5OuWBY59+PBHHC0K4H/SqdG87L51KFzxEBfG9erywuPXY/DsgOsadIqou7676GhGH4oSX5K2iSLDCf8L0pFoS3Hmepjsy8FcY62AFIL3Vg5lQLxTdlF670NgaJwa8QgegKRmOgvSz67ItDrNQquyDe17UTgWictMvtqYfpYGCijdGhyAqF2AaN0eG6Io2FtdM0D6KNmZWXNA+iiZnYBomdoxCD+s2w5EBQ5AMPaVULKGDawD9L4GVkSV80j9gQvmMg2naJsds0D6KNyY3bEII4yNZs+IAqmxwEyX1cl45jSec8y0gubN5/lTYQPr95eo3NuZMQgkC7TLOEydGApKJoTita0Z+7jHVqj74oYHwVgXX1YjSKkdHlwZaNwYXk=")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", @"gqRtc2lng6ZzdWJzaWeTgqJwa8QgphunEajorK/Yj00fDOcOo1TXKQMvhe6frJxwipP1yiKhc8RA+f+fqZgjzOKV1Y8RlHxk0R5InGx5jsnF1gbKXVq+pAxwqSvtSTjTM7mRY0zH7tbv0dJtcuturoLbmX3lRWZCD4GicGvEIM9tutXmHvqZsk/Hk65YFjn348EccLQrgf9Kp0bzsvnUgaJwa8QgegKRmOgvSz67ItDrNQquyDe17UTgWictMvtqYfpYGCijdGhyAqF2AaN0eG6Io2FtdM0D6KNmZWXNA+iiZnYBomdoxCD+s2w5EBQ5AMPaVULKGDawD9L4GVkSV80j9gQvmMg2naJsds0D6KNyY3bEII4yNZs+IAqmxwEyX1cl45jSec8y0gubN5/lTYQPr95eo3NuZMQgkC7TLOEydGApKJoTita0Z+7jHVqj74oYHwVgXX1YjSKkdHlwZaNwYXk= gqRtc2lng6ZzdWJzaWeTgaJwa8QgphunEajorK/Yj00fDOcOo1TXKQMvhe6frJxwipP1yiKConBrxCDPbbrV5h76mbJPx5OuWBY59+PBHHC0K4H/SqdG87L51KFzxEBfG9erywuPXY/DsgOsadIqou7676GhGH4oSX5K2iSLDCf8L0pFoS3Hmepjsy8FcY62AFIL3Vg5lQLxTdlF670NgaJwa8QgegKRmOgvSz67ItDrNQquyDe17UTgWictMvtqYfpYGCijdGhyAqF2AaN0eG6Io2FtdM0D6KNmZWXNA+iiZnYBomdoxCD+s2w5EBQ5AMPaVULKGDawD9L4GVkSV80j9gQvmMg2naJsds0D6KNyY3bEII4yNZs+IAqmxwEyX1cl45jSec8y0gubN5/lTYQPr95eo3NuZMQgkC7TLOEydGApKJoTita0Z+7jHVqj74oYHwVgXX1YjSKkdHlwZaNwYXk=")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:msigtxns", @"gqRtc2lng6ZzdWJzaWeTgqJwa8QgphunEajorK/Yj00fDOcOo1TXKQMvhe6frJxwipP1yiKhc8RA+f+fqZgjzOKV1Y8RlHxk0R5InGx5jsnF1gbKXVq+pAxwqSvtSTjTM7mRY0zH7tbv0dJtcuturoLbmX3lRWZCD4GicGvEIM9tutXmHvqZsk/Hk65YFjn348EccLQrgf9Kp0bzsvnUgaJwa8QgegKRmOgvSz67ItDrNQquyDe17UTgWictMvtqYfpYGCijdGhyAqF2AaN0eG6Io2FtdM0D6KNmZWXNA+iiZnYBomdoxCD+s2w5EBQ5AMPaVULKGDawD9L4GVkSV80j9gQvmMg2naJsds0D6KNyY3bEII4yNZs+IAqmxwEyX1cl45jSec8y0gubN5/lTYQPr95eo3NuZMQgkC7TLOEydGApKJoTita0Z+7jHVqj74oYHwVgXX1YjSKkdHlwZaNwYXk= gqRtc2lng6ZzdWJzaWeTgaJwa8QgphunEajorK/Yj00fDOcOo1TXKQMvhe6frJxwipP1yiKConBrxCDPbbrV5h76mbJPx5OuWBY59+PBHHC0K4H/SqdG87L51KFzxEBfG9erywuPXY/DsgOsadIqou7676GhGH4oSX5K2iSLDCf8L0pFoS3Hmepjsy8FcY62AFIL3Vg5lQLxTdlF670NgaJwa8QgegKRmOgvSz67ItDrNQquyDe17UTgWictMvtqYfpYGCijdGhyAqF2AaN0eG6Io2FtdM0D6KNmZWXNA+iiZnYBomdoxCD+s2w5EBQ5AMPaVULKGDawD9L4GVkSV80j9gQvmMg2naJsds0D6KNyY3bEII4yNZs+IAqmxwEyX1cl45jSec8y0gubN5/lTYQPr95eo3NuZMQgkC7TLOEydGApKJoTita0Z+7jHVqj74oYHwVgXX1YjSKkdHlwZaNwYXk=")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:golden", @"gqRtc2lng6ZzdWJzaWeTgqJwa8QgphunEajorK/Yj00fDOcOo1TXKQMvhe6frJxwipP1yiKhc8RA+f+fqZgjzOKV1Y8RlHxk0R5InGx5jsnF1gbKXVq+pAxwqSvtSTjTM7mRY0zH7tbv0dJtcuturoLbmX3lRWZCD4KicGvEIM9tutXmHvqZsk/Hk65YFjn348EccLQrgf9Kp0bzsvnUoXPEQF8b16vLC49dj8OyA6xp0iqi7vrvoaEYfihJfkraJIsMJ/wvSkWhLceZ6mOzLwVxjrYAUgvdWDmVAvFN2UXrvQ2BonBrxCB6ApGY6C9LPrsi0Os1Cq7IN7XtROBaJy0y+2ph+lgYKKN0aHICoXYBo3R4boijYW10zQPoo2ZlZc0D6KJmdgGiZ2jEIP6zbDkQFDkAw9pVQsoYNrAP0vgZWRJXzSP2BC+YyDadomx2zQPoo3JjdsQgjjI1mz4gCqbHATJfVyXjmNJ5zzLSC5s3n+VNhA+v3l6jc25kxCCQLtMs4TJ0YCkomhOK1rRn7uMdWqPvihgfBWBdfViNIqR0eXBlo3BheQ==")]
        public void MergeMultisig_GqRtc2Lng6ZzdWJzaWeTgqJwa8QgphunEajorKYj00FDOcOo1TXKQMvhe6FrJxwipP1YiKhc8RAFFqZgjzOKV1Y8RlHxk0R5InGx5JsnF1GbKXVqPAxwqSvtSTjTM7MRY0ZH7Tbv0DJtcuturoLbmX3LRWZCD4GicGvEIM9TutXmHvqZskHk65YFjn348EccLQrgf9Kp0BzsvnUgaJwa8QgegKRmOgvSz67ItDrNQquyDe17UTgWictMvtqYfpYGCijdGhyAqF2AaN0EG6Io2FtdM0D6KNmZWXNAIiZnYBomdoxCDS2W5EBQ5AMPaVULKGDawD9L4GVkSV80J9GQvmMg2NaJsds0D6KNyY3BEII4YNZsIAqmxwEyX1Cl45JSec8Y0GubN5LTYQPr95Eo3NuZMQgkC7TLOEydGApKJoTita0Z7JHVqj74OYHwVgXX1YjSKkdHlwZaNwYXkGqRtc2Lng6ZzdWJzaWeTgaJwa8QgphunEajorKYj00FDOcOo1TXKQMvhe6FrJxwipP1YiKConBrxCDPbbrV5H76MbJPx5OuWBY59PBHHC0K4HSqdG87L51KFzxEBfG9ErywuPXYDsgOsadIqou7676GhGH4OSX5K2ISLDCf8L0PFoS3Hmepjsy8FcY62AFIL3Vg5LQLxTdlF670NgaJwa8QgegKRmOgvSz67ItDrNQquyDe17UTgWictMvtqYfpYGCijdGhyAqF2AaN0EG6Io2FtdM0D6KNmZWXNAIiZnYBomdoxCDS2W5EBQ5AMPaVULKGDawD9L4GVkSV80J9GQvmMg2NaJsds0D6KNyY3BEII4YNZsIAqmxwEyX1Cl45JSec8Y0GubN5LTYQPr95Eo3NuZMQgkC7TLOEydGApKJoTita0Z7JHVqj74OYHwVgXX1YjSKkdHlwZaNwYXk()
        {
#line 69
  this.MergeMultisig(@"gqRtc2lng6ZzdWJzaWeTgqJwa8QgphunEajorK/Yj00fDOcOo1TXKQMvhe6frJxwipP1yiKhc8RA+f+fqZgjzOKV1Y8RlHxk0R5InGx5jsnF1gbKXVq+pAxwqSvtSTjTM7mRY0zH7tbv0dJtcuturoLbmX3lRWZCD4GicGvEIM9tutXmHvqZsk/Hk65YFjn348EccLQrgf9Kp0bzsvnUgaJwa8QgegKRmOgvSz67ItDrNQquyDe17UTgWictMvtqYfpYGCijdGhyAqF2AaN0eG6Io2FtdM0D6KNmZWXNA+iiZnYBomdoxCD+s2w5EBQ5AMPaVULKGDawD9L4GVkSV80j9gQvmMg2naJsds0D6KNyY3bEII4yNZs+IAqmxwEyX1cl45jSec8y0gubN5/lTYQPr95eo3NuZMQgkC7TLOEydGApKJoTita0Z+7jHVqj74oYHwVgXX1YjSKkdHlwZaNwYXk= gqRtc2lng6ZzdWJzaWeTgaJwa8QgphunEajorK/Yj00fDOcOo1TXKQMvhe6frJxwipP1yiKConBrxCDPbbrV5h76mbJPx5OuWBY59+PBHHC0K4H/SqdG87L51KFzxEBfG9erywuPXY/DsgOsadIqou7676GhGH4oSX5K2iSLDCf8L0pFoS3Hmepjsy8FcY62AFIL3Vg5lQLxTdlF670NgaJwa8QgegKRmOgvSz67ItDrNQquyDe17UTgWictMvtqYfpYGCijdGhyAqF2AaN0eG6Io2FtdM0D6KNmZWXNA+iiZnYBomdoxCD+s2w5EBQ5AMPaVULKGDawD9L4GVkSV80j9gQvmMg2naJsds0D6KNyY3bEII4yNZs+IAqmxwEyX1cl45jSec8y0gubN5/lTYQPr95eo3NuZMQgkC7TLOEydGApKJoTita0Z+7jHVqj74oYHwVgXX1YjSKkdHlwZaNwYXk=", @"gqRtc2lng6ZzdWJzaWeTgqJwa8QgphunEajorK/Yj00fDOcOo1TXKQMvhe6frJxwipP1yiKhc8RA+f+fqZgjzOKV1Y8RlHxk0R5InGx5jsnF1gbKXVq+pAxwqSvtSTjTM7mRY0zH7tbv0dJtcuturoLbmX3lRWZCD4KicGvEIM9tutXmHvqZsk/Hk65YFjn348EccLQrgf9Kp0bzsvnUoXPEQF8b16vLC49dj8OyA6xp0iqi7vrvoaEYfihJfkraJIsMJ/wvSkWhLceZ6mOzLwVxjrYAUgvdWDmVAvFN2UXrvQ2BonBrxCB6ApGY6C9LPrsi0Os1Cq7IN7XtROBaJy0y+2ph+lgYKKN0aHICoXYBo3R4boijYW10zQPoo2ZlZc0D6KJmdgGiZ2jEIP6zbDkQFDkAw9pVQsoYNrAP0vgZWRJXzSP2BC+YyDadomx2zQPoo3JjdsQgjjI1mz4gCqbHATJfVyXjmNJ5zzLSC5s3n+VNhA+v3l6jc25kxCCQLtMs4TJ0YCkomhOK1rRn7uMdWqPvihgfBWBdfViNIqR0eXBlo3BheQ==", ((string[])(null)));
#line hidden
        }
        
        public virtual void MicroalgosToAlgos(string microalgos, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("microalgos", microalgos);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Microalgos to algos", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 78
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 79
    testRunner.When(string.Format("I convert {0} microalgos to algos and back", microalgos), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 80
    testRunner.Then(string.Format("it should still be the same amount of microalgos {0}", microalgos), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Microalgos to algos: 123456789012")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "123456789012")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:microalgos", "123456789012")]
        public void MicroalgosToAlgos_123456789012()
        {
#line 78
  this.MicroalgosToAlgos("123456789012", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Microalgos to algos: 123456789013")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "123456789013")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:microalgos", "123456789013")]
        public void MicroalgosToAlgos_123456789013()
        {
#line 78
  this.MicroalgosToAlgos("123456789013", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Microalgos to algos: 123456789014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "123456789014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:microalgos", "123456789014")]
        public void MicroalgosToAlgos_123456789014()
        {
#line 78
  this.MicroalgosToAlgos("123456789014", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Microalgos to algos: 123456789015")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "123456789015")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:microalgos", "123456789015")]
        public void MicroalgosToAlgos_123456789015()
        {
#line 78
  this.MicroalgosToAlgos("123456789015", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Microalgos to algos: 123456789016")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "123456789016")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:microalgos", "123456789016")]
        public void MicroalgosToAlgos_123456789016()
        {
#line 78
  this.MicroalgosToAlgos("123456789016", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Microalgos to algos: 123456789017")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit.offline")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "123456789017")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:microalgos", "123456789017")]
        public void MicroalgosToAlgos_123456789017()
        {
#line 78
  this.MicroalgosToAlgos("123456789017", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
